#include <idc.idc>

// kg5rki
// 12/13/2018




static RemoveAllChunks(address)
{
	auto a, b;
	a = NextFuncFchunk(address, address);
	b=0;
	while(a != BADADDR)
	{
		RemoveFchunk(address, a);
		a = NextFuncFchunk(address, address);
		b = b +1;
	}
	Message(form("function at 0x%08X, removed %d chunks\n",address,b));
}


/*
static makeKey(bytes, name, startAddr)
{
	auto cqw, stype, offset, ret;
	offset = FindBinary(startAddr, SEARCH_DOWN, bytes);
	if(offset != BADADDR)
	{
		cqw = Dword(offset);
		if(cqw == 0x10)
			stype = form("XECRYPT_RSAPUB_1024");
		else if(cqw == 0x18)
			stype = form("XECRYPT_RSAPUB_1536");
		else if(cqw == 0x20)
			stype = form("XECRYPT_RSAPUB_2048");
		else if(cqw == 0x40)
			stype = form("XECRYPT_RSAPUB_4096");
		else
		{
			Message(form("Could not make %s struct offset: 0x%08x, unknown CQW 0x%x\n", name, offset, cqw));
			return;
		}
		ret = MakeStructEx(offset, -1, stype);
		if(ret == 0)
			Message(form("Could not make %s struct type %s offset: 0x%08x err: %x\n", name, stype, offset, ret));
		else
			Message(form("Key struct %s marked at offset: 0x%08x\n", name, offset));
		MakeName(offset, name);
	}
	else
		Message(form("Did not find %s\n", name));
	return offset;
}*/

static nameBinaryFunction(startAddr, bytes, name)
{
	auto offset;
	offset = FindBinary(startAddr, SEARCH_DOWN, bytes);
	if(offset != BADADDR)
	{
		MakeName(offset, name);
		MakeFunction(offset, BADADDR);
		Message(form("Named function %s at offset: 0x%08x\n", name, offset));	
	}
	else
		Message(form("Did not find binary function %s\n", name));	

	return offset;
}

static nameBinary(startAddr, bytes, len, name)
{
	auto offset;
	offset = FindBinary(startAddr, SEARCH_DOWN, bytes);
	if(offset != BADADDR)
	{
		MakeByte(offset);
		MakeArray(offset, len);
		MakeName(offset, name);
		Message(form("Named binary array %s at offset: 0x%08x\n", name, offset));
		offset = offset + len;
	}
	else
		Message(form("Did not find binary data %s\n", name));	
	return offset;
}

static nameBinaryString(startAddr, bytes, len, name)
{
	auto offset;
	offset = FindBinary(startAddr, SEARCH_DOWN, bytes);
	if(offset != BADADDR)
	{
		MakeStr(offset, offset+len);
		MakeName(offset, name);
		Message(form("Named binary string %s at offset: 0x%08x\n", name, offset));
		offset = offset + len;
	}
	else
		Message(form("Did not find binary string data %s\n", name));	
	return offset;
}

static nameFunctionFindBytes(name, bytes)
{
	auto ea, start;
	ea = FindBinary(0, SEARCH_DOWN, bytes);
	if(ea != BADADDR)
	{	
		start = GetFunctionAttr(ea,FUNCATTR_START);
		if(start != BADADDR)
		{
			MakeName(start, name);
			Message(form("Named function %s at offset: 0x%08x\n", name, start));
			ea = FindBinary(ea+4, SEARCH_DOWN, bytes);
			if(ea != BADADDR)
			{
				Message(form("# WARNING second instance found at 0x%x\n", name, ea));	
			}
		}
		else
				Message(form("could not find function start for %s in 0x%x\n", name, ea));	
	}
	else
		Message(form("Did not find binary function %s\n", name));	
}

static nameFunctionByXref(name, callname, xrnum)
{
	auto ea, ref, start, xrc;
	ea = LocByName(callname);
	if(ea != BADADDR)
	{
		ref = RfirstB(ea); // first xref
		if(ref != BADADDR)
		{
			xrc = 1;
			while(xrc < xrnum)
			{
				ref = RnextB(ea, ref);
				xrc = xrc + 1;
			}
			if(ref != BADADDR)
			{
				start = GetFunctionAttr(ref,FUNCATTR_START);
				if(start != BADADDR)
				{
					MakeName(start, name);
					Message(form("Named function %s at offset: 0x%08x\n", name, start));
				}
				else
					Message(form("cound not find function start for %s at %08x!!\n", name, ref));
			}
			else
				Message(form("cound not find xref #%d calling %s to name %s!!\n", xrnum, callname, name));
		}
	}
	else
		Message(form("cound not find caller %s to name %s!!\n", callname, name));
}


static nameByte(offset, name)
{
	MakeByte(offset);
	MakeName(offset, name);
}

static nameWord(offset, name)
{
	MakeWord(offset);
	MakeName(offset, name);
}

static nameDword(offset, name)
{
	MakeDword(offset);
	MakeName(offset, name);
}

/*static nameBasics()
{
	nameWord(0x0, "Magic");
	// MakeStructEx(0, -1, "BLDR");
	// MakeName(0, "HvHdr");

	nameDword(0x38, "pKeyVault");
	
	MakeByte(Dword(0x44));
	nameDword(Dword(0x44), "PteTable");
	MakeDword(Dword(0x48));
	
	nameDword(0x50, "prKernelHvExportTable");
	nameByte(0x74, "ConsoleType");
	nameByte(0x75, "UpdateSequence");
	nameWord(0x76, "UpdateSequenceAllow");
	nameDword(0x78, "prXboxKrnlBaseVersion");
	nameDword(0x7C, "prHvBaseVersion");
	nameDword(0x80, "pHvTable");
	
	nameDword(0x3C, "pKeyPropertiesTbl"); // aray dword 0x0 terminated
	nameDword(Dword(0x3c), "KeyPropertiesTbl");
	nameDword(0x40, "pKeyvaultLookupTbl"); // array short 0x0 terminated
	nameDword(Dword(0x40), "KeyvaultLookupTbl");

	nameDword(0x30, "KeysStatus");
	nameDword(0x34, "pPirsKey");
	nameDword(0x10000, "g_dwHvpStackLock");

	
	// cpu key is stowed currently at 0x20
	MakeByte(0x20);
	MakeArray(0x20, 0x10);
	MakeName(0x20, "CpuKey");
	// xex2 is stowed currently at 0x54
	MakeByte(0x54);
	MakeArray(0x54, 0x10);
	MakeName(0x54, "Xex2Key");
	// transfor magic at 0x18
	MakeByte(0x18);
	MakeArray(0x18, 8);
	MakeName(0x18, "TransformMagic");
	
	MakeArray(0x100F0, 0x10);
	MakeName(0x100F0, "HV_ecc");
	
	nameFunctionByXref("XeCryptAesDmMac", "XeCryptAesEncrypt", 4);
		nameBinaryFunction(0, "38 60 02 00 64 63 80 00 78 63 07 C6 64 63 C8 00 4E 80 00 20", "HvpGetFlashBaseAddress");
	
	nameBinary(0, "C6 63 63 A5 F8 7C 7C 84 EE 77 77 99 F6 7B 7B 8D", 0x1000, "g_XeCryptAesE"); 
	nameBinaryString(0, "58 42 4F 58 33 36 30 58 45 58", 10, "XEXSalt"); // XBOX360XEX
	makeKey("00 00 00 20 00 00 00 03 00 00 00 00 00 00 00 00 DD 5F 49 6F 99 4D 37 BB", "CONSTANT_MASTER_KEY", 0); // DD5F496F994D37BB
	nameFunctionFindBytes("XeCryptAesKeyTable", "39 65 01 00 39 85 05 00 39 C5 09 00 39 E5 0D 00 38 85 11 10");
	MakeQword(sysent + i + 40);
	
	MakeComm(sysent + i, form("syscall %i", syscallnum));
	MakeUnknown(address, 8, 0);
	MakeNameEx(address, getSyscallName(syscallnum), 0);
}*/


static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	;
	add_segm_ex(0X800C000,0X80E7C00,0,1,1,5,ADDSEG_NOSREG);
	SegRename(0X800C000,"ROM");
	SegClass (0X800C000,"CODE");
	SegDefReg(0x800C000,"T",0x0);
	SegDefReg(0x800C000,"DS",0x0);
	set_segm_type(0X800C000,2);
	add_segm_ex(0X1FFFC000,0X1FFFC004,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X1FFFC000,"REGISTERS");
	SegClass (0X1FFFC000,"REGISTERS");
	SegDefReg(0x1FFFC000,"T",0x0);
	SegDefReg(0x1FFFC000,"DS",0x1);
	add_segm_ex(0X1FFFC008,0X1FFFC00C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X1FFFC008,"REGISTERS");
	SegClass (0X1FFFC008,"REGISTERS");
	SegDefReg(0x1FFFC008,"T",0x0);
	SegDefReg(0x1FFFC008,"DS",0x1);
	add_segm_ex(0X20000000,0X200F0000,0,1,1,2,ADDSEG_NOSREG);
	SegRename(0X20000000,"RAM");
	SegClass (0X20000000,"RAM");
	SegDefReg(0x20000000,"T",0x0);
	SegDefReg(0x20000000,"DS",0x0);
	add_segm_ex(0X40000000,0X40000044,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000000,"REGISTERS");
	SegClass (0X40000000,"REGISTERS");
	SegDefReg(0x40000000,"T",0x0);
	SegDefReg(0x40000000,"DS",0x1);
	add_segm_ex(0X40000048,0X40000054,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000048,"REGISTERS");
	SegClass (0X40000048,"REGISTERS");
	SegDefReg(0x40000048,"T",0x0);
	SegDefReg(0x40000048,"DS",0x1);
	add_segm_ex(0X40000400,0X40000444,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000400,"REGISTERS");
	SegClass (0X40000400,"REGISTERS");
	SegDefReg(0x40000400,"T",0x0);
	SegDefReg(0x40000400,"DS",0x1);
	add_segm_ex(0X40000448,0X40000454,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000448,"REGISTERS");
	SegClass (0X40000448,"REGISTERS");
	SegDefReg(0x40000448,"T",0x0);
	SegDefReg(0x40000448,"DS",0x1);
	add_segm_ex(0X40000800,0X40000844,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000800,"REGISTERS");
	SegClass (0X40000800,"REGISTERS");
	SegDefReg(0x40000800,"T",0x0);
	SegDefReg(0x40000800,"DS",0x1);
	add_segm_ex(0X40000848,0X40000854,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000848,"REGISTERS");
	SegClass (0X40000848,"REGISTERS");
	SegDefReg(0x40000848,"T",0x0);
	SegDefReg(0x40000848,"DS",0x1);
	add_segm_ex(0X40000C00,0X40000C44,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000C00,"REGISTERS");
	SegClass (0X40000C00,"REGISTERS");
	SegDefReg(0x40000C00,"T",0x0);
	SegDefReg(0x40000C00,"DS",0x1);
	add_segm_ex(0X40000C48,0X40000C54,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40000C48,"REGISTERS");
	SegClass (0X40000C48,"REGISTERS");
	SegDefReg(0x40000C48,"T",0x0);
	SegDefReg(0x40000C48,"DS",0x1);
	add_segm_ex(0X40001000,0X40001008,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001000,"REGISTERS");
	SegClass (0X40001000,"REGISTERS");
	SegDefReg(0x40001000,"T",0x0);
	SegDefReg(0x40001000,"DS",0x1);
	add_segm_ex(0X4000100C,0X40001018,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4000100C,"REGISTERS");
	SegClass (0X4000100C,"REGISTERS");
	SegDefReg(0x4000100C,"T",0x0);
	SegDefReg(0x4000100C,"DS",0x1);
	add_segm_ex(0X40001024,0X40001030,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001024,"REGISTERS");
	SegClass (0X40001024,"REGISTERS");
	SegDefReg(0x40001024,"T",0x0);
	SegDefReg(0x40001024,"DS",0x1);
	add_segm_ex(0X40001400,0X40001408,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001400,"REGISTERS");
	SegClass (0X40001400,"REGISTERS");
	SegDefReg(0x40001400,"T",0x0);
	SegDefReg(0x40001400,"DS",0x1);
	add_segm_ex(0X4000140C,0X40001418,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4000140C,"REGISTERS");
	SegClass (0X4000140C,"REGISTERS");
	SegDefReg(0x4000140C,"T",0x0);
	SegDefReg(0x4000140C,"DS",0x1);
	add_segm_ex(0X40001424,0X40001430,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001424,"REGISTERS");
	SegClass (0X40001424,"REGISTERS");
	SegDefReg(0x40001424,"T",0x0);
	SegDefReg(0x40001424,"DS",0x1);
	add_segm_ex(0X40001800,0X4000181C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001800,"REGISTERS");
	SegClass (0X40001800,"REGISTERS");
	SegDefReg(0x40001800,"T",0x0);
	SegDefReg(0x40001800,"DS",0x1);
	add_segm_ex(0X40001820,0X40001830,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001820,"REGISTERS");
	SegClass (0X40001820,"REGISTERS");
	SegDefReg(0x40001820,"T",0x0);
	SegDefReg(0x40001820,"DS",0x1);
	add_segm_ex(0X40001834,0X4000183C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001834,"REGISTERS");
	SegClass (0X40001834,"REGISTERS");
	SegDefReg(0x40001834,"T",0x0);
	SegDefReg(0x40001834,"DS",0x1);
	add_segm_ex(0X40001C00,0X40001C04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001C00,"REGISTERS");
	SegClass (0X40001C00,"REGISTERS");
	SegDefReg(0x40001C00,"T",0x0);
	SegDefReg(0x40001C00,"DS",0x1);
	add_segm_ex(0X40001C0C,0X40001C1C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001C0C,"REGISTERS");
	SegClass (0X40001C0C,"REGISTERS");
	SegDefReg(0x40001C0C,"T",0x0);
	SegDefReg(0x40001C0C,"DS",0x1);
	add_segm_ex(0X40001C20,0X40001C30,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001C20,"REGISTERS");
	SegClass (0X40001C20,"REGISTERS");
	SegDefReg(0x40001C20,"T",0x0);
	SegDefReg(0x40001C20,"DS",0x1);
	add_segm_ex(0X40001C34,0X40001C38,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40001C34,"REGISTERS");
	SegClass (0X40001C34,"REGISTERS");
	SegDefReg(0x40001C34,"T",0x0);
	SegDefReg(0x40001C34,"DS",0x1);
	add_segm_ex(0X40002000,0X40002004,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002000,"REGISTERS");
	SegClass (0X40002000,"REGISTERS");
	SegDefReg(0x40002000,"T",0x0);
	SegDefReg(0x40002000,"DS",0x1);
	add_segm_ex(0X4000200C,0X4000201C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4000200C,"REGISTERS");
	SegClass (0X4000200C,"REGISTERS");
	SegDefReg(0x4000200C,"T",0x0);
	SegDefReg(0x4000200C,"DS",0x1);
	add_segm_ex(0X40002020,0X40002030,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002020,"REGISTERS");
	SegClass (0X40002020,"REGISTERS");
	SegDefReg(0x40002020,"T",0x0);
	SegDefReg(0x40002020,"DS",0x1);
	add_segm_ex(0X40002034,0X40002038,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002034,"REGISTERS");
	SegClass (0X40002034,"REGISTERS");
	SegDefReg(0x40002034,"T",0x0);
	SegDefReg(0x40002034,"DS",0x1);
	add_segm_ex(0X40002800,0X4000284C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002800,"REGISTERS");
	SegClass (0X40002800,"REGISTERS");
	SegDefReg(0x40002800,"T",0x0);
	SegDefReg(0x40002800,"DS",0x1);
	add_segm_ex(0X40002850,0X400028A0,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002850,"REGISTERS");
	SegClass (0X40002850,"REGISTERS");
	SegDefReg(0x40002850,"T",0x0);
	SegDefReg(0x40002850,"DS",0x1);
	add_segm_ex(0X40002C00,0X40002C0C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40002C00,"REGISTERS");
	SegClass (0X40002C00,"REGISTERS");
	SegDefReg(0x40002C00,"T",0x0);
	SegDefReg(0x40002C00,"DS",0x1);
	add_segm_ex(0X40003000,0X40003010,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40003000,"REGISTERS");
	SegClass (0X40003000,"REGISTERS");
	SegDefReg(0x40003000,"T",0x0);
	SegDefReg(0x40003000,"DS",0x1);
	add_segm_ex(0X40003800,0X40003824,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40003800,"REGISTERS");
	SegClass (0X40003800,"REGISTERS");
	SegDefReg(0x40003800,"T",0x0);
	SegDefReg(0x40003800,"DS",0x1);
	add_segm_ex(0X40003C00,0X40003C24,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40003C00,"REGISTERS");
	SegClass (0X40003C00,"REGISTERS");
	SegDefReg(0x40003C00,"T",0x0);
	SegDefReg(0x40003C00,"DS",0x1);
	add_segm_ex(0X40004400,0X4000441C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40004400,"REGISTERS");
	SegClass (0X40004400,"REGISTERS");
	SegDefReg(0x40004400,"T",0x0);
	SegDefReg(0x40004400,"DS",0x1);
	add_segm_ex(0X40004800,0X4000481C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40004800,"REGISTERS");
	SegClass (0X40004800,"REGISTERS");
	SegDefReg(0x40004800,"T",0x0);
	SegDefReg(0x40004800,"DS",0x1);
	add_segm_ex(0X40004C00,0X40004C18,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40004C00,"REGISTERS");
	SegClass (0X40004C00,"REGISTERS");
	SegDefReg(0x40004C00,"T",0x0);
	SegDefReg(0x40004C00,"DS",0x1);
	add_segm_ex(0X40005000,0X40005018,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40005000,"REGISTERS");
	SegClass (0X40005000,"REGISTERS");
	SegDefReg(0x40005000,"T",0x0);
	SegDefReg(0x40005000,"DS",0x1);
	add_segm_ex(0X40005400,0X40005424,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40005400,"REGISTERS");
	SegClass (0X40005400,"REGISTERS");
	SegDefReg(0x40005400,"T",0x0);
	SegDefReg(0x40005400,"DS",0x1);
	add_segm_ex(0X40005800,0X40005824,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40005800,"REGISTERS");
	SegClass (0X40005800,"REGISTERS");
	SegDefReg(0x40005800,"T",0x0);
	SegDefReg(0x40005800,"DS",0x1);
	add_segm_ex(0X40005C00,0X40005C24,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40005C00,"REGISTERS");
	SegClass (0X40005C00,"REGISTERS");
	SegDefReg(0x40005C00,"T",0x0);
	SegDefReg(0x40005C00,"DS",0x1);
	add_segm_ex(0X40006400,0X40006420,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006400,"REGISTERS");
	SegClass (0X40006400,"REGISTERS");
	SegDefReg(0x40006400,"T",0x0);
	SegDefReg(0x40006400,"DS",0x1);
	add_segm_ex(0X40006580,0X400065D0,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006580,"REGISTERS");
	SegClass (0X40006580,"REGISTERS");
	SegDefReg(0x40006580,"T",0x0);
	SegDefReg(0x40006580,"DS",0x1);
	add_segm_ex(0X40006600,0X40006608,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006600,"REGISTERS");
	SegClass (0X40006600,"REGISTERS");
	SegDefReg(0x40006600,"T",0x0);
	SegDefReg(0x40006600,"DS",0x1);
	add_segm_ex(0X4000660C,0X40006610,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4000660C,"REGISTERS");
	SegClass (0X4000660C,"REGISTERS");
	SegDefReg(0x4000660C,"T",0x0);
	SegDefReg(0x4000660C,"DS",0x1);
	add_segm_ex(0X40006614,0X40006618,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006614,"REGISTERS");
	SegClass (0X40006614,"REGISTERS");
	SegDefReg(0x40006614,"T",0x0);
	SegDefReg(0x40006614,"DS",0x1);
	add_segm_ex(0X4000661C,0X40006620,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4000661C,"REGISTERS");
	SegClass (0X4000661C,"REGISTERS");
	SegDefReg(0x4000661C,"T",0x0);
	SegDefReg(0x4000661C,"DS",0x1);
	add_segm_ex(0X40006640,0X40006720,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006640,"REGISTERS");
	SegClass (0X40006640,"REGISTERS");
	SegDefReg(0x40006640,"T",0x0);
	SegDefReg(0x40006640,"DS",0x1);
	add_segm_ex(0X40006800,0X40006820,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006800,"REGISTERS");
	SegClass (0X40006800,"REGISTERS");
	SegDefReg(0x40006800,"T",0x0);
	SegDefReg(0x40006800,"DS",0x1);
	add_segm_ex(0X40006980,0X400069D0,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40006980,"REGISTERS");
	SegClass (0X40006980,"REGISTERS");
	SegDefReg(0x40006980,"T",0x0);
	SegDefReg(0x40006980,"DS",0x1);
	add_segm_ex(0X40007000,0X40007008,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40007000,"REGISTERS");
	SegClass (0X40007000,"REGISTERS");
	SegDefReg(0x40007000,"T",0x0);
	SegDefReg(0x40007000,"DS",0x1);
	add_segm_ex(0X40007400,0X40007434,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40007400,"REGISTERS");
	SegClass (0X40007400,"REGISTERS");
	SegDefReg(0x40007400,"T",0x0);
	SegDefReg(0x40007400,"DS",0x1);
	add_segm_ex(0X40010000,0X40010050,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40010000,"REGISTERS");
	SegClass (0X40010000,"REGISTERS");
	SegDefReg(0x40010000,"T",0x0);
	SegDefReg(0x40010000,"DS",0x1);
	add_segm_ex(0X40010400,0X40010450,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40010400,"REGISTERS");
	SegClass (0X40010400,"REGISTERS");
	SegDefReg(0x40010400,"T",0x0);
	SegDefReg(0x40010400,"DS",0x1);
	add_segm_ex(0X40011000,0X4001101C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40011000,"REGISTERS");
	SegClass (0X40011000,"REGISTERS");
	SegDefReg(0x40011000,"T",0x0);
	SegDefReg(0x40011000,"DS",0x1);
	add_segm_ex(0X40011400,0X4001141C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40011400,"REGISTERS");
	SegClass (0X40011400,"REGISTERS");
	SegDefReg(0x40011400,"T",0x0);
	SegDefReg(0x40011400,"DS",0x1);
	add_segm_ex(0X40012000,0X40012050,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012000,"REGISTERS");
	SegClass (0X40012000,"REGISTERS");
	SegDefReg(0x40012000,"T",0x0);
	SegDefReg(0x40012000,"DS",0x1);
	add_segm_ex(0X40012100,0X40012150,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012100,"REGISTERS");
	SegClass (0X40012100,"REGISTERS");
	SegDefReg(0x40012100,"T",0x0);
	SegDefReg(0x40012100,"DS",0x1);
	add_segm_ex(0X40012200,0X40012250,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012200,"REGISTERS");
	SegClass (0X40012200,"REGISTERS");
	SegDefReg(0x40012200,"T",0x0);
	SegDefReg(0x40012200,"DS",0x1);
	add_segm_ex(0X40012300,0X4001230C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012300,"REGISTERS");
	SegClass (0X40012300,"REGISTERS");
	SegDefReg(0x40012300,"T",0x0);
	SegDefReg(0x40012300,"DS",0x1);
	add_segm_ex(0X40012C00,0X40012C40,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012C00,"REGISTERS");
	SegClass (0X40012C00,"REGISTERS");
	SegDefReg(0x40012C00,"T",0x0);
	SegDefReg(0x40012C00,"DS",0x1);
	add_segm_ex(0X40012C48,0X40012C4C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012C48,"REGISTERS");
	SegClass (0X40012C48,"REGISTERS");
	SegDefReg(0x40012C48,"T",0x0);
	SegDefReg(0x40012C48,"DS",0x1);
	add_segm_ex(0X40012C80,0X40012C84,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40012C80,"REGISTERS");
	SegClass (0X40012C80,"REGISTERS");
	SegDefReg(0x40012C80,"T",0x0);
	SegDefReg(0x40012C80,"DS",0x1);
	add_segm_ex(0X40013000,0X40013020,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40013000,"REGISTERS");
	SegClass (0X40013000,"REGISTERS");
	SegDefReg(0x40013000,"T",0x0);
	SegDefReg(0x40013000,"DS",0x1);
	add_segm_ex(0X40013800,0X40013818,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40013800,"REGISTERS");
	SegClass (0X40013800,"REGISTERS");
	SegDefReg(0x40013800,"T",0x0);
	SegDefReg(0x40013800,"DS",0x1);
	add_segm_ex(0X40013820,0X40013824,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40013820,"REGISTERS");
	SegClass (0X40013820,"REGISTERS");
	SegDefReg(0x40013820,"T",0x0);
	SegDefReg(0x40013820,"DS",0x1);
	add_segm_ex(0X40013C00,0X40013C18,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40013C00,"REGISTERS");
	SegClass (0X40013C00,"REGISTERS");
	SegDefReg(0x40013C00,"T",0x0);
	SegDefReg(0x40013C00,"DS",0x1);
	add_segm_ex(0X40014000,0X4001401C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014000,"REGISTERS");
	SegClass (0X40014000,"REGISTERS");
	SegDefReg(0x40014000,"T",0x0);
	SegDefReg(0x40014000,"DS",0x1);
	add_segm_ex(0X40014020,0X40014030,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014020,"REGISTERS");
	SegClass (0X40014020,"REGISTERS");
	SegDefReg(0x40014020,"T",0x0);
	SegDefReg(0x40014020,"DS",0x1);
	add_segm_ex(0X40014034,0X4001403C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014034,"REGISTERS");
	SegClass (0X40014034,"REGISTERS");
	SegDefReg(0x40014034,"T",0x0);
	SegDefReg(0x40014034,"DS",0x1);
	add_segm_ex(0X40014400,0X40014404,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014400,"REGISTERS");
	SegClass (0X40014400,"REGISTERS");
	SegDefReg(0x40014400,"T",0x0);
	SegDefReg(0x40014400,"DS",0x1);
	add_segm_ex(0X4001440C,0X4001441C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4001440C,"REGISTERS");
	SegClass (0X4001440C,"REGISTERS");
	SegDefReg(0x4001440C,"T",0x0);
	SegDefReg(0x4001440C,"DS",0x1);
	add_segm_ex(0X40014420,0X40014430,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014420,"REGISTERS");
	SegClass (0X40014420,"REGISTERS");
	SegDefReg(0x40014420,"T",0x0);
	SegDefReg(0x40014420,"DS",0x1);
	add_segm_ex(0X40014434,0X40014438,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014434,"REGISTERS");
	SegClass (0X40014434,"REGISTERS");
	SegDefReg(0x40014434,"T",0x0);
	SegDefReg(0x40014434,"DS",0x1);
	add_segm_ex(0X40014800,0X40014804,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014800,"REGISTERS");
	SegClass (0X40014800,"REGISTERS");
	SegDefReg(0x40014800,"T",0x0);
	SegDefReg(0x40014800,"DS",0x1);
	add_segm_ex(0X4001480C,0X4001481C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4001480C,"REGISTERS");
	SegClass (0X4001480C,"REGISTERS");
	SegDefReg(0x4001480C,"T",0x0);
	SegDefReg(0x4001480C,"DS",0x1);
	add_segm_ex(0X40014820,0X40014830,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014820,"REGISTERS");
	SegClass (0X40014820,"REGISTERS");
	SegDefReg(0x40014820,"T",0x0);
	SegDefReg(0x40014820,"DS",0x1);
	add_segm_ex(0X40014834,0X40014838,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014834,"REGISTERS");
	SegClass (0X40014834,"REGISTERS");
	SegDefReg(0x40014834,"T",0x0);
	SegDefReg(0x40014834,"DS",0x1);
	add_segm_ex(0X40014850,0X40014854,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40014850,"REGISTERS");
	SegClass (0X40014850,"REGISTERS");
	SegDefReg(0x40014850,"T",0x0);
	SegDefReg(0x40014850,"DS",0x1);
	add_segm_ex(0X40020000,0X40020028,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40020000,"REGISTERS");
	SegClass (0X40020000,"REGISTERS");
	SegDefReg(0x40020000,"T",0x0);
	SegDefReg(0x40020000,"DS",0x1);
	add_segm_ex(0X40020400,0X40020428,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40020400,"REGISTERS");
	SegClass (0X40020400,"REGISTERS");
	SegDefReg(0x40020400,"T",0x0);
	SegDefReg(0x40020400,"DS",0x1);
	add_segm_ex(0X40020800,0X40020828,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40020800,"REGISTERS");
	SegClass (0X40020800,"REGISTERS");
	SegDefReg(0x40020800,"T",0x0);
	SegDefReg(0x40020800,"DS",0x1);
	add_segm_ex(0X40020C00,0X40020C28,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40020C00,"REGISTERS");
	SegClass (0X40020C00,"REGISTERS");
	SegDefReg(0x40020C00,"T",0x0);
	SegDefReg(0x40020C00,"DS",0x1);
	add_segm_ex(0X40021000,0X40021028,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40021000,"REGISTERS");
	SegClass (0X40021000,"REGISTERS");
	SegDefReg(0x40021000,"T",0x0);
	SegDefReg(0x40021000,"DS",0x1);
	add_segm_ex(0X40021400,0X40021428,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40021400,"REGISTERS");
	SegClass (0X40021400,"REGISTERS");
	SegDefReg(0x40021400,"T",0x0);
	SegDefReg(0x40021400,"DS",0x1);
	add_segm_ex(0X40021800,0X40021828,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40021800,"REGISTERS");
	SegClass (0X40021800,"REGISTERS");
	SegDefReg(0x40021800,"T",0x0);
	SegDefReg(0x40021800,"DS",0x1);
	add_segm_ex(0X40021C00,0X40021C28,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40021C00,"REGISTERS");
	SegClass (0X40021C00,"REGISTERS");
	SegDefReg(0x40021C00,"T",0x0);
	SegDefReg(0x40021C00,"DS",0x1);
	add_segm_ex(0X40022000,0X40022028,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40022000,"REGISTERS");
	SegClass (0X40022000,"REGISTERS");
	SegDefReg(0x40022000,"T",0x0);
	SegDefReg(0x40022000,"DS",0x1);
	add_segm_ex(0X40023000,0X4002300C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023000,"REGISTERS");
	SegClass (0X40023000,"REGISTERS");
	SegDefReg(0x40023000,"T",0x0);
	SegDefReg(0x40023000,"DS",0x1);
	add_segm_ex(0X40023800,0X4002381C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023800,"REGISTERS");
	SegClass (0X40023800,"REGISTERS");
	SegDefReg(0x40023800,"T",0x0);
	SegDefReg(0x40023800,"DS",0x1);
	add_segm_ex(0X40023820,0X40023828,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023820,"REGISTERS");
	SegClass (0X40023820,"REGISTERS");
	SegDefReg(0x40023820,"T",0x0);
	SegDefReg(0x40023820,"DS",0x1);
	add_segm_ex(0X40023830,0X4002383C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023830,"REGISTERS");
	SegClass (0X40023830,"REGISTERS");
	SegDefReg(0x40023830,"T",0x0);
	SegDefReg(0x40023830,"DS",0x1);
	add_segm_ex(0X40023840,0X40023848,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023840,"REGISTERS");
	SegClass (0X40023840,"REGISTERS");
	SegDefReg(0x40023840,"T",0x0);
	SegDefReg(0x40023840,"DS",0x1);
	add_segm_ex(0X40023850,0X4002385C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023850,"REGISTERS");
	SegClass (0X40023850,"REGISTERS");
	SegDefReg(0x40023850,"T",0x0);
	SegDefReg(0x40023850,"DS",0x1);
	add_segm_ex(0X40023860,0X40023868,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023860,"REGISTERS");
	SegClass (0X40023860,"REGISTERS");
	SegDefReg(0x40023860,"T",0x0);
	SegDefReg(0x40023860,"DS",0x1);
	add_segm_ex(0X40023870,0X40023878,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023870,"REGISTERS");
	SegClass (0X40023870,"REGISTERS");
	SegDefReg(0x40023870,"T",0x0);
	SegDefReg(0x40023870,"DS",0x1);
	add_segm_ex(0X40023880,0X40023888,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023880,"REGISTERS");
	SegClass (0X40023880,"REGISTERS");
	SegDefReg(0x40023880,"T",0x0);
	SegDefReg(0x40023880,"DS",0x1);
	add_segm_ex(0X40023C00,0X40023C18,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40023C00,"REGISTERS");
	SegClass (0X40023C00,"REGISTERS");
	SegDefReg(0x40023C00,"T",0x0);
	SegDefReg(0x40023C00,"DS",0x1);
	add_segm_ex(0X40026000,0X400260D0,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40026000,"REGISTERS");
	SegClass (0X40026000,"REGISTERS");
	SegDefReg(0x40026000,"T",0x0);
	SegDefReg(0x40026000,"DS",0x1);
	add_segm_ex(0X40026400,0X400264D0,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40026400,"REGISTERS");
	SegClass (0X40026400,"REGISTERS");
	SegDefReg(0x40026400,"T",0x0);
	SegDefReg(0x40026400,"DS",0x1);
	add_segm_ex(0X40028000,0X40028020,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028000,"REGISTERS");
	SegClass (0X40028000,"REGISTERS");
	SegDefReg(0x40028000,"T",0x0);
	SegDefReg(0x40028000,"DS",0x1);
	add_segm_ex(0X40028028,0X40028030,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028028,"REGISTERS");
	SegClass (0X40028028,"REGISTERS");
	SegDefReg(0x40028028,"T",0x0);
	SegDefReg(0x40028028,"DS",0x1);
	add_segm_ex(0X40028034,0X40028060,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028034,"REGISTERS");
	SegClass (0X40028034,"REGISTERS");
	SegDefReg(0x40028034,"T",0x0);
	SegDefReg(0x40028034,"DS",0x1);
	add_segm_ex(0X40028100,0X40028114,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028100,"REGISTERS");
	SegClass (0X40028100,"REGISTERS");
	SegDefReg(0x40028100,"T",0x0);
	SegDefReg(0x40028100,"DS",0x1);
	add_segm_ex(0X4002814C,0X40028154,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X4002814C,"REGISTERS");
	SegClass (0X4002814C,"REGISTERS");
	SegDefReg(0x4002814C,"T",0x0);
	SegDefReg(0x4002814C,"DS",0x1);
	add_segm_ex(0X40028168,0X4002816C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028168,"REGISTERS");
	SegClass (0X40028168,"REGISTERS");
	SegDefReg(0x40028168,"T",0x0);
	SegDefReg(0x40028168,"DS",0x1);
	add_segm_ex(0X40028194,0X4002819C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028194,"REGISTERS");
	SegClass (0X40028194,"REGISTERS");
	SegDefReg(0x40028194,"T",0x0);
	SegDefReg(0x40028194,"DS",0x1);
	add_segm_ex(0X400281C4,0X400281C8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400281C4,"REGISTERS");
	SegClass (0X400281C4,"REGISTERS");
	SegDefReg(0x400281C4,"T",0x0);
	SegDefReg(0x400281C4,"DS",0x1);
	add_segm_ex(0X40028700,0X40028724,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028700,"REGISTERS");
	SegClass (0X40028700,"REGISTERS");
	SegDefReg(0x40028700,"T",0x0);
	SegDefReg(0x40028700,"DS",0x1);
	add_segm_ex(0X40028728,0X40028730,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40028728,"REGISTERS");
	SegClass (0X40028728,"REGISTERS");
	SegDefReg(0x40028728,"T",0x0);
	SegDefReg(0x40028728,"DS",0x1);
	add_segm_ex(0X40029000,0X40029028,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40029000,"REGISTERS");
	SegClass (0X40029000,"REGISTERS");
	SegDefReg(0x40029000,"T",0x0);
	SegDefReg(0x40029000,"DS",0x1);
	add_segm_ex(0X40029048,0X40029058,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40029048,"REGISTERS");
	SegClass (0X40029048,"REGISTERS");
	SegDefReg(0x40029048,"T",0x0);
	SegDefReg(0x40029048,"DS",0x1);
	add_segm_ex(0X40040000,0X40040034,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040000,"REGISTERS");
	SegClass (0X40040000,"REGISTERS");
	SegDefReg(0x40040000,"T",0x0);
	SegDefReg(0x40040000,"DS",0x1);
	add_segm_ex(0X40040038,0X40040040,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040038,"REGISTERS");
	SegClass (0X40040038,"REGISTERS");
	SegDefReg(0x40040038,"T",0x0);
	SegDefReg(0x40040038,"DS",0x1);
	add_segm_ex(0X40040100,0X40040120,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040100,"REGISTERS");
	SegClass (0X40040100,"REGISTERS");
	SegDefReg(0x40040100,"T",0x0);
	SegDefReg(0x40040100,"DS",0x1);
	add_segm_ex(0X40040400,0X4004040C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040400,"REGISTERS");
	SegClass (0X40040400,"REGISTERS");
	SegDefReg(0x40040400,"T",0x0);
	SegDefReg(0x40040400,"DS",0x1);
	add_segm_ex(0X40040410,0X4004041C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040410,"REGISTERS");
	SegClass (0X40040410,"REGISTERS");
	SegDefReg(0x40040410,"T",0x0);
	SegDefReg(0x40040410,"DS",0x1);
	add_segm_ex(0X40040440,0X40040444,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040440,"REGISTERS");
	SegClass (0X40040440,"REGISTERS");
	SegDefReg(0x40040440,"T",0x0);
	SegDefReg(0x40040440,"DS",0x1);
	add_segm_ex(0X40040500,0X40040518,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040500,"REGISTERS");
	SegClass (0X40040500,"REGISTERS");
	SegDefReg(0x40040500,"T",0x0);
	SegDefReg(0x40040500,"DS",0x1);
	add_segm_ex(0X40040520,0X40040538,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040520,"REGISTERS");
	SegClass (0X40040520,"REGISTERS");
	SegDefReg(0x40040520,"T",0x0);
	SegDefReg(0x40040520,"DS",0x1);
	add_segm_ex(0X40040540,0X40040558,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040540,"REGISTERS");
	SegClass (0X40040540,"REGISTERS");
	SegDefReg(0x40040540,"T",0x0);
	SegDefReg(0x40040540,"DS",0x1);
	add_segm_ex(0X40040560,0X40040578,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040560,"REGISTERS");
	SegClass (0X40040560,"REGISTERS");
	SegDefReg(0x40040560,"T",0x0);
	SegDefReg(0x40040560,"DS",0x1);
	add_segm_ex(0X40040580,0X40040598,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040580,"REGISTERS");
	SegClass (0X40040580,"REGISTERS");
	SegDefReg(0x40040580,"T",0x0);
	SegDefReg(0x40040580,"DS",0x1);
	add_segm_ex(0X400405A0,0X400405B8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400405A0,"REGISTERS");
	SegClass (0X400405A0,"REGISTERS");
	SegDefReg(0x400405A0,"T",0x0);
	SegDefReg(0x400405A0,"DS",0x1);
	add_segm_ex(0X400405C0,0X400405D8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400405C0,"REGISTERS");
	SegClass (0X400405C0,"REGISTERS");
	SegDefReg(0x400405C0,"T",0x0);
	SegDefReg(0x400405C0,"DS",0x1);
	add_segm_ex(0X400405E0,0X400405F8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400405E0,"REGISTERS");
	SegClass (0X400405E0,"REGISTERS");
	SegDefReg(0x400405E0,"T",0x0);
	SegDefReg(0x400405E0,"DS",0x1);
	add_segm_ex(0X40040600,0X40040618,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040600,"REGISTERS");
	SegClass (0X40040600,"REGISTERS");
	SegDefReg(0x40040600,"T",0x0);
	SegDefReg(0x40040600,"DS",0x1);
	add_segm_ex(0X40040620,0X40040638,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040620,"REGISTERS");
	SegClass (0X40040620,"REGISTERS");
	SegDefReg(0x40040620,"T",0x0);
	SegDefReg(0x40040620,"DS",0x1);
	add_segm_ex(0X40040640,0X40040658,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040640,"REGISTERS");
	SegClass (0X40040640,"REGISTERS");
	SegDefReg(0x40040640,"T",0x0);
	SegDefReg(0x40040640,"DS",0x1);
	add_segm_ex(0X40040660,0X40040678,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040660,"REGISTERS");
	SegClass (0X40040660,"REGISTERS");
	SegDefReg(0x40040660,"T",0x0);
	SegDefReg(0x40040660,"DS",0x1);
	add_segm_ex(0X40040800,0X4004080C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040800,"REGISTERS");
	SegClass (0X40040800,"REGISTERS");
	SegDefReg(0x40040800,"T",0x0);
	SegDefReg(0x40040800,"DS",0x1);
	add_segm_ex(0X40040810,0X40040814,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040810,"REGISTERS");
	SegClass (0X40040810,"REGISTERS");
	SegDefReg(0x40040810,"T",0x0);
	SegDefReg(0x40040810,"DS",0x1);
	add_segm_ex(0X40040818,0X40040820,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040818,"REGISTERS");
	SegClass (0X40040818,"REGISTERS");
	SegDefReg(0x40040818,"T",0x0);
	SegDefReg(0x40040818,"DS",0x1);
	add_segm_ex(0X40040828,0X40040844,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040828,"REGISTERS");
	SegClass (0X40040828,"REGISTERS");
	SegDefReg(0x40040828,"T",0x0);
	SegDefReg(0x40040828,"DS",0x1);
	add_segm_ex(0X40040880,0X40040884,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040880,"REGISTERS");
	SegClass (0X40040880,"REGISTERS");
	SegDefReg(0x40040880,"T",0x0);
	SegDefReg(0x40040880,"DS",0x1);
	add_segm_ex(0X40040900,0X40040904,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040900,"REGISTERS");
	SegClass (0X40040900,"REGISTERS");
	SegDefReg(0x40040900,"T",0x0);
	SegDefReg(0x40040900,"DS",0x1);
	add_segm_ex(0X40040908,0X4004090C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040908,"REGISTERS");
	SegClass (0X40040908,"REGISTERS");
	SegDefReg(0x40040908,"T",0x0);
	SegDefReg(0x40040908,"DS",0x1);
	add_segm_ex(0X40040910,0X40040914,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040910,"REGISTERS");
	SegClass (0X40040910,"REGISTERS");
	SegDefReg(0x40040910,"T",0x0);
	SegDefReg(0x40040910,"DS",0x1);
	add_segm_ex(0X40040918,0X4004091C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040918,"REGISTERS");
	SegClass (0X40040918,"REGISTERS");
	SegDefReg(0x40040918,"T",0x0);
	SegDefReg(0x40040918,"DS",0x1);
	add_segm_ex(0X40040920,0X40040924,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040920,"REGISTERS");
	SegClass (0X40040920,"REGISTERS");
	SegDefReg(0x40040920,"T",0x0);
	SegDefReg(0x40040920,"DS",0x1);
	add_segm_ex(0X40040928,0X4004092C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040928,"REGISTERS");
	SegClass (0X40040928,"REGISTERS");
	SegDefReg(0x40040928,"T",0x0);
	SegDefReg(0x40040928,"DS",0x1);
	add_segm_ex(0X40040930,0X4004093C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040930,"REGISTERS");
	SegClass (0X40040930,"REGISTERS");
	SegDefReg(0x40040930,"T",0x0);
	SegDefReg(0x40040930,"DS",0x1);
	add_segm_ex(0X40040940,0X40040944,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040940,"REGISTERS");
	SegClass (0X40040940,"REGISTERS");
	SegDefReg(0x40040940,"T",0x0);
	SegDefReg(0x40040940,"DS",0x1);
	add_segm_ex(0X40040948,0X4004094C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040948,"REGISTERS");
	SegClass (0X40040948,"REGISTERS");
	SegDefReg(0x40040948,"T",0x0);
	SegDefReg(0x40040948,"DS",0x1);
	add_segm_ex(0X40040950,0X4004095C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040950,"REGISTERS");
	SegClass (0X40040950,"REGISTERS");
	SegDefReg(0x40040950,"T",0x0);
	SegDefReg(0x40040950,"DS",0x1);
	add_segm_ex(0X40040960,0X40040964,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040960,"REGISTERS");
	SegClass (0X40040960,"REGISTERS");
	SegDefReg(0x40040960,"T",0x0);
	SegDefReg(0x40040960,"DS",0x1);
	add_segm_ex(0X40040968,0X4004096C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040968,"REGISTERS");
	SegClass (0X40040968,"REGISTERS");
	SegDefReg(0x40040968,"T",0x0);
	SegDefReg(0x40040968,"DS",0x1);
	add_segm_ex(0X40040970,0X4004097C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040970,"REGISTERS");
	SegClass (0X40040970,"REGISTERS");
	SegDefReg(0x40040970,"T",0x0);
	SegDefReg(0x40040970,"DS",0x1);
	add_segm_ex(0X40040980,0X40040984,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040980,"REGISTERS");
	SegClass (0X40040980,"REGISTERS");
	SegDefReg(0x40040980,"T",0x0);
	SegDefReg(0x40040980,"DS",0x1);
	add_segm_ex(0X40040988,0X4004098C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040988,"REGISTERS");
	SegClass (0X40040988,"REGISTERS");
	SegDefReg(0x40040988,"T",0x0);
	SegDefReg(0x40040988,"DS",0x1);
	add_segm_ex(0X40040990,0X4004099C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040990,"REGISTERS");
	SegClass (0X40040990,"REGISTERS");
	SegDefReg(0x40040990,"T",0x0);
	SegDefReg(0x40040990,"DS",0x1);
	add_segm_ex(0X400409A0,0X400409A4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400409A0,"REGISTERS");
	SegClass (0X400409A0,"REGISTERS");
	SegDefReg(0x400409A0,"T",0x0);
	SegDefReg(0x400409A0,"DS",0x1);
	add_segm_ex(0X400409A8,0X400409AC,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400409A8,"REGISTERS");
	SegClass (0X400409A8,"REGISTERS");
	SegDefReg(0x400409A8,"T",0x0);
	SegDefReg(0x400409A8,"DS",0x1);
	add_segm_ex(0X400409B0,0X400409B8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X400409B0,"REGISTERS");
	SegClass (0X400409B0,"REGISTERS");
	SegDefReg(0x400409B0,"T",0x0);
	SegDefReg(0x400409B0,"DS",0x1);
	add_segm_ex(0X40040B00,0X40040B04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B00,"REGISTERS");
	SegClass (0X40040B00,"REGISTERS");
	SegDefReg(0x40040B00,"T",0x0);
	SegDefReg(0x40040B00,"DS",0x1);
	add_segm_ex(0X40040B08,0X40040B0C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B08,"REGISTERS");
	SegClass (0X40040B08,"REGISTERS");
	SegDefReg(0x40040B08,"T",0x0);
	SegDefReg(0x40040B08,"DS",0x1);
	add_segm_ex(0X40040B10,0X40040B14,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B10,"REGISTERS");
	SegClass (0X40040B10,"REGISTERS");
	SegDefReg(0x40040B10,"T",0x0);
	SegDefReg(0x40040B10,"DS",0x1);
	add_segm_ex(0X40040B20,0X40040B24,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B20,"REGISTERS");
	SegClass (0X40040B20,"REGISTERS");
	SegDefReg(0x40040B20,"T",0x0);
	SegDefReg(0x40040B20,"DS",0x1);
	add_segm_ex(0X40040B28,0X40040B2C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B28,"REGISTERS");
	SegClass (0X40040B28,"REGISTERS");
	SegDefReg(0x40040B28,"T",0x0);
	SegDefReg(0x40040B28,"DS",0x1);
	add_segm_ex(0X40040B30,0X40040B38,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B30,"REGISTERS");
	SegClass (0X40040B30,"REGISTERS");
	SegDefReg(0x40040B30,"T",0x0);
	SegDefReg(0x40040B30,"DS",0x1);
	add_segm_ex(0X40040B40,0X40040B44,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B40,"REGISTERS");
	SegClass (0X40040B40,"REGISTERS");
	SegDefReg(0x40040B40,"T",0x0);
	SegDefReg(0x40040B40,"DS",0x1);
	add_segm_ex(0X40040B48,0X40040B4C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B48,"REGISTERS");
	SegClass (0X40040B48,"REGISTERS");
	SegDefReg(0x40040B48,"T",0x0);
	SegDefReg(0x40040B48,"DS",0x1);
	add_segm_ex(0X40040B50,0X40040B58,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B50,"REGISTERS");
	SegClass (0X40040B50,"REGISTERS");
	SegDefReg(0x40040B50,"T",0x0);
	SegDefReg(0x40040B50,"DS",0x1);
	add_segm_ex(0X40040B60,0X40040B64,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B60,"REGISTERS");
	SegClass (0X40040B60,"REGISTERS");
	SegDefReg(0x40040B60,"T",0x0);
	SegDefReg(0x40040B60,"DS",0x1);
	add_segm_ex(0X40040B68,0X40040B6C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B68,"REGISTERS");
	SegClass (0X40040B68,"REGISTERS");
	SegDefReg(0x40040B68,"T",0x0);
	SegDefReg(0x40040B68,"DS",0x1);
	add_segm_ex(0X40040B70,0X40040B78,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B70,"REGISTERS");
	SegClass (0X40040B70,"REGISTERS");
	SegDefReg(0x40040B70,"T",0x0);
	SegDefReg(0x40040B70,"DS",0x1);
	add_segm_ex(0X40040B80,0X40040B84,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B80,"REGISTERS");
	SegClass (0X40040B80,"REGISTERS");
	SegDefReg(0x40040B80,"T",0x0);
	SegDefReg(0x40040B80,"DS",0x1);
	add_segm_ex(0X40040B88,0X40040B8C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B88,"REGISTERS");
	SegClass (0X40040B88,"REGISTERS");
	SegDefReg(0x40040B88,"T",0x0);
	SegDefReg(0x40040B88,"DS",0x1);
	add_segm_ex(0X40040B90,0X40040B98,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040B90,"REGISTERS");
	SegClass (0X40040B90,"REGISTERS");
	SegDefReg(0x40040B90,"T",0x0);
	SegDefReg(0x40040B90,"DS",0x1);
	add_segm_ex(0X40040BA0,0X40040BA4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040BA0,"REGISTERS");
	SegClass (0X40040BA0,"REGISTERS");
	SegDefReg(0x40040BA0,"T",0x0);
	SegDefReg(0x40040BA0,"DS",0x1);
	add_segm_ex(0X40040BA8,0X40040BAC,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040BA8,"REGISTERS");
	SegClass (0X40040BA8,"REGISTERS");
	SegDefReg(0x40040BA8,"T",0x0);
	SegDefReg(0x40040BA8,"DS",0x1);
	add_segm_ex(0X40040BB0,0X40040BB8,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040BB0,"REGISTERS");
	SegClass (0X40040BB0,"REGISTERS");
	SegDefReg(0x40040BB0,"T",0x0);
	SegDefReg(0x40040BB0,"DS",0x1);
	add_segm_ex(0X40040E00,0X40040E04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X40040E00,"REGISTERS");
	SegClass (0X40040E00,"REGISTERS");
	SegDefReg(0x40040E00,"T",0x0);
	SegDefReg(0x40040E00,"DS",0x1);
	add_segm_ex(0X50000000,0X50000030,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000000,"REGISTERS");
	SegClass (0X50000000,"REGISTERS");
	SegDefReg(0x50000000,"T",0x0);
	SegDefReg(0x50000000,"DS",0x1);
	add_segm_ex(0X50000038,0X50000040,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000038,"REGISTERS");
	SegClass (0X50000038,"REGISTERS");
	SegDefReg(0x50000038,"T",0x0);
	SegDefReg(0x50000038,"DS",0x1);
	add_segm_ex(0X50000100,0X50000110,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000100,"REGISTERS");
	SegClass (0X50000100,"REGISTERS");
	SegDefReg(0x50000100,"T",0x0);
	SegDefReg(0x50000100,"DS",0x1);
	add_segm_ex(0X50000400,0X50000404,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000400,"REGISTERS");
	SegClass (0X50000400,"REGISTERS");
	SegDefReg(0x50000400,"T",0x0);
	SegDefReg(0x50000400,"DS",0x1);
	add_segm_ex(0X50000408,0X5000040C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000408,"REGISTERS");
	SegClass (0X50000408,"REGISTERS");
	SegDefReg(0x50000408,"T",0x0);
	SegDefReg(0x50000408,"DS",0x1);
	add_segm_ex(0X50000410,0X5000041C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000410,"REGISTERS");
	SegClass (0X50000410,"REGISTERS");
	SegDefReg(0x50000410,"T",0x0);
	SegDefReg(0x50000410,"DS",0x1);
	add_segm_ex(0X50000440,0X50000444,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000440,"REGISTERS");
	SegClass (0X50000440,"REGISTERS");
	SegDefReg(0x50000440,"T",0x0);
	SegDefReg(0x50000440,"DS",0x1);
	add_segm_ex(0X50000500,0X50000504,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000500,"REGISTERS");
	SegClass (0X50000500,"REGISTERS");
	SegDefReg(0x50000500,"T",0x0);
	SegDefReg(0x50000500,"DS",0x1);
	add_segm_ex(0X50000508,0X50000514,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000508,"REGISTERS");
	SegClass (0X50000508,"REGISTERS");
	SegDefReg(0x50000508,"T",0x0);
	SegDefReg(0x50000508,"DS",0x1);
	add_segm_ex(0X50000520,0X50000524,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000520,"REGISTERS");
	SegClass (0X50000520,"REGISTERS");
	SegDefReg(0x50000520,"T",0x0);
	SegDefReg(0x50000520,"DS",0x1);
	add_segm_ex(0X50000528,0X50000534,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000528,"REGISTERS");
	SegClass (0X50000528,"REGISTERS");
	SegDefReg(0x50000528,"T",0x0);
	SegDefReg(0x50000528,"DS",0x1);
	add_segm_ex(0X50000540,0X50000544,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000540,"REGISTERS");
	SegClass (0X50000540,"REGISTERS");
	SegDefReg(0x50000540,"T",0x0);
	SegDefReg(0x50000540,"DS",0x1);
	add_segm_ex(0X50000548,0X50000554,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000548,"REGISTERS");
	SegClass (0X50000548,"REGISTERS");
	SegDefReg(0x50000548,"T",0x0);
	SegDefReg(0x50000548,"DS",0x1);
	add_segm_ex(0X50000560,0X50000564,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000560,"REGISTERS");
	SegClass (0X50000560,"REGISTERS");
	SegDefReg(0x50000560,"T",0x0);
	SegDefReg(0x50000560,"DS",0x1);
	add_segm_ex(0X50000568,0X50000574,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000568,"REGISTERS");
	SegClass (0X50000568,"REGISTERS");
	SegDefReg(0x50000568,"T",0x0);
	SegDefReg(0x50000568,"DS",0x1);
	add_segm_ex(0X50000580,0X50000584,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000580,"REGISTERS");
	SegClass (0X50000580,"REGISTERS");
	SegDefReg(0x50000580,"T",0x0);
	SegDefReg(0x50000580,"DS",0x1);
	add_segm_ex(0X50000588,0X50000594,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000588,"REGISTERS");
	SegClass (0X50000588,"REGISTERS");
	SegDefReg(0x50000588,"T",0x0);
	SegDefReg(0x50000588,"DS",0x1);
	add_segm_ex(0X500005A0,0X500005A4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005A0,"REGISTERS");
	SegClass (0X500005A0,"REGISTERS");
	SegDefReg(0x500005A0,"T",0x0);
	SegDefReg(0x500005A0,"DS",0x1);
	add_segm_ex(0X500005A8,0X500005B4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005A8,"REGISTERS");
	SegClass (0X500005A8,"REGISTERS");
	SegDefReg(0x500005A8,"T",0x0);
	SegDefReg(0x500005A8,"DS",0x1);
	add_segm_ex(0X500005C0,0X500005C4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005C0,"REGISTERS");
	SegClass (0X500005C0,"REGISTERS");
	SegDefReg(0x500005C0,"T",0x0);
	SegDefReg(0x500005C0,"DS",0x1);
	add_segm_ex(0X500005C8,0X500005D4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005C8,"REGISTERS");
	SegClass (0X500005C8,"REGISTERS");
	SegDefReg(0x500005C8,"T",0x0);
	SegDefReg(0x500005C8,"DS",0x1);
	add_segm_ex(0X500005E0,0X500005E4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005E0,"REGISTERS");
	SegClass (0X500005E0,"REGISTERS");
	SegDefReg(0x500005E0,"T",0x0);
	SegDefReg(0x500005E0,"DS",0x1);
	add_segm_ex(0X500005E8,0X500005F4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500005E8,"REGISTERS");
	SegClass (0X500005E8,"REGISTERS");
	SegDefReg(0x500005E8,"T",0x0);
	SegDefReg(0x500005E8,"DS",0x1);
	add_segm_ex(0X50000800,0X5000080C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000800,"REGISTERS");
	SegClass (0X50000800,"REGISTERS");
	SegDefReg(0x50000800,"T",0x0);
	SegDefReg(0x50000800,"DS",0x1);
	add_segm_ex(0X50000810,0X50000820,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000810,"REGISTERS");
	SegClass (0X50000810,"REGISTERS");
	SegDefReg(0x50000810,"T",0x0);
	SegDefReg(0x50000810,"DS",0x1);
	add_segm_ex(0X50000828,0X50000830,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000828,"REGISTERS");
	SegClass (0X50000828,"REGISTERS");
	SegDefReg(0x50000828,"T",0x0);
	SegDefReg(0x50000828,"DS",0x1);
	add_segm_ex(0X50000834,0X50000838,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000834,"REGISTERS");
	SegClass (0X50000834,"REGISTERS");
	SegDefReg(0x50000834,"T",0x0);
	SegDefReg(0x50000834,"DS",0x1);
	add_segm_ex(0X50000900,0X50000904,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000900,"REGISTERS");
	SegClass (0X50000900,"REGISTERS");
	SegDefReg(0x50000900,"T",0x0);
	SegDefReg(0x50000900,"DS",0x1);
	add_segm_ex(0X50000908,0X5000090C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000908,"REGISTERS");
	SegClass (0X50000908,"REGISTERS");
	SegDefReg(0x50000908,"T",0x0);
	SegDefReg(0x50000908,"DS",0x1);
	add_segm_ex(0X50000910,0X50000914,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000910,"REGISTERS");
	SegClass (0X50000910,"REGISTERS");
	SegDefReg(0x50000910,"T",0x0);
	SegDefReg(0x50000910,"DS",0x1);
	add_segm_ex(0X50000918,0X5000091C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000918,"REGISTERS");
	SegClass (0X50000918,"REGISTERS");
	SegDefReg(0x50000918,"T",0x0);
	SegDefReg(0x50000918,"DS",0x1);
	add_segm_ex(0X50000920,0X50000924,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000920,"REGISTERS");
	SegClass (0X50000920,"REGISTERS");
	SegDefReg(0x50000920,"T",0x0);
	SegDefReg(0x50000920,"DS",0x1);
	add_segm_ex(0X50000928,0X5000092C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000928,"REGISTERS");
	SegClass (0X50000928,"REGISTERS");
	SegDefReg(0x50000928,"T",0x0);
	SegDefReg(0x50000928,"DS",0x1);
	add_segm_ex(0X50000930,0X50000934,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000930,"REGISTERS");
	SegClass (0X50000930,"REGISTERS");
	SegDefReg(0x50000930,"T",0x0);
	SegDefReg(0x50000930,"DS",0x1);
	add_segm_ex(0X50000938,0X5000093C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000938,"REGISTERS");
	SegClass (0X50000938,"REGISTERS");
	SegDefReg(0x50000938,"T",0x0);
	SegDefReg(0x50000938,"DS",0x1);
	add_segm_ex(0X50000940,0X50000944,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000940,"REGISTERS");
	SegClass (0X50000940,"REGISTERS");
	SegDefReg(0x50000940,"T",0x0);
	SegDefReg(0x50000940,"DS",0x1);
	add_segm_ex(0X50000948,0X5000094C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000948,"REGISTERS");
	SegClass (0X50000948,"REGISTERS");
	SegDefReg(0x50000948,"T",0x0);
	SegDefReg(0x50000948,"DS",0x1);
	add_segm_ex(0X50000950,0X50000954,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000950,"REGISTERS");
	SegClass (0X50000950,"REGISTERS");
	SegDefReg(0x50000950,"T",0x0);
	SegDefReg(0x50000950,"DS",0x1);
	add_segm_ex(0X50000958,0X5000095C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000958,"REGISTERS");
	SegClass (0X50000958,"REGISTERS");
	SegDefReg(0x50000958,"T",0x0);
	SegDefReg(0x50000958,"DS",0x1);
	add_segm_ex(0X50000960,0X50000964,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000960,"REGISTERS");
	SegClass (0X50000960,"REGISTERS");
	SegDefReg(0x50000960,"T",0x0);
	SegDefReg(0x50000960,"DS",0x1);
	add_segm_ex(0X50000968,0X5000096C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000968,"REGISTERS");
	SegClass (0X50000968,"REGISTERS");
	SegDefReg(0x50000968,"T",0x0);
	SegDefReg(0x50000968,"DS",0x1);
	add_segm_ex(0X50000970,0X50000974,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000970,"REGISTERS");
	SegClass (0X50000970,"REGISTERS");
	SegDefReg(0x50000970,"T",0x0);
	SegDefReg(0x50000970,"DS",0x1);
	add_segm_ex(0X50000978,0X5000097C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000978,"REGISTERS");
	SegClass (0X50000978,"REGISTERS");
	SegDefReg(0x50000978,"T",0x0);
	SegDefReg(0x50000978,"DS",0x1);
	add_segm_ex(0X50000B00,0X50000B04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B00,"REGISTERS");
	SegClass (0X50000B00,"REGISTERS");
	SegDefReg(0x50000B00,"T",0x0);
	SegDefReg(0x50000B00,"DS",0x1);
	add_segm_ex(0X50000B08,0X50000B0C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B08,"REGISTERS");
	SegClass (0X50000B08,"REGISTERS");
	SegDefReg(0x50000B08,"T",0x0);
	SegDefReg(0x50000B08,"DS",0x1);
	add_segm_ex(0X50000B10,0X50000B14,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B10,"REGISTERS");
	SegClass (0X50000B10,"REGISTERS");
	SegDefReg(0x50000B10,"T",0x0);
	SegDefReg(0x50000B10,"DS",0x1);
	add_segm_ex(0X50000B20,0X50000B24,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B20,"REGISTERS");
	SegClass (0X50000B20,"REGISTERS");
	SegDefReg(0x50000B20,"T",0x0);
	SegDefReg(0x50000B20,"DS",0x1);
	add_segm_ex(0X50000B28,0X50000B2C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B28,"REGISTERS");
	SegClass (0X50000B28,"REGISTERS");
	SegDefReg(0x50000B28,"T",0x0);
	SegDefReg(0x50000B28,"DS",0x1);
	add_segm_ex(0X50000B30,0X50000B34,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B30,"REGISTERS");
	SegClass (0X50000B30,"REGISTERS");
	SegDefReg(0x50000B30,"T",0x0);
	SegDefReg(0x50000B30,"DS",0x1);
	add_segm_ex(0X50000B40,0X50000B44,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B40,"REGISTERS");
	SegClass (0X50000B40,"REGISTERS");
	SegDefReg(0x50000B40,"T",0x0);
	SegDefReg(0x50000B40,"DS",0x1);
	add_segm_ex(0X50000B48,0X50000B4C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B48,"REGISTERS");
	SegClass (0X50000B48,"REGISTERS");
	SegDefReg(0x50000B48,"T",0x0);
	SegDefReg(0x50000B48,"DS",0x1);
	add_segm_ex(0X50000B50,0X50000B54,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B50,"REGISTERS");
	SegClass (0X50000B50,"REGISTERS");
	SegDefReg(0x50000B50,"T",0x0);
	SegDefReg(0x50000B50,"DS",0x1);
	add_segm_ex(0X50000B60,0X50000B64,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B60,"REGISTERS");
	SegClass (0X50000B60,"REGISTERS");
	SegDefReg(0x50000B60,"T",0x0);
	SegDefReg(0x50000B60,"DS",0x1);
	add_segm_ex(0X50000B68,0X50000B6C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B68,"REGISTERS");
	SegClass (0X50000B68,"REGISTERS");
	SegDefReg(0x50000B68,"T",0x0);
	SegDefReg(0x50000B68,"DS",0x1);
	add_segm_ex(0X50000B70,0X50000B74,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000B70,"REGISTERS");
	SegClass (0X50000B70,"REGISTERS");
	SegDefReg(0x50000B70,"T",0x0);
	SegDefReg(0x50000B70,"DS",0x1);
	add_segm_ex(0X50000E00,0X50000E04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50000E00,"REGISTERS");
	SegClass (0X50000E00,"REGISTERS");
	SegDefReg(0x50000E00,"T",0x0);
	SegDefReg(0x50000E00,"DS",0x1);
	add_segm_ex(0X50050000,0X5005002C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50050000,"REGISTERS");
	SegClass (0X50050000,"REGISTERS");
	SegDefReg(0x50050000,"T",0x0);
	SegDefReg(0x50050000,"DS",0x1);
	add_segm_ex(0X50060000,0X50060050,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50060000,"REGISTERS");
	SegClass (0X50060000,"REGISTERS");
	SegDefReg(0x50060000,"T",0x0);
	SegDefReg(0x50060000,"DS",0x1);
	add_segm_ex(0X50060400,0X50060428,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50060400,"REGISTERS");
	SegClass (0X50060400,"REGISTERS");
	SegDefReg(0x50060400,"T",0x0);
	SegDefReg(0x50060400,"DS",0x1);
	add_segm_ex(0X500604F8,0X500604FC,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500604F8,"REGISTERS");
	SegClass (0X500604F8,"REGISTERS");
	SegDefReg(0x500604F8,"T",0x0);
	SegDefReg(0x500604F8,"DS",0x1);
	add_segm_ex(0X500605C0,0X500605C4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X500605C0,"REGISTERS");
	SegClass (0X500605C0,"REGISTERS");
	SegDefReg(0x500605C0,"T",0x0);
	SegDefReg(0x500605C0,"DS",0x1);
	add_segm_ex(0X50060800,0X5006080C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0X50060800,"REGISTERS");
	SegClass (0X50060800,"REGISTERS");
	SegDefReg(0x50060800,"T",0x0);
	SegDefReg(0x50060800,"DS",0x1);
	add_segm_ex(0XA0000000,0XA0000020,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000000,"REGISTERS");
	SegClass (0XA0000000,"REGISTERS");
	SegDefReg(0xA0000000,"T",0x0);
	SegDefReg(0xA0000000,"DS",0x1);
	add_segm_ex(0XA0000060,0XA0000070,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000060,"REGISTERS");
	SegClass (0XA0000060,"REGISTERS");
	SegDefReg(0xA0000060,"T",0x0);
	SegDefReg(0xA0000060,"DS",0x1);
	add_segm_ex(0XA0000074,0XA0000078,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000074,"REGISTERS");
	SegClass (0XA0000074,"REGISTERS");
	SegDefReg(0xA0000074,"T",0x0);
	SegDefReg(0xA0000074,"DS",0x1);
	add_segm_ex(0XA0000080,0XA0000090,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000080,"REGISTERS");
	SegClass (0XA0000080,"REGISTERS");
	SegDefReg(0xA0000080,"T",0x0);
	SegDefReg(0xA0000080,"DS",0x1);
	add_segm_ex(0XA0000094,0XA0000098,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000094,"REGISTERS");
	SegClass (0XA0000094,"REGISTERS");
	SegDefReg(0xA0000094,"T",0x0);
	SegDefReg(0xA0000094,"DS",0x1);
	add_segm_ex(0XA00000A0,0XA00000B4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA00000A0,"REGISTERS");
	SegClass (0XA00000A0,"REGISTERS");
	SegDefReg(0xA00000A0,"T",0x0);
	SegDefReg(0xA00000A0,"DS",0x1);
	add_segm_ex(0XA0000104,0XA0000114,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XA0000104,"REGISTERS");
	SegClass (0XA0000104,"REGISTERS");
	SegDefReg(0xA0000104,"T",0x0);
	SegDefReg(0xA0000104,"DS",0x1);
	add_segm_ex(0XE000E008,0XE000E00C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E008,"REGISTERS");
	SegClass (0XE000E008,"REGISTERS");
	SegDefReg(0xE000E008,"T",0x0);
	SegDefReg(0xE000E008,"DS",0x1);
	add_segm_ex(0XE000E010,0XE000E020,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E010,"REGISTERS");
	SegClass (0XE000E010,"REGISTERS");
	SegDefReg(0xE000E010,"T",0x0);
	SegDefReg(0xE000E010,"DS",0x1);
	add_segm_ex(0XE000E100,0XE000E10C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E100,"REGISTERS");
	SegClass (0XE000E100,"REGISTERS");
	SegDefReg(0xE000E100,"T",0x0);
	SegDefReg(0xE000E100,"DS",0x1);
	add_segm_ex(0XE000E180,0XE000E18C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E180,"REGISTERS");
	SegClass (0XE000E180,"REGISTERS");
	SegDefReg(0xE000E180,"T",0x0);
	SegDefReg(0xE000E180,"DS",0x1);
	add_segm_ex(0XE000E200,0XE000E20C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E200,"REGISTERS");
	SegClass (0XE000E200,"REGISTERS");
	SegDefReg(0xE000E200,"T",0x0);
	SegDefReg(0xE000E200,"DS",0x1);
	add_segm_ex(0XE000E280,0XE000E28C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E280,"REGISTERS");
	SegClass (0XE000E280,"REGISTERS");
	SegDefReg(0xE000E280,"T",0x0);
	SegDefReg(0xE000E280,"DS",0x1);
	add_segm_ex(0XE000E300,0XE000E30C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E300,"REGISTERS");
	SegClass (0XE000E300,"REGISTERS");
	SegDefReg(0xE000E300,"T",0x0);
	SegDefReg(0xE000E300,"DS",0x1);
	add_segm_ex(0XE000E400,0XE000E454,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000E400,"REGISTERS");
	SegClass (0XE000E400,"REGISTERS");
	SegDefReg(0xE000E400,"T",0x0);
	SegDefReg(0xE000E400,"DS",0x1);
	add_segm_ex(0XE000ED00,0XE000ED30,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000ED00,"REGISTERS");
	SegClass (0XE000ED00,"REGISTERS");
	SegDefReg(0xE000ED00,"T",0x0);
	SegDefReg(0xE000ED00,"DS",0x1);
	add_segm_ex(0XE000ED34,0XE000ED40,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000ED34,"REGISTERS");
	SegClass (0XE000ED34,"REGISTERS");
	SegDefReg(0xE000ED34,"T",0x0);
	SegDefReg(0xE000ED34,"DS",0x1);
	add_segm_ex(0XE000ED88,0XE000ED8C,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000ED88,"REGISTERS");
	SegClass (0XE000ED88,"REGISTERS");
	SegDefReg(0xE000ED88,"T",0x0);
	SegDefReg(0xE000ED88,"DS",0x1);
	add_segm_ex(0XE000ED90,0XE000EDA4,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000ED90,"REGISTERS");
	SegClass (0XE000ED90,"REGISTERS");
	SegDefReg(0xE000ED90,"T",0x0);
	SegDefReg(0xE000ED90,"DS",0x1);
	add_segm_ex(0XE000EF00,0XE000EF04,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000EF00,"REGISTERS");
	SegClass (0XE000EF00,"REGISTERS");
	SegDefReg(0xE000EF00,"T",0x0);
	SegDefReg(0xE000EF00,"DS",0x1);
	add_segm_ex(0XE000EF34,0XE000EF40,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE000EF34,"REGISTERS");
	SegClass (0XE000EF34,"REGISTERS");
	SegDefReg(0xE000EF34,"T",0x0);
	SegDefReg(0xE000EF34,"DS",0x1);
	add_segm_ex(0XE0042000,0XE0042010,0,1,0,0,ADDSEG_NOSREG|ADDSEG_SPARSE);
	SegRename(0XE0042000,"REGISTERS");
	SegClass (0XE0042000,"REGISTERS");
	SegDefReg(0xE0042000,"T",0x0);
	SegDefReg(0xE0042000,"DS",0x1);
	set_inf_attr(INF_LOW_OFF, 0x800C000);
	set_inf_attr(INF_HIGH_OFF, 0xE0042010);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
}

//------------------------------------------------------------------------
// Information about bytes

static STM32(void) {
        auto x;
#define id x

	update_extra_cmt		(0X800C000,	E_PREV + 0,	"; File Name   : Z:\\media\\ty\\bk\\XBOX\\Research\\aTYT2017\\unwrapped_fw\\RT82_GPS_4_05_.bin");
	update_extra_cmt		(0X800C000,	E_PREV + 1,	"; Format      : Binary file");
	update_extra_cmt		(0X800C000,	E_PREV + 2,	"; Base Address: 0000h Range: 800C000h - 80E7C00h Loaded length: DBC00h");
	create_dword	(x=0X800C000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C000,	"stack_pointer");
	create_dword	(x=0X800C004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C004,	"RESET");
	create_dword	(x=0X800C008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C008,	"NMI");
	create_dword	(x=0X800C00C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C00C,	"HARD_FAULT");
	create_dword	(x=0X800C010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C010,	"MEM_MGMT_FAULT");
	create_dword	(x=0X800C014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C014,	"BUS_FAULT");
	create_dword	(x=0X800C018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C018,	"USAGE_FAULT");
	create_dword	(x=0X800C01C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C01C,	"reserved1");
	create_dword	(x=0X800C020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C020,	"reserved2");
	create_dword	(x=0X800C024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C024,	"reserved3");
	create_dword	(x=0X800C028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C028,	"reserved4");
	create_dword	(x=0X800C02C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C02C,	"SV_CALL");
	create_dword	(x=0X800C030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C030,	"DEBUG");
	create_dword	(x=0X800C034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C034,	"reserved5");
	create_dword	(x=0X800C038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C038,	"PendSV_Handler");
	create_dword	(x=0X800C03C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C03C,	"SysTickHandler");
	create_dword	(x=0X800C040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C040,	"IRQ_0");
	create_dword	(x=0X800C044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C044,	"IRQ_1");
	create_dword	(x=0X800C048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C048,	"IRQ_2");
	create_dword	(x=0X800C04C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C04C,	"RTC_WKUP_IRQHandler");
	create_dword	(x=0X800C050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C050,	"IRQ_4");
	create_dword	(x=0X800C054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C054,	"IRQ_5");
	create_dword	(x=0X800C058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C058,	"EXTI0_IRQHandler");
	create_dword	(x=0X800C05C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C05C,	"EXTI1_IRQHandler");
	create_dword	(x=0X800C060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C060,	"EXTI2_IRQHandler");
	create_dword	(x=0X800C064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C064,	"IRQ_9");
	create_dword	(x=0X800C068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C068,	"IRQ_10");
	create_dword	(x=0X800C06C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C06C,	"IRQ_11");
	create_dword	(x=0X800C070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C070,	"IRQ_12");
	create_dword	(x=0X800C074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C074,	"IRQ_13");
	create_dword	(x=0X800C078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C078,	"IRQ_14");
	create_dword	(x=0X800C07C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C07C,	"IRQ_15");
	create_dword	(x=0X800C080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C080,	"IRQ_16");
	create_dword	(x=0X800C084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C084,	"IRQ_17");
	create_dword	(x=0X800C088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C088,	"IRQ_18");
	create_dword	(x=0X800C08C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C08C,	"IRQ_19");
	create_dword	(x=0X800C090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C090,	"IRQ_20");
	create_dword	(x=0X800C094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C094,	"IRQ_21");
	create_dword	(x=0X800C098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C098,	"IRQ_22");
	create_dword	(x=0X800C09C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C09C,	"IRQ_23");
	create_dword	(x=0X800C0A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0A0,	"IRQ_24");
	create_dword	(x=0X800C0A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0A4,	"TIM1_UP_TIM10_IRQHandler");
	create_dword	(x=0X800C0A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0A8,	"IRQ_26");
	create_dword	(x=0X800C0AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0AC,	"IRQ_27");
	create_dword	(x=0X800C0B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0B0,	"TIM2_IRQHandler");
	create_dword	(x=0X800C0B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0B4,	"TIM3_IRQHandler");
	create_dword	(x=0X800C0B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0B8,	"TIM4_IRQHandler");
	create_dword	(x=0X800C0BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0BC,	"IRQ_31");
	create_dword	(x=0X800C0C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0C0,	"IRQ_32");
	create_dword	(x=0X800C0C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0C4,	"IRQ_33");
	create_dword	(x=0X800C0C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0C8,	"IRQ_34");
	create_dword	(x=0X800C0CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0CC,	"IRQ_35");
	create_dword	(x=0X800C0D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0D0,	"IRQ_36");
	create_dword	(x=0X800C0D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0D4,	"IRQ_37");
	create_dword	(x=0X800C0D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0D8,	"IRQ_38");
	create_dword	(x=0X800C0DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0DC,	"IRQ_39");
	create_dword	(x=0X800C0E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0E0,	"IRQ_40");
	create_dword	(x=0X800C0E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0E4,	"IRQ_41");
	create_dword	(x=0X800C0E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0E8,	"OTG_FS_WKUP_IRQHandler");
	create_dword	(x=0X800C0EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0EC,	"TIM8_BRK_TIM12_IRQHandler");
	create_dword	(x=0X800C0F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0F0,	"TIM8_UP_TIM13_IRQHandler");
	create_dword	(x=0X800C0F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0F4,	"IRQ_45");
	create_dword	(x=0X800C0F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0F8,	"IRQ_46");
	create_dword	(x=0X800C0FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C0FC,	"IRQ_47");
	create_dword	(x=0X800C100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C100,	"IRQ_48");
	create_dword	(x=0X800C104);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C104,	"IRQ_49");
	create_dword	(x=0X800C108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C108,	"md380_spiflash_handler");
	create_dword	(x=0X800C10C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C10C,	"IRQ_51");
	create_dword	(x=0X800C110);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C110,	"IRQ_52");
	create_dword	(x=0X800C114);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C114,	"IRQ_53");
	create_dword	(x=0X800C118);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C118,	"TIM6_DAC_IRQHandler");
	create_dword	(x=0X800C11C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C11C,	"TIM7_IRQHandler");
	create_dword	(x=0X800C120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C120,	"DMA2_Stream0_IRQHandler");
	create_dword	(x=0X800C124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C124,	"IRQ_57");
	create_dword	(x=0X800C128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C128,	"IRQ_58");
	create_dword	(x=0X800C12C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C12C,	"IRQ_59");
	create_dword	(x=0X800C130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C130,	"IRQ_60");
	create_dword	(x=0X800C134);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C134,	"IRQ_61");
	create_dword	(x=0X800C138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C138,	"IRQ_62");
	create_dword	(x=0X800C13C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C13C,	"IRQ_63");
	create_dword	(x=0X800C140);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C140,	"IRQ_64");
	create_dword	(x=0X800C144);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C144,	"IRQ_65");
	create_dword	(x=0X800C148);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C148,	"IRQ_66");
	create_dword	(x=0X800C14C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C14C,	"IRQ_67");
	create_dword	(x=0X800C150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C150,	"IRQ_68");
	create_dword	(x=0X800C154);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C154,	"IRQ_69");
	create_dword	(x=0X800C158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C158,	"IRQ_70");
	create_dword	(x=0X800C15C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C15C,	"IRQ_71");
	create_dword	(x=0X800C160);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C160,	"IRQ_72");
	create_dword	(x=0X800C164);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C164,	"IRQ_73");
	create_dword	(x=0X800C168);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C168,	"IRQ_74");
	create_dword	(x=0X800C16C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C16C,	"IRQ_75");
	create_dword	(x=0X800C170);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C170,	"IRQ_76");
	create_dword	(x=0X800C174);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C174,	"IRQ_77");
	create_dword	(x=0X800C178);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C178,	"IRQ_78");
	create_dword	(x=0X800C17C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C17C,	"IRQ_79");
	create_dword	(x=0X800C180);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X800C180,	"IRQ_80");
	create_dword	(x=0X800C184);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X800C188);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
		create_dword	(0X40000000);
	set_name	(0X40000000,	"TIM2_CR1");
	create_dword	(0X40000004);
	set_name	(0X40000004,	"TIM2_CR2");
	create_dword	(0X40000008);
	set_name	(0X40000008,	"TIM2_SMCR");
	create_dword	(0X4000000C);
	set_name	(0X4000000C,	"TIM2_DIER");
	create_dword	(0X40000010);
	set_name	(0X40000010,	"TIM2_SR");
	create_dword	(0X40000014);
	set_name	(0X40000014,	"TIM2_EGR");
	create_dword	(0X40000018);
	set_name	(0X40000018,	"TIM2_CCMR1");
	create_dword	(0X4000001C);
	set_name	(0X4000001C,	"TIM2_CCMR2");
	create_dword	(0X40000020);
	set_name	(0X40000020,	"TIM2_CCER");
	create_dword	(0X40000024);
	set_name	(0X40000024,	"TIM2_CNT");
	create_dword	(0X40000028);
	set_name	(0X40000028,	"TIM2_PSC");
	create_dword	(0X4000002C);
	set_name	(0X4000002C,	"TIM2_ARR");
	create_dword	(0X40000030);
	set_name	(0X40000030,	"TIM2_RCR");
	create_dword	(0X40000034);
	set_name	(0X40000034,	"TIM2_CCR1");
	create_dword	(0X40000038);
	set_name	(0X40000038,	"TIM2_CCR2");
	create_dword	(0X4000003C);
	set_name	(0X4000003C,	"TIM2_CCR3");
	create_dword	(0X40000040);
	set_name	(0X40000040,	"TIM2_CCR4");
	create_dword	(0X40000048);
	set_name	(0X40000048,	"TIM2_DCR");
	create_dword	(0X4000004C);
	set_name	(0X4000004C,	"TIM2_DMAR");
	create_dword	(0X40000050);
	set_name	(0X40000050,	"TIM2_OR");
	create_dword	(0X40000400);
	set_name	(0X40000400,	"TIM3_CR1");
	create_dword	(0X40000404);
	set_name	(0X40000404,	"TIM3_CR2");
	create_dword	(0X40000408);
	set_name	(0X40000408,	"TIM3_SMCR");
	create_dword	(0X4000040C);
	set_name	(0X4000040C,	"TIM3_DIER");
	create_dword	(0X40000410);
	set_name	(0X40000410,	"TIM3_SR");
	create_dword	(0X40000414);
	set_name	(0X40000414,	"TIM3_EGR");
	create_dword	(0X40000418);
	set_name	(0X40000418,	"TIM3_CCMR1");
	create_dword	(0X4000041C);
	set_name	(0X4000041C,	"TIM3_CCMR2");
	create_dword	(0X40000420);
	set_name	(0X40000420,	"TIM3_CCER");
	create_dword	(0X40000424);
	set_name	(0X40000424,	"TIM3_CNT");
	create_dword	(0X40000428);
	set_name	(0X40000428,	"TIM3_PSC");
	create_dword	(0X4000042C);
	set_name	(0X4000042C,	"TIM3_ARR");
	create_dword	(0X40000430);
	set_name	(0X40000430,	"TIM3_RCR");
	create_dword	(0X40000434);
	set_name	(0X40000434,	"TIM3_CCR1");
	create_dword	(0X40000438);
	set_name	(0X40000438,	"TIM3_CCR2");
	create_dword	(0X4000043C);
	set_name	(0X4000043C,	"TIM3_CCR3");
	create_dword	(0X40000440);
	set_name	(0X40000440,	"TIM3_CCR4");
	create_dword	(0X40000448);
	set_name	(0X40000448,	"TIM3_DCR");
	create_dword	(0X4000044C);
	set_name	(0X4000044C,	"TIM3_DMAR");
	create_dword	(0X40000450);
	set_name	(0X40000450,	"TIM3_OR");
	create_dword	(0X40000800);
	set_name	(0X40000800,	"TIM4_CR1");
	create_dword	(0X40000804);
	set_name	(0X40000804,	"TIM4_CR2");
	create_dword	(0X40000808);
	set_name	(0X40000808,	"TIM4_SMCR");
	create_dword	(0X4000080C);
	set_name	(0X4000080C,	"TIM4_DIER");
	create_dword	(0X40000810);
	set_name	(0X40000810,	"TIM4_SR");
	create_dword	(0X40000814);
	set_name	(0X40000814,	"TIM4_EGR");
	create_dword	(0X40000818);
	set_name	(0X40000818,	"TIM4_CCMR1");
	create_dword	(0X4000081C);
	set_name	(0X4000081C,	"TIM4_CCMR2");
	create_dword	(0X40000820);
	set_name	(0X40000820,	"TIM4_CCER");
	create_dword	(0X40000824);
	set_name	(0X40000824,	"TIM4_CNT");
	create_dword	(0X40000828);
	set_name	(0X40000828,	"TIM4_PSC");
	create_dword	(0X4000082C);
	set_name	(0X4000082C,	"TIM4_ARR");
	create_dword	(0X40000830);
	set_name	(0X40000830,	"TIM4_RCR");
	create_dword	(0X40000834);
	set_name	(0X40000834,	"TIM4_CCR1");
	create_dword	(0X40000838);
	set_name	(0X40000838,	"TIM4_CCR2");
	create_dword	(0X4000083C);
	set_name	(0X4000083C,	"TIM4_CCR3");
	create_dword	(0X40000840);
	set_name	(0X40000840,	"TIM4_CCR4");
	create_dword	(0X40000848);
	set_name	(0X40000848,	"TIM4_DCR");
	create_dword	(0X4000084C);
	set_name	(0X4000084C,	"TIM4_DMAR");
	create_dword	(0X40000850);
	set_name	(0X40000850,	"TIM4_OR");
	create_dword	(0X40000C00);
	set_name	(0X40000C00,	"TIM5_CR1");
	create_dword	(0X40000C04);
	set_name	(0X40000C04,	"TIM5_CR2");
	create_dword	(0X40000C08);
	set_name	(0X40000C08,	"TIM5_SMCR");
	create_dword	(0X40000C0C);
	set_name	(0X40000C0C,	"TIM5_DIER");
	create_dword	(0X40000C10);
	set_name	(0X40000C10,	"TIM5_SR");
	create_dword	(0X40000C14);
	set_name	(0X40000C14,	"TIM5_EGR");
	create_dword	(0X40000C18);
	set_name	(0X40000C18,	"TIM5_CCMR1");
	create_dword	(0X40000C1C);
	set_name	(0X40000C1C,	"TIM5_CCMR2");
	create_dword	(0X40000C20);
	set_name	(0X40000C20,	"TIM5_CCER");
	create_dword	(0X40000C24);
	set_name	(0X40000C24,	"TIM5_CNT");
	create_dword	(0X40000C28);
	set_name	(0X40000C28,	"TIM5_PSC");
	create_dword	(0X40000C2C);
	set_name	(0X40000C2C,	"TIM5_ARR");
	create_dword	(0X40000C30);
	set_name	(0X40000C30,	"TIM5_RCR");
	create_dword	(0X40000C34);
	set_name	(0X40000C34,	"TIM5_CCR1");
	create_dword	(0X40000C38);
	set_name	(0X40000C38,	"TIM5_CCR2");
	create_dword	(0X40000C3C);
	set_name	(0X40000C3C,	"TIM5_CCR3");
	create_dword	(0X40000C40);
	set_name	(0X40000C40,	"TIM5_CCR4");
	create_dword	(0X40000C48);
	set_name	(0X40000C48,	"TIM5_DCR");
	create_dword	(0X40000C4C);
	set_name	(0X40000C4C,	"TIM5_DMAR");
	create_dword	(0X40000C50);
	set_name	(0X40000C50,	"TIM5_OR");
	create_dword	(0X40001000);
	set_name	(0X40001000,	"TIM6_CR1");
	create_dword	(0X40001004);
	set_name	(0X40001004,	"TIM6_CR2");
	create_dword	(0X4000100C);
	set_name	(0X4000100C,	"TIM6_DIER");
	create_dword	(0X40001010);
	set_name	(0X40001010,	"TIM6_SR");
	create_dword	(0X40001014);
	set_name	(0X40001014,	"TIM6_EGR");
	create_dword	(0X40001024);
	set_name	(0X40001024,	"TIM6_CNT");
	create_dword	(0X40001028);
	set_name	(0X40001028,	"TIM6_PSC");
	create_dword	(0X4000102C);
	set_name	(0X4000102C,	"TIM6_ARR");
	create_dword	(0X40001400);
	set_name	(0X40001400,	"TIM7_CR1");
	create_dword	(0X40001404);
	set_name	(0X40001404,	"TIM7_CR2");
	create_dword	(0X4000140C);
	set_name	(0X4000140C,	"TIM7_DIER");
	create_dword	(0X40001410);
	set_name	(0X40001410,	"TIM7_SR");
	create_dword	(0X40001414);
	set_name	(0X40001414,	"TIM7_EGR");
	create_dword	(0X40001424);
	set_name	(0X40001424,	"TIM7_CNT");
	create_dword	(0X40001428);
	set_name	(0X40001428,	"TIM7_PSC");
	create_dword	(0X4000142C);
	set_name	(0X4000142C,	"TIM7_ARR");
	create_dword	(0X40001800);
	set_name	(0X40001800,	"TIM12_CR1");
	create_dword	(0X40001804);
	set_name	(0X40001804,	"TIM12_CR2");
	create_dword	(0X40001808);
	set_name	(0X40001808,	"TIM12_SMCR");
	create_dword	(0X4000180C);
	set_name	(0X4000180C,	"TIM12_DIER");
	create_dword	(0X40001810);
	set_name	(0X40001810,	"TIM12_SR");
	create_dword	(0X40001814);
	set_name	(0X40001814,	"TIM12_EGR");
	create_dword	(0X40001818);
	set_name	(0X40001818,	"TIM12_CCMR1");
	create_dword	(0X40001820);
	set_name	(0X40001820,	"TIM12_CCER");
	create_dword	(0X40001824);
	set_name	(0X40001824,	"TIM12_CNT");
	create_dword	(0X40001828);
	set_name	(0X40001828,	"TIM12_PSC");
	create_dword	(0X4000182C);
	set_name	(0X4000182C,	"TIM12_ARR");
	create_dword	(0X40001834);
	set_name	(0X40001834,	"TIM12_CCR1");
	create_dword	(0X40001838);
	set_name	(0X40001838,	"TIM12_CCR2");
	create_dword	(0X40001C00);
	set_name	(0X40001C00,	"TIM13_CR1");
	create_dword	(0X40001C0C);
	set_name	(0X40001C0C,	"TIM13_DIER");
	create_dword	(0X40001C10);
	set_name	(0X40001C10,	"TIM13_SR");
	create_dword	(0X40001C14);
	set_name	(0X40001C14,	"TIM13_EGR");
	create_dword	(0X40001C18);
	set_name	(0X40001C18,	"TIM13_CCMR1");
	create_dword	(0X40001C20);
	set_name	(0X40001C20,	"TIM13_CCER");
	create_dword	(0X40001C24);
	set_name	(0X40001C24,	"TIM13_CNT");
	create_dword	(0X40001C28);
	set_name	(0X40001C28,	"TIM13_PSC");
	create_dword	(0X40001C2C);
	set_name	(0X40001C2C,	"TIM13_ARR");
	create_dword	(0X40001C34);
	set_name	(0X40001C34,	"TIM13_CCR1");
	create_dword	(0X40002000);
	set_name	(0X40002000,	"TIM14_CR1");
	create_dword	(0X4000200C);
	set_name	(0X4000200C,	"TIM14_DIER");
	create_dword	(0X40002010);
	set_name	(0X40002010,	"TIM14_SR");
	create_dword	(0X40002014);
	set_name	(0X40002014,	"TIM14_EGR");
	create_dword	(0X40002018);
	set_name	(0X40002018,	"TIM14_CCMR1");
	create_dword	(0X40002020);
	set_name	(0X40002020,	"TIM14_CCER");
	create_dword	(0X40002024);
	set_name	(0X40002024,	"TIM14_CNT");
	create_dword	(0X40002028);
	set_name	(0X40002028,	"TIM14_PSC");
	create_dword	(0X4000202C);
	set_name	(0X4000202C,	"TIM14_ARR");
	create_dword	(0X40002034);
	set_name	(0X40002034,	"TIM14_CCR1");
	create_dword	(0X40002800);
	set_name	(0X40002800,	"RTC_TR");
	create_dword	(0X40002804);
	set_name	(0X40002804,	"RTC_DR");
	create_dword	(0X40002808);
	set_name	(0X40002808,	"RTC_CR");
	create_dword	(0X4000280C);
	set_name	(0X4000280C,	"RTC_ISR");
	create_dword	(0X40002810);
	set_name	(0X40002810,	"RTC_PRER");
	create_dword	(0X40002814);
	set_name	(0X40002814,	"RTC_WUTR");
	create_dword	(0X40002818);
	set_name	(0X40002818,	"RTC_CALIBR");
	create_dword	(0X4000281C);
	set_name	(0X4000281C,	"RTC_ALRMAR");
	create_dword	(0X40002820);
	set_name	(0X40002820,	"RTC_ALRMBR");
	create_dword	(0X40002824);
	set_name	(0X40002824,	"RTC_WPR");
	create_dword	(0X40002828);
	set_name	(0X40002828,	"RTC_SSR");
	create_dword	(0X4000282C);
	set_name	(0X4000282C,	"RTC_SHIFTR");
	create_dword	(0X40002830);
	set_name	(0X40002830,	"RTC_TSTR");
	create_dword	(0X40002834);
	set_name	(0X40002834,	"RTC_TSDR");
	create_dword	(0X40002838);
	set_name	(0X40002838,	"RTC_TSSSR");
	create_dword	(0X4000283C);
	set_name	(0X4000283C,	"RTC_CALR");
	create_dword	(0X40002840);
	set_name	(0X40002840,	"RTC_TAFCR");
	create_dword	(0X40002844);
	set_name	(0X40002844,	"RTC_ALRMASSR");
	create_dword	(0X40002848);
	set_name	(0X40002848,	"RTC_ALRMBSSR");
	create_dword	(0X40002850);
	set_name	(0X40002850,	"RTC_BKP0R");
	create_dword	(0X40002854);
	set_name	(0X40002854,	"RTC_BKP1R");
	create_dword	(0X40002858);
	set_name	(0X40002858,	"RTC_BKP2R");
	create_dword	(0X4000285C);
	set_name	(0X4000285C,	"RTC_BKP3R");
	create_dword	(0X40002860);
	set_name	(0X40002860,	"RTC_BKP4R");
	create_dword	(0X40002864);
	set_name	(0X40002864,	"RTC_BKP5R");
	create_dword	(0X40002868);
	set_name	(0X40002868,	"RTC_BKP6R");
	create_dword	(0X4000286C);
	set_name	(0X4000286C,	"RTC_BKP7R");
	create_dword	(0X40002870);
	set_name	(0X40002870,	"RTC_BKP8R");
	create_dword	(0X40002874);
	set_name	(0X40002874,	"RTC_BKP9R");
	create_dword	(0X40002878);
	set_name	(0X40002878,	"RTC_BKP10R");
	create_dword	(0X4000287C);
	set_name	(0X4000287C,	"RTC_BKP11R");
	create_dword	(0X40002880);
	set_name	(0X40002880,	"RTC_BKP12R");
	create_dword	(0X40002884);
	set_name	(0X40002884,	"RTC_BKP13R");
	create_dword	(0X40002888);
	set_name	(0X40002888,	"RTC_BKP14R");
	create_dword	(0X4000288C);
	set_name	(0X4000288C,	"RTC_BKP15R");
	create_dword	(0X40002890);
	set_name	(0X40002890,	"RTC_BKP16R");
	create_dword	(0X40002894);
	set_name	(0X40002894,	"RTC_BKP17R");
	create_dword	(0X40002898);
	set_name	(0X40002898,	"RTC_BKP18R");
	create_dword	(0X4000289C);
	set_name	(0X4000289C,	"RTC_BKP19R");
	create_dword	(0X40002C00);
	set_name	(0X40002C00,	"WWDG_CR");
	create_dword	(0X40002C04);
	set_name	(0X40002C04,	"WWDG_CFR");
	create_dword	(0X40002C08);
	set_name	(0X40002C08,	"WWDG_SR");
	create_dword	(0X40003000);
	set_name	(0X40003000,	"IWDG_KR");
	create_dword	(0X40003004);
	set_name	(0X40003004,	"IWDG_PR");
	create_dword	(0X40003008);
	set_name	(0X40003008,	"IWDG_RLR");
	create_dword	(0X4000300C);
	set_name	(0X4000300C,	"IWDG_SR");
	create_dword	(0X40003800);
	set_name	(0X40003800,	"SPI2_CR1");
	create_dword	(0X40003804);
	set_name	(0X40003804,	"SPI2_CR2");
	create_dword	(0X40003808);
	set_name	(0X40003808,	"SPI2_SR");
	create_dword	(0X4000380C);
	set_name	(0X4000380C,	"SPI2_DR");
	create_dword	(0X40003810);
	set_name	(0X40003810,	"SPI2_CRCPR");
	create_dword	(0X40003814);
	set_name	(0X40003814,	"SPI2_RXCRCR");
	create_dword	(0X40003818);
	set_name	(0X40003818,	"SPI2_TXCRCR");
	create_dword	(0X4000381C);
	set_name	(0X4000381C,	"SPI2_I2SCFGR");
	create_dword	(0X40003820);
	set_name	(0X40003820,	"SPI2_I2SPR");
	create_dword	(0X40003C00);
	set_name	(0X40003C00,	"SPI3_CR1");
	create_dword	(0X40003C04);
	set_name	(0X40003C04,	"SPI3_CR2");
	create_dword	(0X40003C08);
	set_name	(0X40003C08,	"SPI3_SR");
	create_dword	(0X40003C0C);
	set_name	(0X40003C0C,	"SPI3_DR");
	create_dword	(0X40003C10);
	set_name	(0X40003C10,	"SPI3_CRCPR");
	create_dword	(0X40003C14);
	set_name	(0X40003C14,	"SPI3_RXCRCR");
	create_dword	(0X40003C18);
	set_name	(0X40003C18,	"SPI3_TXCRCR");
	create_dword	(0X40003C1C);
	set_name	(0X40003C1C,	"SPI3_I2SCFGR");
	create_dword	(0X40003C20);
	set_name	(0X40003C20,	"SPI3_I2SPR");
	create_dword	(0X40004400);
	set_name	(0X40004400,	"USART2_SR");
	create_dword	(0X40004404);
	set_name	(0X40004404,	"USART2_DR");
	create_dword	(0X40004408);
	set_name	(0X40004408,	"USART2_BRR");
	create_dword	(0X4000440C);
	set_name	(0X4000440C,	"USART2_CR1");
	create_dword	(0X40004410);
	set_name	(0X40004410,	"USART2_CR2");
	create_dword	(0X40004414);
	set_name	(0X40004414,	"USART2_CR3");
	create_dword	(0X40004418);
	set_name	(0X40004418,	"USART2_GTPR");
	create_dword	(0X40004800);
	set_name	(0X40004800,	"USART3_SR");
	create_dword	(0X40004804);
	set_name	(0X40004804,	"USART3_DR");
	create_dword	(0X40004808);
	set_name	(0X40004808,	"USART3_BRR");
	create_dword	(0X4000480C);
	set_name	(0X4000480C,	"USART3_CR1");
	create_dword	(0X40004810);
	set_name	(0X40004810,	"USART3_CR2");
	create_dword	(0X40004814);
	set_name	(0X40004814,	"USART3_CR3");
	create_dword	(0X40004818);
	set_name	(0X40004818,	"USART3_GTPR");
	create_dword	(0X40004C00);
	set_name	(0X40004C00,	"USART4_SR");
	create_dword	(0X40004C04);
	set_name	(0X40004C04,	"USART4_DR");
	create_dword	(0X40004C08);
	set_name	(0X40004C08,	"USART4_BRR");
	create_dword	(0X40004C0C);
	set_name	(0X40004C0C,	"USART4_CR1");
	create_dword	(0X40004C10);
	set_name	(0X40004C10,	"USART4_CR2");
	create_dword	(0X40004C14);
	set_name	(0X40004C14,	"USART4_CR3");
	create_dword	(0X40005000);
	set_name	(0X40005000,	"USART5_SR");
	create_dword	(0X40005004);
	set_name	(0X40005004,	"USART5_DR");
	create_dword	(0X40005008);
	set_name	(0X40005008,	"USART5_BRR");
	create_dword	(0X4000500C);
	set_name	(0X4000500C,	"USART5_CR1");
	create_dword	(0X40005010);
	set_name	(0X40005010,	"USART5_CR2");
	create_dword	(0X40005014);
	set_name	(0X40005014,	"USART5_CR3");
	create_dword	(0X40005400);
	set_name	(0X40005400,	"I2C1_CR1");
	create_dword	(0X40005404);
	set_name	(0X40005404,	"I2C1_CR2");
	create_dword	(0X40005408);
	set_name	(0X40005408,	"I2C1_OAR1");
	create_dword	(0X4000540C);
	set_name	(0X4000540C,	"I2C1_OAR2");
	create_dword	(0X40005410);
	set_name	(0X40005410,	"I2C1_DR");
	create_dword	(0X40005414);
	set_name	(0X40005414,	"I2C1_SR1");
	create_dword	(0X40005418);
	set_name	(0X40005418,	"I2C1_SR2");
	create_dword	(0X4000541C);
	set_name	(0X4000541C,	"I2C1_CCR");
	create_dword	(0X40005420);
	set_name	(0X40005420,	"I2C1_TRISE");
	create_dword	(0X40005800);
	set_name	(0X40005800,	"I2C2_CR1");
	create_dword	(0X40005804);
	set_name	(0X40005804,	"I2C2_CR2");
	create_dword	(0X40005808);
	set_name	(0X40005808,	"I2C2_OAR1");
	create_dword	(0X4000580C);
	set_name	(0X4000580C,	"I2C2_OAR2");
	create_dword	(0X40005810);
	set_name	(0X40005810,	"I2C2_DR");
	create_dword	(0X40005814);
	set_name	(0X40005814,	"I2C2_SR1");
	create_dword	(0X40005818);
	set_name	(0X40005818,	"I2C2_SR2");
	create_dword	(0X4000581C);
	set_name	(0X4000581C,	"I2C2_CCR");
	create_dword	(0X40005820);
	set_name	(0X40005820,	"I2C2_TRISE");
	create_dword	(0X40005C00);
	set_name	(0X40005C00,	"I2C3_CR1");
	create_dword	(0X40005C04);
	set_name	(0X40005C04,	"I2C3_CR2");
	create_dword	(0X40005C08);
	set_name	(0X40005C08,	"I2C3_OAR1");
	create_dword	(0X40005C0C);
	set_name	(0X40005C0C,	"I2C3_OAR2");
	create_dword	(0X40005C10);
	set_name	(0X40005C10,	"I2C3_DR");
	create_dword	(0X40005C14);
	set_name	(0X40005C14,	"I2C3_SR1");
	create_dword	(0X40005C18);
	set_name	(0X40005C18,	"I2C3_SR2");
	create_dword	(0X40005C1C);
	set_name	(0X40005C1C,	"I2C3_CCR");
	create_dword	(0X40005C20);
	set_name	(0X40005C20,	"I2C3_TRISE");
	create_dword	(0X40006400);
	set_name	(0X40006400,	"CAN1_MCR");
	create_dword	(0X40006404);
	set_name	(0X40006404,	"CAN1_MSR");
	create_dword	(0X40006408);
	set_name	(0X40006408,	"CAN1_TSR");
	create_dword	(0X4000640C);
	set_name	(0X4000640C,	"CAN1_RF0R");
	create_dword	(0X40006410);
	set_name	(0X40006410,	"CAN1_RF1R");
	create_dword	(0X40006414);
	set_name	(0X40006414,	"CAN1_IER");
	create_dword	(0X40006418);
	set_name	(0X40006418,	"CAN1_ESR");
	create_dword	(0X4000641C);
	set_name	(0X4000641C,	"CAN1_BTR");
	create_dword	(0X40006580);
	set_name	(0X40006580,	"CAN1_TI0R");
	create_dword	(0X40006584);
	set_name	(0X40006584,	"CAN1_TDT0R");
	create_dword	(0X40006588);
	set_name	(0X40006588,	"CAN1_TDL0R");
	create_dword	(0X4000658C);
	set_name	(0X4000658C,	"CAN1_TDH0R");
	create_dword	(0X40006590);
	set_name	(0X40006590,	"CAN1_TI1R");
	create_dword	(0X40006594);
	set_name	(0X40006594,	"CAN1_TDT1R");
	create_dword	(0X40006598);
	set_name	(0X40006598,	"CAN1_TDL1R");
	create_dword	(0X4000659C);
	set_name	(0X4000659C,	"CAN1_TDH1R");
	create_dword	(0X400065A0);
	set_name	(0X400065A0,	"CAN1_TI2R");
	create_dword	(0X400065A4);
	set_name	(0X400065A4,	"CAN1_TDT2R");
	create_dword	(0X400065A8);
	set_name	(0X400065A8,	"CAN1_TDL2R");
	create_dword	(0X400065AC);
	set_name	(0X400065AC,	"CAN1_TDH2R");
	create_dword	(0X400065B0);
	set_name	(0X400065B0,	"CAN1_RI0R");
	create_dword	(0X400065B4);
	set_name	(0X400065B4,	"CAN1_RDT0R");
	create_dword	(0X400065B8);
	set_name	(0X400065B8,	"CAN1_RDL0R");
	create_dword	(0X400065BC);
	set_name	(0X400065BC,	"CAN1_RDH0R");
	create_dword	(0X400065C0);
	set_name	(0X400065C0,	"CAN1_RI1R");
	create_dword	(0X400065C4);
	set_name	(0X400065C4,	"CAN1_RDT1R");
	create_dword	(0X400065C8);
	set_name	(0X400065C8,	"CAN1_RDL1R");
	create_dword	(0X400065CC);
	set_name	(0X400065CC,	"CAN1_RDH1R");
	create_dword	(0X40006600);
	set_name	(0X40006600,	"CAN_FMR");
	create_dword	(0X40006604);
	set_name	(0X40006604,	"CAN_FM1R");
	create_dword	(0X4000660C);
	set_name	(0X4000660C,	"CAN_FS1R");
	create_dword	(0X40006614);
	set_name	(0X40006614,	"CAN_FFA1R");
	create_dword	(0X4000661C);
	set_name	(0X4000661C,	"CAN_FA1R");
	create_dword	(0X40006640);
	set_name	(0X40006640,	"CAN_F0R1");
	create_dword	(0X40006644);
	set_name	(0X40006644,	"CAN_F0R2");
	create_dword	(0X40006648);
	set_name	(0X40006648,	"CAN_F1R1");
	create_dword	(0X4000664C);
	set_name	(0X4000664C,	"CAN_F1R2");
	create_dword	(0X40006650);
	set_name	(0X40006650,	"CAN_F2R1");
	create_dword	(0X40006654);
	set_name	(0X40006654,	"CAN_F2R2");
	create_dword	(0X40006658);
	set_name	(0X40006658,	"CAN_F3R1");
	create_dword	(0X4000665C);
	set_name	(0X4000665C,	"CAN_F3R2");
	create_dword	(0X40006660);
	set_name	(0X40006660,	"CAN_F4R1");
	create_dword	(0X40006664);
	set_name	(0X40006664,	"CAN_F4R2");
	create_dword	(0X40006668);
	set_name	(0X40006668,	"CAN_F5R1");
	create_dword	(0X4000666C);
	set_name	(0X4000666C,	"CAN_F5R2");
	create_dword	(0X40006670);
	set_name	(0X40006670,	"CAN_F6R1");
	create_dword	(0X40006674);
	set_name	(0X40006674,	"CAN_F6R2");
	create_dword	(0X40006678);
	set_name	(0X40006678,	"CAN_F7R1");
	create_dword	(0X4000667C);
	set_name	(0X4000667C,	"CAN_F7R2");
	create_dword	(0X40006680);
	set_name	(0X40006680,	"CAN_F8R1");
	create_dword	(0X40006684);
	set_name	(0X40006684,	"CAN_F8R2");
	create_dword	(0X40006688);
	set_name	(0X40006688,	"CAN_F9R1");
	create_dword	(0X4000668C);
	set_name	(0X4000668C,	"CAN_F9R2");
	create_dword	(0X40006690);
	set_name	(0X40006690,	"CAN_F10R1");
	create_dword	(0X40006694);
	set_name	(0X40006694,	"CAN_F10R2");
	create_dword	(0X40006698);
	set_name	(0X40006698,	"CAN_F11R1");
	create_dword	(0X4000669C);
	set_name	(0X4000669C,	"CAN_F11R2");
	create_dword	(0X400066A0);
	set_name	(0X400066A0,	"CAN_F12R1");
	create_dword	(0X400066A4);
	set_name	(0X400066A4,	"CAN_F12R2");
	create_dword	(0X400066A8);
	set_name	(0X400066A8,	"CAN_F13R1");
	create_dword	(0X400066AC);
	set_name	(0X400066AC,	"CAN_F13R2");
	create_dword	(0X400066B0);
	set_name	(0X400066B0,	"CAN_F14R1");
	create_dword	(0X400066B4);
	set_name	(0X400066B4,	"CAN_F14R2");
	create_dword	(0X400066B8);
	set_name	(0X400066B8,	"CAN_F15R1");
	create_dword	(0X400066BC);
	set_name	(0X400066BC,	"CAN_F15R2");
	create_dword	(0X400066C0);
	set_name	(0X400066C0,	"CAN_F16R1");
	create_dword	(0X400066C4);
	set_name	(0X400066C4,	"CAN_F16R2");
	create_dword	(0X400066C8);
	set_name	(0X400066C8,	"CAN_F17R1");
	create_dword	(0X400066CC);
	set_name	(0X400066CC,	"CAN_F17R2");
	create_dword	(0X400066D0);
	set_name	(0X400066D0,	"CAN_F18R1");
	create_dword	(0X400066D4);
	set_name	(0X400066D4,	"CAN_F18R2");
	create_dword	(0X400066D8);
	set_name	(0X400066D8,	"CAN_F19R1");
	create_dword	(0X400066DC);
	set_name	(0X400066DC,	"CAN_F19R2");
	create_dword	(0X400066E0);
	set_name	(0X400066E0,	"CAN_F20R1");
	create_dword	(0X400066E4);
	set_name	(0X400066E4,	"CAN_F20R2");
	create_dword	(0X400066E8);
	set_name	(0X400066E8,	"CAN_F21R1");
	create_dword	(0X400066EC);
	set_name	(0X400066EC,	"CAN_F21R2");
	create_dword	(0X400066F0);
	set_name	(0X400066F0,	"CAN_F22R1");
	create_dword	(0X400066F4);
	set_name	(0X400066F4,	"CAN_F22R2");
	create_dword	(0X400066F8);
	set_name	(0X400066F8,	"CAN_F23R1");
	create_dword	(0X400066FC);
	set_name	(0X400066FC,	"CAN_F23R2");
	create_dword	(0X40006700);
	set_name	(0X40006700,	"CAN_F24R1");
	create_dword	(0X40006704);
	set_name	(0X40006704,	"CAN_F24R2");
	create_dword	(0X40006708);
	set_name	(0X40006708,	"CAN_F25R1");
	create_dword	(0X4000670C);
	set_name	(0X4000670C,	"CAN_F25R2");
	create_dword	(0X40006710);
	set_name	(0X40006710,	"CAN_F26R1");
	create_dword	(0X40006714);
	set_name	(0X40006714,	"CAN_F26R2");
	create_dword	(0X40006718);
	set_name	(0X40006718,	"CAN_F27R1");
	create_dword	(0X4000671C);
	set_name	(0X4000671C,	"CAN_F27R2");
	create_dword	(0X40006800);
	set_name	(0X40006800,	"CAN2_MCR");
	create_dword	(0X40006804);
	set_name	(0X40006804,	"CAN2_MSR");
	create_dword	(0X40006808);
	set_name	(0X40006808,	"CAN2_TSR");
	create_dword	(0X4000680C);
	set_name	(0X4000680C,	"CAN2_RF0R");
	create_dword	(0X40006810);
	set_name	(0X40006810,	"CAN2_RF1R");
	create_dword	(0X40006814);
	set_name	(0X40006814,	"CAN2_IER");
	create_dword	(0X40006818);
	set_name	(0X40006818,	"CAN2_ESR");
	create_dword	(0X4000681C);
	set_name	(0X4000681C,	"CAN2_BTR");
	create_dword	(0X40006980);
	set_name	(0X40006980,	"CAN2_TI0R");
	create_dword	(0X40006984);
	set_name	(0X40006984,	"CAN2_TDT0R");
	create_dword	(0X40006988);
	set_name	(0X40006988,	"CAN2_TDL0R");
	create_dword	(0X4000698C);
	set_name	(0X4000698C,	"CAN2_TDH0R");
	create_dword	(0X40006990);
	set_name	(0X40006990,	"CAN2_TI1R");
	create_dword	(0X40006994);
	set_name	(0X40006994,	"CAN2_TDT1R");
	create_dword	(0X40006998);
	set_name	(0X40006998,	"CAN2_TDL1R");
	create_dword	(0X4000699C);
	set_name	(0X4000699C,	"CAN2_TDH1R");
	create_dword	(0X400069A0);
	set_name	(0X400069A0,	"CAN2_TI2R");
	create_dword	(0X400069A4);
	set_name	(0X400069A4,	"CAN2_TDT2R");
	create_dword	(0X400069A8);
	set_name	(0X400069A8,	"CAN2_TDL2R");
	create_dword	(0X400069AC);
	set_name	(0X400069AC,	"CAN2_TDH2R");
	create_dword	(0X400069B0);
	set_name	(0X400069B0,	"CAN2_RI0R");
	create_dword	(0X400069B4);
	set_name	(0X400069B4,	"CAN2_RDT0R");
	create_dword	(0X400069B8);
	set_name	(0X400069B8,	"CAN2_RDL0R");
	create_dword	(0X400069BC);
	set_name	(0X400069BC,	"CAN2_RDH0R");
	create_dword	(0X400069C0);
	set_name	(0X400069C0,	"CAN2_RI1R");
	create_dword	(0X400069C4);
	set_name	(0X400069C4,	"CAN2_RDT1R");
	create_dword	(0X400069C8);
	set_name	(0X400069C8,	"CAN2_RDL1R");
	create_dword	(0X400069CC);
	set_name	(0X400069CC,	"CAN2_RDH1R");
	create_dword	(0X40007000);
	set_name	(0X40007000,	"PWR_CR");
	create_dword	(0X40007004);
	set_name	(0X40007004,	"PWR_CSR");
	create_dword	(0X40007400);
	set_name	(0X40007400,	"DAC_CR");
	create_dword	(0X40007404);
	set_name	(0X40007404,	"DAC_SWTRIGR");
	create_dword	(0X40007408);
	set_name	(0X40007408,	"DAC_DHR12R1");
	create_dword	(0X4000740C);
	set_name	(0X4000740C,	"DAC_DHR12L1");
	create_dword	(0X40007410);
	set_name	(0X40007410,	"DAC_DHR8R1");
	create_dword	(0X40007414);
	set_name	(0X40007414,	"DAC_DHR12R2");
	create_dword	(0X40007418);
	set_name	(0X40007418,	"DAC_DHR12L2");
	create_dword	(0X4000741C);
	set_name	(0X4000741C,	"DAC_DHR8R2");
	create_dword	(0X40007420);
	set_name	(0X40007420,	"DAC_DHR12RD");
	create_dword	(0X40007424);
	set_name	(0X40007424,	"DAC_DHR12LD");
	create_dword	(0X40007428);
	set_name	(0X40007428,	"DAC_DHR8RD");
	create_dword	(0X4000742C);
	set_name	(0X4000742C,	"DAC_DOR1");
	create_dword	(0X40007430);
	set_name	(0X40007430,	"DAC_DOR2");
	create_dword	(0X40010000);
	set_name	(0X40010000,	"TIM1_CR1");
	create_dword	(0X40010004);
	set_name	(0X40010004,	"TIM1_CR2");
	create_dword	(0X40010008);
	set_name	(0X40010008,	"TIM1_SMCR");
	create_dword	(0X4001000C);
	set_name	(0X4001000C,	"TIM1_DIER");
	create_dword	(0X40010010);
	set_name	(0X40010010,	"TIM1_SR");
	create_dword	(0X40010014);
	set_name	(0X40010014,	"TIM1_EGR");
	create_dword	(0X40010018);
	set_name	(0X40010018,	"TIM1_CCMR1");
	create_dword	(0X4001001C);
	set_name	(0X4001001C,	"TIM1_CCMR2");
	create_dword	(0X40010020);
	set_name	(0X40010020,	"TIM1_CCER");
	create_dword	(0X40010024);
	set_name	(0X40010024,	"TIM1_CNT");
	create_dword	(0X40010028);
	set_name	(0X40010028,	"TIM1_PSC");
	create_dword	(0X4001002C);
	set_name	(0X4001002C,	"TIM1_ARR");
	create_dword	(0X40010030);
	set_name	(0X40010030,	"TIM1_RCR");
	create_dword	(0X40010034);
	set_name	(0X40010034,	"TIM1_CCR1");
	create_dword	(0X40010038);
	set_name	(0X40010038,	"TIM1_CCR2");
	create_dword	(0X4001003C);
	set_name	(0X4001003C,	"TIM1_CCR3");
	create_dword	(0X40010040);
	set_name	(0X40010040,	"TIM1_CCR4");
	create_dword	(0X40010044);
	set_name	(0X40010044,	"TIM1_BDTR");
	create_dword	(0X40010048);
	set_name	(0X40010048,	"TIM1_DCR");
	create_dword	(0X4001004C);
	set_name	(0X4001004C,	"TIM1_DMAR");
	create_dword	(0X40010400);
	set_name	(0X40010400,	"TIM8_CR1");
	create_dword	(0X40010404);
	set_name	(0X40010404,	"TIM8_CR2");
	create_dword	(0X40010408);
	set_name	(0X40010408,	"TIM8_SMCR");
	create_dword	(0X4001040C);
	set_name	(0X4001040C,	"TIM8_DIER");
	create_dword	(0X40010410);
	set_name	(0X40010410,	"TIM8_SR");
	create_dword	(0X40010414);
	set_name	(0X40010414,	"TIM8_EGR");
	create_dword	(0X40010418);
	set_name	(0X40010418,	"TIM8_CCMR1");
	create_dword	(0X4001041C);
	set_name	(0X4001041C,	"TIM8_CCMR2");
	create_dword	(0X40010420);
	set_name	(0X40010420,	"TIM8_CCER");
	create_dword	(0X40010424);
	set_name	(0X40010424,	"TIM8_CNT");
	create_dword	(0X40010428);
	set_name	(0X40010428,	"TIM8_PSC");
	create_dword	(0X4001042C);
	set_name	(0X4001042C,	"TIM8_ARR");
	create_dword	(0X40010430);
	set_name	(0X40010430,	"TIM8_RCR");
	create_dword	(0X40010434);
	set_name	(0X40010434,	"TIM8_CCR1");
	create_dword	(0X40010438);
	set_name	(0X40010438,	"TIM8_CCR2");
	create_dword	(0X4001043C);
	set_name	(0X4001043C,	"TIM8_CCR3");
	create_dword	(0X40010440);
	set_name	(0X40010440,	"TIM8_CCR4");
	create_dword	(0X40010444);
	set_name	(0X40010444,	"TIM8_BDTR");
	create_dword	(0X40010448);
	set_name	(0X40010448,	"TIM8_DCR");
	create_dword	(0X4001044C);
	set_name	(0X4001044C,	"TIM8_DMAR");
	create_dword	(0X40011000);
	set_name	(0X40011000,	"USART1_SR");
	create_dword	(0X40011004);
	set_name	(0X40011004,	"USART1_DR");
	create_dword	(0X40011008);
	set_name	(0X40011008,	"USART1_BRR");
	create_dword	(0X4001100C);
	set_name	(0X4001100C,	"USART1_CR1");
	create_dword	(0X40011010);
	set_name	(0X40011010,	"USART1_CR2");
	create_dword	(0X40011014);
	set_name	(0X40011014,	"USART1_CR3");
	create_dword	(0X40011018);
	set_name	(0X40011018,	"USART1_GTPR");
	create_dword	(0X40011400);
	set_name	(0X40011400,	"USART6_SR");
	create_dword	(0X40011404);
	set_name	(0X40011404,	"USART6_DR");
	create_dword	(0X40011408);
	set_name	(0X40011408,	"USART6_BRR");
	create_dword	(0X4001140C);
	set_name	(0X4001140C,	"USART6_CR1");
	create_dword	(0X40011410);
	set_name	(0X40011410,	"USART6_CR2");
	create_dword	(0X40011414);
	set_name	(0X40011414,	"USART6_CR3");
	create_dword	(0X40011418);
	set_name	(0X40011418,	"USART6_GTPR");
	create_dword	(0X40012000);
	set_name	(0X40012000,	"ADC1_SR");
	create_dword	(0X40012004);
	set_name	(0X40012004,	"ADC1_CR1");
	create_dword	(0X40012008);
	set_name	(0X40012008,	"ADC1_CR2");
	create_dword	(0X4001200C);
	set_name	(0X4001200C,	"ADC1_SMPR1");
	create_dword	(0X40012010);
	set_name	(0X40012010,	"ADC1_SMPR2");
	create_dword	(0X40012014);
	set_name	(0X40012014,	"ADC1_JOFR1");
	create_dword	(0X40012018);
	set_name	(0X40012018,	"ADC1_JOFR2");
	create_dword	(0X4001201C);
	set_name	(0X4001201C,	"ADC1_JOFR3");
	create_dword	(0X40012020);
	set_name	(0X40012020,	"ADC1_JOFR4");
	create_dword	(0X40012024);
	set_name	(0X40012024,	"ADC1_HTR");
	create_dword	(0X40012028);
	set_name	(0X40012028,	"ADC1_LTR");
	create_dword	(0X4001202C);
	set_name	(0X4001202C,	"ADC1_SQR1");
	create_dword	(0X40012030);
	set_name	(0X40012030,	"ADC1_SQR2");
	create_dword	(0X40012034);
	set_name	(0X40012034,	"ADC1_SQR3");
	create_dword	(0X40012038);
	set_name	(0X40012038,	"ADC1_JSQR");
	create_dword	(0X4001203C);
	set_name	(0X4001203C,	"ADC1_JDR1");
	create_dword	(0X40012040);
	set_name	(0X40012040,	"ADC1_JDR2");
	create_dword	(0X40012044);
	set_name	(0X40012044,	"ADC1_JDR3");
	create_dword	(0X40012048);
	set_name	(0X40012048,	"ADC1_JDR4");
	create_dword	(0X4001204C);
	set_name	(0X4001204C,	"ADC1_DR");
	create_dword	(0X40012100);
	set_name	(0X40012100,	"ADC2_SR");
	create_dword	(0X40012104);
	set_name	(0X40012104,	"ADC2_CR1");
	create_dword	(0X40012108);
	set_name	(0X40012108,	"ADC2_CR2");
	create_dword	(0X4001210C);
	set_name	(0X4001210C,	"ADC2_SMPR1");
	create_dword	(0X40012110);
	set_name	(0X40012110,	"ADC2_SMPR2");
	create_dword	(0X40012114);
	set_name	(0X40012114,	"ADC2_JOFR1");
	create_dword	(0X40012118);
	set_name	(0X40012118,	"ADC2_JOFR2");
	create_dword	(0X4001211C);
	set_name	(0X4001211C,	"ADC2_JOFR3");
	create_dword	(0X40012120);
	set_name	(0X40012120,	"ADC2_JOFR4");
	create_dword	(0X40012124);
	set_name	(0X40012124,	"ADC2_HTR");
	create_dword	(0X40012128);
	set_name	(0X40012128,	"ADC2_LTR");
	create_dword	(0X4001212C);
	set_name	(0X4001212C,	"ADC2_SQR1");
	create_dword	(0X40012130);
	set_name	(0X40012130,	"ADC2_SQR2");
	create_dword	(0X40012134);
	set_name	(0X40012134,	"ADC2_SQR3");
	create_dword	(0X40012138);
	set_name	(0X40012138,	"ADC2_JSQR");
	create_dword	(0X4001213C);
	set_name	(0X4001213C,	"ADC2_JDR1");
	create_dword	(0X40012140);
	set_name	(0X40012140,	"ADC2_JDR2");
	create_dword	(0X40012144);
	set_name	(0X40012144,	"ADC2_JDR3");
	create_dword	(0X40012148);
	set_name	(0X40012148,	"ADC2_JDR4");
	create_dword	(0X4001214C);
	set_name	(0X4001214C,	"ADC2_DR");
	create_dword	(0X40012200);
	set_name	(0X40012200,	"ADC3_SR");
	create_dword	(0X40012204);
	set_name	(0X40012204,	"ADC3_CR1");
	create_dword	(0X40012208);
	set_name	(0X40012208,	"ADC3_CR2");
	create_dword	(0X4001220C);
	set_name	(0X4001220C,	"ADC3_SMPR1");
	create_dword	(0X40012210);
	set_name	(0X40012210,	"ADC3_SMPR2");
	create_dword	(0X40012214);
	set_name	(0X40012214,	"ADC3_JOFR1");
	create_dword	(0X40012218);
	set_name	(0X40012218,	"ADC3_JOFR2");
	create_dword	(0X4001221C);
	set_name	(0X4001221C,	"ADC3_JOFR3");
	create_dword	(0X40012220);
	set_name	(0X40012220,	"ADC3_JOFR4");
	create_dword	(0X40012224);
	set_name	(0X40012224,	"ADC3_HTR");
	create_dword	(0X40012228);
	set_name	(0X40012228,	"ADC3_LTR");
	create_dword	(0X4001222C);
	set_name	(0X4001222C,	"ADC3_SQR1");
	create_dword	(0X40012230);
	set_name	(0X40012230,	"ADC3_SQR2");
	create_dword	(0X40012234);
	set_name	(0X40012234,	"ADC3_SQR3");
	create_dword	(0X40012238);
	set_name	(0X40012238,	"ADC3_JSQR");
	create_dword	(0X4001223C);
	set_name	(0X4001223C,	"ADC3_JDR1");
	create_dword	(0X40012240);
	set_name	(0X40012240,	"ADC3_JDR2");
	create_dword	(0X40012244);
	set_name	(0X40012244,	"ADC3_JDR3");
	create_dword	(0X40012248);
	set_name	(0X40012248,	"ADC3_JDR4");
	create_dword	(0X4001224C);
	set_name	(0X4001224C,	"ADC3_DR");
	create_dword	(0X40012300);
	set_name	(0X40012300,	"ADC_CSR");
	create_dword	(0X40012304);
	set_name	(0X40012304,	"ADC_CCR");
	create_dword	(0X40012308);
	set_name	(0X40012308,	"ADC_CDR");
	create_dword	(0X40012C00);
	set_name	(0X40012C00,	"SDIO_POWER");
	create_dword	(0X40012C04);
	set_name	(0X40012C04,	"SDIO_CLKCR");
	create_dword	(0X40012C08);
	set_name	(0X40012C08,	"SDIO_ARG");
	create_dword	(0X40012C0C);
	set_name	(0X40012C0C,	"SDIO_CMD");
	create_dword	(0X40012C10);
	set_name	(0X40012C10,	"SDIO_RESPCMD");
	create_dword	(0X40012C14);
	set_name	(0X40012C14,	"SDIO_RESP1");
	create_dword	(0X40012C18);
	set_name	(0X40012C18,	"SDIO_RESP2");
	create_dword	(0X40012C1C);
	set_name	(0X40012C1C,	"SDIO_RESP3");
	create_dword	(0X40012C20);
	set_name	(0X40012C20,	"SDIO_RESP4");
	create_dword	(0X40012C24);
	set_name	(0X40012C24,	"SDIO_DTIMER");
	create_dword	(0X40012C28);
	set_name	(0X40012C28,	"SDIO_DLEN");
	create_dword	(0X40012C2C);
	set_name	(0X40012C2C,	"SDIO_DCTRL");
	create_dword	(0X40012C30);
	set_name	(0X40012C30,	"SDIO_DCOUNT");
	create_dword	(0X40012C34);
	set_name	(0X40012C34,	"SDIO_STA");
	create_dword	(0X40012C38);
	set_name	(0X40012C38,	"SDIO_ICR");
	create_dword	(0X40012C3C);
	set_name	(0X40012C3C,	"SDIO_MASK");
	create_dword	(0X40012C48);
	set_name	(0X40012C48,	"SDIO_FIFOCNT");
	create_dword	(0X40012C80);
	set_name	(0X40012C80,	"SDIO_FIFO");
	create_dword	(0X40013000);
	set_name	(0X40013000,	"SPI1_CR1");
	create_dword	(0X40013004);
	set_name	(0X40013004,	"SPI1_CR2");
	create_dword	(0X40013008);
	set_name	(0X40013008,	"SPI1_SR");
	create_dword	(0X4001300C);
	set_name	(0X4001300C,	"SPI1_DR");
	create_dword	(0X40013010);
	set_name	(0X40013010,	"SPI1_CRCPR");
	create_dword	(0X40013014);
	set_name	(0X40013014,	"SPI1_RXCRCR");
	create_dword	(0X40013018);
	set_name	(0X40013018,	"SPI1_TXCRCR");
	create_dword	(0X4001301C);
	set_name	(0X4001301C,	"SPI1_I2SCFGR");
	create_dword	(0X40013800);
	set_name	(0X40013800,	"SYSCFG_MEMRMP");
	create_dword	(0X40013804);
	set_name	(0X40013804,	"SYSCFG_PMC");
	create_dword	(0X40013808);
	set_name	(0X40013808,	"SYSCFG_EXTICR1");
	create_dword	(0X4001380C);
	set_name	(0X4001380C,	"SYSCFG_EXTICR2");
	create_dword	(0X40013810);
	set_name	(0X40013810,	"SYSCFG_EXTICR3");
	create_dword	(0X40013814);
	set_name	(0X40013814,	"SYSCFG_EXTICR4");
	create_dword	(0X40013820);
	set_name	(0X40013820,	"SYSCFG_CMPCR");
	create_dword	(0X40013C00);
	set_name	(0X40013C00,	"EXTI_IMR");
	create_dword	(0X40013C04);
	set_name	(0X40013C04,	"EXTI_EMR");
	create_dword	(0X40013C08);
	set_name	(0X40013C08,	"EXTI_RTSR");
	create_dword	(0X40013C0C);
	set_name	(0X40013C0C,	"EXTI_FTSR");
	create_dword	(0X40013C10);
	set_name	(0X40013C10,	"EXTI_SWIER");
	create_dword	(0X40013C14);
	set_name	(0X40013C14,	"EXTI_PR");
	create_dword	(0X40014000);
	set_name	(0X40014000,	"TIM9_CR1");
	create_dword	(0X40014004);
	set_name	(0X40014004,	"TIM9_CR2");
	create_dword	(0X40014008);
	set_name	(0X40014008,	"TIM9_SMCR");
	create_dword	(0X4001400C);
	set_name	(0X4001400C,	"TIM9_DIER");
	create_dword	(0X40014010);
	set_name	(0X40014010,	"TIM9_SR");
	create_dword	(0X40014014);
	set_name	(0X40014014,	"TIM9_EGR");
	create_dword	(0X40014018);
	set_name	(0X40014018,	"TIM9_CCMR1");
	create_dword	(0X40014020);
	set_name	(0X40014020,	"TIM9_CCER");
	create_dword	(0X40014024);
	set_name	(0X40014024,	"TIM9_CNT");
	create_dword	(0X40014028);
	set_name	(0X40014028,	"TIM9_PSC");
	create_dword	(0X4001402C);
	set_name	(0X4001402C,	"TIM9_ARR");
	create_dword	(0X40014034);
	set_name	(0X40014034,	"TIM9_CCR1");
	create_dword	(0X40014038);
	set_name	(0X40014038,	"TIM9_CCR2");
	create_dword	(0X40014400);
	set_name	(0X40014400,	"TIM10_CR1");
	create_dword	(0X4001440C);
	set_name	(0X4001440C,	"TIM10_DIER");
	create_dword	(0X40014410);
	set_name	(0X40014410,	"TIM10_SR");
	create_dword	(0X40014414);
	set_name	(0X40014414,	"TIM10_EGR");
	create_dword	(0X40014418);
	set_name	(0X40014418,	"TIM10_CCMR1");
	create_dword	(0X40014420);
	set_name	(0X40014420,	"TIM10_CCER");
	create_dword	(0X40014424);
	set_name	(0X40014424,	"TIM10_CNT");
	create_dword	(0X40014428);
	set_name	(0X40014428,	"TIM10_PSC");
	create_dword	(0X4001442C);
	set_name	(0X4001442C,	"TIM10_ARR");
	create_dword	(0X40014434);
	set_name	(0X40014434,	"TIM10_CCR1");
	create_dword	(0X40014800);
	set_name	(0X40014800,	"TIM11_CR1");
	create_dword	(0X4001480C);
	set_name	(0X4001480C,	"TIM11_DIER");
	create_dword	(0X40014810);
	set_name	(0X40014810,	"TIM11_SR");
	create_dword	(0X40014814);
	set_name	(0X40014814,	"TIM11_EGR");
	create_dword	(0X40014818);
	set_name	(0X40014818,	"TIM11_CCMR1");
	create_dword	(0X40014820);
	set_name	(0X40014820,	"TIM11_CCER");
	create_dword	(0X40014824);
	set_name	(0X40014824,	"TIM11_CNT");
	create_dword	(0X40014828);
	set_name	(0X40014828,	"TIM11_PSC");
	create_dword	(0X4001482C);
	set_name	(0X4001482C,	"TIM11_ARR");
	create_dword	(0X40014834);
	set_name	(0X40014834,	"TIM11_CCR1");
	create_dword	(0X40014850);
	set_name	(0X40014850,	"TIM11_OR");
	create_dword	(0X40020000);
	set_name	(0X40020000,	"GPIOA_MODER");
	create_dword	(0X40020004);
	set_name	(0X40020004,	"GPIOA_OTYPER");
	create_dword	(0X40020008);
	set_name	(0X40020008,	"GPIOA_OSPEEDR");
	create_dword	(0X4002000C);
	set_name	(0X4002000C,	"GPIOA_PUPDR");
	create_dword	(0X40020010);
	set_name	(0X40020010,	"GPIOA_IDR");
	create_dword	(0X40020014);
	set_name	(0X40020014,	"GPIOA_ODR");
	create_dword	(0X40020018);
	set_name	(0X40020018,	"GPIOA_BSRR");
	create_dword	(0X4002001C);
	set_name	(0X4002001C,	"GPIOA_LCKR");
	create_dword	(0X40020020);
	set_name	(0X40020020,	"GPIOA_AFRL");
	create_dword	(0X40020024);
	set_name	(0X40020024,	"GPIOA_AFRH");
	create_dword	(0X40020400);
	set_name	(0X40020400,	"GPIOB_MODER");
	create_dword	(0X40020404);
	set_name	(0X40020404,	"GPIOB_OTYPER");
	create_dword	(0X40020408);
	set_name	(0X40020408,	"GPIOB_OSPEEDR");
	create_dword	(0X4002040C);
	set_name	(0X4002040C,	"GPIOB_PUPDR");
	create_dword	(0X40020410);
	set_name	(0X40020410,	"GPIOB_IDR");
	create_dword	(0X40020414);
	set_name	(0X40020414,	"GPIOB_ODR");
	create_dword	(0X40020418);
	set_name	(0X40020418,	"GPIOB_BSRR");
	create_dword	(0X4002041C);
	set_name	(0X4002041C,	"GPIOB_LCKR");
	create_dword	(0X40020420);
	set_name	(0X40020420,	"GPIOB_AFRL");
	create_dword	(0X40020424);
	set_name	(0X40020424,	"GPIOB_AFRH");
	create_dword	(0X40020800);
	set_name	(0X40020800,	"GPIOC_MODER");
	create_dword	(0X40020804);
	set_name	(0X40020804,	"GPIOC_OTYPER");
	create_dword	(0X40020808);
	set_name	(0X40020808,	"GPIOC_OSPEEDR");
	create_dword	(0X4002080C);
	set_name	(0X4002080C,	"GPIOC_PUPDR");
	create_dword	(0X40020810);
	set_name	(0X40020810,	"GPIOC_IDR");
	create_dword	(0X40020814);
	set_name	(0X40020814,	"GPIOC_ODR");
	create_dword	(0X40020818);
	set_name	(0X40020818,	"GPIOC_BSRR");
	create_dword	(0X4002081C);
	set_name	(0X4002081C,	"GPIOC_LCKR");
	create_dword	(0X40020820);
	set_name	(0X40020820,	"GPIOC_AFRL");
	create_dword	(0X40020824);
	set_name	(0X40020824,	"GPIOC_AFRH");
	create_dword	(0X40020C00);
	set_name	(0X40020C00,	"GPIOD_MODER");
	create_dword	(0X40020C04);
	set_name	(0X40020C04,	"GPIOD_OTYPER");
	create_dword	(0X40020C08);
	set_name	(0X40020C08,	"GPIOD_OSPEEDR");
	create_dword	(0X40020C0C);
	set_name	(0X40020C0C,	"GPIOD_PUPDR");
	create_dword	(0X40020C10);
	set_name	(0X40020C10,	"GPIOD_IDR");
	create_dword	(0X40020C14);
	set_name	(0X40020C14,	"GPIOD_ODR");
	create_dword	(0X40020C18);
	set_name	(0X40020C18,	"GPIOD_BSRR");
	create_dword	(0X40020C1C);
	set_name	(0X40020C1C,	"GPIOD_LCKR");
	create_dword	(0X40020C20);
	set_name	(0X40020C20,	"GPIOD_AFRL");
	create_dword	(0X40020C24);
	set_name	(0X40020C24,	"GPIOD_AFRH");
	create_dword	(0X40021000);
	set_name	(0X40021000,	"GPIOE_MODER");
	create_dword	(0X40021004);
	set_name	(0X40021004,	"GPIOE_OTYPER");
	create_dword	(0X40021008);
	set_name	(0X40021008,	"GPIOE_OSPEEDR");
	create_dword	(0X4002100C);
	set_name	(0X4002100C,	"GPIOE_PUPDR");
	create_dword	(0X40021010);
	set_name	(0X40021010,	"GPIOE_IDR");
	create_dword	(0X40021014);
	set_name	(0X40021014,	"GPIOE_ODR");
	create_dword	(0X40021018);
	set_name	(0X40021018,	"GPIOE_BSRR");
	create_dword	(0X4002101C);
	set_name	(0X4002101C,	"GPIOE_LCKR");
	create_dword	(0X40021020);
	set_name	(0X40021020,	"GPIOE_AFRL");
	create_dword	(0X40021024);
	set_name	(0X40021024,	"GPIOE_AFRH");
	create_dword	(0X40021400);
	set_name	(0X40021400,	"GPIOF_MODER");
	create_dword	(0X40021404);
	set_name	(0X40021404,	"GPIOF_OTYPER");
	create_dword	(0X40021408);
	set_name	(0X40021408,	"GPIOF_OSPEEDR");
	create_dword	(0X4002140C);
	set_name	(0X4002140C,	"GPIOF_PUPDR");
	create_dword	(0X40021410);
	set_name	(0X40021410,	"GPIOF_IDR");
	create_dword	(0X40021414);
	set_name	(0X40021414,	"GPIOF_ODR");
	create_dword	(0X40021418);
	set_name	(0X40021418,	"GPIOF_BSRR");
	create_dword	(0X4002141C);
	set_name	(0X4002141C,	"GPIOF_LCKR");
	create_dword	(0X40021420);
	set_name	(0X40021420,	"GPIOF_AFRL");
	create_dword	(0X40021424);
	set_name	(0X40021424,	"GPIOF_AFRH");
	create_dword	(0X40021800);
	set_name	(0X40021800,	"GPIOG_MODER");
	create_dword	(0X40021804);
	set_name	(0X40021804,	"GPIOG_OTYPER");
	create_dword	(0X40021808);
	set_name	(0X40021808,	"GPIOG_OSPEEDR");
	create_dword	(0X4002180C);
	set_name	(0X4002180C,	"GPIOG_PUPDR");
	create_dword	(0X40021810);
	set_name	(0X40021810,	"GPIOG_IDR");
	create_dword	(0X40021814);
	set_name	(0X40021814,	"GPIOG_ODR");
	create_dword	(0X40021818);
	set_name	(0X40021818,	"GPIOG_BSRR");
	create_dword	(0X4002181C);
	set_name	(0X4002181C,	"GPIOG_LCKR");
	create_dword	(0X40021820);
	set_name	(0X40021820,	"GPIOG_AFRL");
	create_dword	(0X40021824);
	set_name	(0X40021824,	"GPIOG_AFRH");
	create_dword	(0X40021C00);
	set_name	(0X40021C00,	"GPIOH_MODER");
	create_dword	(0X40021C04);
	set_name	(0X40021C04,	"GPIOH_OTYPER");
	create_dword	(0X40021C08);
	set_name	(0X40021C08,	"GPIOH_OSPEEDR");
	create_dword	(0X40021C0C);
	set_name	(0X40021C0C,	"GPIOH_PUPDR");
	create_dword	(0X40021C10);
	set_name	(0X40021C10,	"GPIOH_IDR");
	create_dword	(0X40021C14);
	set_name	(0X40021C14,	"GPIOH_ODR");
	create_dword	(0X40021C18);
	set_name	(0X40021C18,	"GPIOH_BSRR");
	create_dword	(0X40021C1C);
	set_name	(0X40021C1C,	"GPIOH_LCKR");
	create_dword	(0X40021C20);
	set_name	(0X40021C20,	"GPIOH_AFRL");
	create_dword	(0X40021C24);
	set_name	(0X40021C24,	"GPIOH_AFRH");
	create_dword	(0X40022000);
	set_name	(0X40022000,	"GPIOI_MODER");
	create_dword	(0X40022004);
	set_name	(0X40022004,	"GPIOI_OTYPER");
	create_dword	(0X40022008);
	set_name	(0X40022008,	"GPIOI_OSPEEDR");
	create_dword	(0X4002200C);
	set_name	(0X4002200C,	"GPIOI_PUPDR");
	create_dword	(0X40022010);
	set_name	(0X40022010,	"GPIOI_IDR");
	create_dword	(0X40022014);
	set_name	(0X40022014,	"GPIOI_ODR");
	create_dword	(0X40022018);
	set_name	(0X40022018,	"GPIOI_BSRR");
	create_dword	(0X4002201C);
	set_name	(0X4002201C,	"GPIOI_LCKR");
	create_dword	(0X40022020);
	set_name	(0X40022020,	"GPIOI_AFRL");
	create_dword	(0X40022024);
	set_name	(0X40022024,	"GPIOI_AFRH");
	create_dword	(0X40023000);
	set_name	(0X40023000,	"CRC_DR");
	create_dword	(0X40023004);
	set_name	(0X40023004,	"CRC_IDR");
	create_dword	(0X40023008);
	set_name	(0X40023008,	"CRC_CR");
	create_dword	(0X40023800);
	set_name	(0X40023800,	"RCC_CR");
	create_dword	(0X40023804);
	set_name	(0X40023804,	"RCC_PLLCFGR");
	create_dword	(0X40023808);
	set_name	(0X40023808,	"RCC_CFGR");
	create_dword	(0X4002380C);
	set_name	(0X4002380C,	"RCC_CIR");
	create_dword	(0X40023810);
	set_name	(0X40023810,	"RCC_AHB1RSTR");
	create_dword	(0X40023814);
	set_name	(0X40023814,	"RCC_AHB2RSTR");
	create_dword	(0X40023818);
	set_name	(0X40023818,	"RCC_AHB3RSTR");
	create_dword	(0X40023820);
	set_name	(0X40023820,	"RCC_APB1RSTR");
	create_dword	(0X40023824);
	set_name	(0X40023824,	"RCC_APB2RSTR");
	create_dword	(0X40023830);
	set_name	(0X40023830,	"RCC_AHB1ENR");
	create_dword	(0X40023834);
	set_name	(0X40023834,	"RCC_AHB2ENR");
	create_dword	(0X40023838);
	set_name	(0X40023838,	"RCC_AHB3ENR");
	create_dword	(0X40023840);
	set_name	(0X40023840,	"RCC_APB1ENR");
	create_dword	(0X40023844);
	set_name	(0X40023844,	"RCC_APB2ENR");
	create_dword	(0X40023850);
	set_name	(0X40023850,	"RCC_AHB1LPENR");
	create_dword	(0X40023854);
	set_name	(0X40023854,	"RCC_AHB2LPENR");
	create_dword	(0X40023858);
	set_name	(0X40023858,	"RCC_AHB3LPENR");
	create_dword	(0X40023860);
	set_name	(0X40023860,	"RCC_APB1LPENR");
	create_dword	(0X40023864);
	set_name	(0X40023864,	"RCC_APB2LPENR");
	create_dword	(0X40023870);
	set_name	(0X40023870,	"RCC_BDCR");
	create_dword	(0X40023874);
	set_name	(0X40023874,	"RCC_CSR");
	create_dword	(0X40023880);
	set_name	(0X40023880,	"RCC_SSCGR");
	create_dword	(0X40023884);
	set_name	(0X40023884,	"RCC_PLLI2SCFGR");
	create_dword	(0X40023C00);
	set_name	(0X40023C00,	"FLASH_ACR");
	create_dword	(0X40023C04);
	set_name	(0X40023C04,	"FLASH_KEYR");
	create_dword	(0X40023C08);
	set_name	(0X40023C08,	"FLASH_OPTKEYR");
	create_dword	(0X40023C0C);
	set_name	(0X40023C0C,	"FLASH_SR");
	create_dword	(0X40023C10);
	set_name	(0X40023C10,	"FLASH_CR");
	create_dword	(0X40023C14);
	set_name	(0X40023C14,	"FLASH_OPTCR");
	create_dword	(0X40026000);
	set_name	(0X40026000,	"DMA1_LISR");
	create_dword	(0X40026004);
	set_name	(0X40026004,	"DMA1_HISR");
	create_dword	(0X40026008);
	set_name	(0X40026008,	"DMA1_LIFCR");
	create_dword	(0X4002600C);
	set_name	(0X4002600C,	"DMA1_HIFCR");
	create_dword	(0X40026010);
	set_name	(0X40026010,	"DMA1_S0CR");
	create_dword	(0X40026014);
	set_name	(0X40026014,	"DMA1_S0NDTR");
	create_dword	(0X40026018);
	set_name	(0X40026018,	"DMA1_S0PAR");
	create_dword	(0X4002601C);
	set_name	(0X4002601C,	"DMA1_S0M0AR");
	create_dword	(0X40026020);
	set_name	(0X40026020,	"DMA1_S0M1AR");
	create_dword	(0X40026024);
	set_name	(0X40026024,	"DMA1_S0FCR");
	create_dword	(0X40026028);
	set_name	(0X40026028,	"DMA1_S1CR");
	create_dword	(0X4002602C);
	set_name	(0X4002602C,	"DMA1_S1NDTR");
	create_dword	(0X40026030);
	set_name	(0X40026030,	"DMA1_S1PAR");
	create_dword	(0X40026034);
	set_name	(0X40026034,	"DMA1_S1M0AR");
	create_dword	(0X40026038);
	set_name	(0X40026038,	"DMA1_S1M1AR");
	create_dword	(0X4002603C);
	set_name	(0X4002603C,	"DMA1_S1FCR");
	create_dword	(0X40026040);
	set_name	(0X40026040,	"DMA1_S2CR");
	create_dword	(0X40026044);
	set_name	(0X40026044,	"DMA1_S2NDTR");
	create_dword	(0X40026048);
	set_name	(0X40026048,	"DMA1_S2PAR");
	create_dword	(0X4002604C);
	set_name	(0X4002604C,	"DMA1_S2M0AR");
	create_dword	(0X40026050);
	set_name	(0X40026050,	"DMA1_S2M1AR");
	create_dword	(0X40026054);
	set_name	(0X40026054,	"DMA1_S2FCR");
	create_dword	(0X40026058);
	set_name	(0X40026058,	"DMA1_S3CR");
	create_dword	(0X4002605C);
	set_name	(0X4002605C,	"DMA1_S3NDTR");
	create_dword	(0X40026060);
	set_name	(0X40026060,	"DMA1_S3PAR");
	create_dword	(0X40026064);
	set_name	(0X40026064,	"DMA1_S3M0AR");
	create_dword	(0X40026068);
	set_name	(0X40026068,	"DMA1_S3M1AR");
	create_dword	(0X4002606C);
	set_name	(0X4002606C,	"DMA1_S3FCR");
	create_dword	(0X40026070);
	set_name	(0X40026070,	"DMA1_S4CR");
	create_dword	(0X40026074);
	set_name	(0X40026074,	"DMA1_S4NDTR");
	create_dword	(0X40026078);
	set_name	(0X40026078,	"DMA1_S4PAR");
	create_dword	(0X4002607C);
	set_name	(0X4002607C,	"DMA1_S4M0AR");
	create_dword	(0X40026080);
	set_name	(0X40026080,	"DMA1_S4M1AR");
	create_dword	(0X40026084);
	set_name	(0X40026084,	"DMA1_S4FCR");
	create_dword	(0X40026088);
	set_name	(0X40026088,	"DMA1_S5CR");
	create_dword	(0X4002608C);
	set_name	(0X4002608C,	"DMA1_S5NDTR");
	create_dword	(0X40026090);
	set_name	(0X40026090,	"DMA1_S5PAR");
	create_dword	(0X40026094);
	set_name	(0X40026094,	"DMA1_S5M0AR");
	create_dword	(0X40026098);
	set_name	(0X40026098,	"DMA1_S5M1AR");
	create_dword	(0X4002609C);
	set_name	(0X4002609C,	"DMA1_S5FCR");
	create_dword	(0X400260A0);
	set_name	(0X400260A0,	"DMA1_S6CR");
	create_dword	(0X400260A4);
	set_name	(0X400260A4,	"DMA1_S6NDTR");
	create_dword	(0X400260A8);
	set_name	(0X400260A8,	"DMA1_S6PAR");
	create_dword	(0X400260AC);
	set_name	(0X400260AC,	"DMA1_S6M0AR");
	create_dword	(0X400260B0);
	set_name	(0X400260B0,	"DMA1_S6M1AR");
	create_dword	(0X400260B4);
	set_name	(0X400260B4,	"DMA1_S6FCR");
	create_dword	(0X400260B8);
	set_name	(0X400260B8,	"DMA1_S7CR");
	create_dword	(0X400260BC);
	set_name	(0X400260BC,	"DMA1_S7NDTR");
	create_dword	(0X400260C0);
	set_name	(0X400260C0,	"DMA1_S7PAR");
	create_dword	(0X400260C4);
	set_name	(0X400260C4,	"DMA1_S7M0AR");
	create_dword	(0X400260C8);
	set_name	(0X400260C8,	"DMA1_S7M1AR");
	create_dword	(0X400260CC);
	set_name	(0X400260CC,	"DMA1_S7FCR");
	create_dword	(0X40026400);
	set_name	(0X40026400,	"DMA2_LISR");
	create_dword	(0X40026404);
	set_name	(0X40026404,	"DMA2_HISR");
	create_dword	(0X40026408);
	set_name	(0X40026408,	"DMA2_LIFCR");
	create_dword	(0X4002640C);
	set_name	(0X4002640C,	"DMA2_HIFCR");
	create_dword	(0X40026410);
	set_name	(0X40026410,	"DMA2_S0CR");
	create_dword	(0X40026414);
	set_name	(0X40026414,	"DMA2_S0NDTR");
	create_dword	(0X40026418);
	set_name	(0X40026418,	"DMA2_S0PAR");
	create_dword	(0X4002641C);
	set_name	(0X4002641C,	"DMA2_S0M0AR");
	create_dword	(0X40026420);
	set_name	(0X40026420,	"DMA2_S0M1AR");
	create_dword	(0X40026424);
	set_name	(0X40026424,	"DMA2_S0FCR");
	create_dword	(0X40026428);
	set_name	(0X40026428,	"DMA2_S1CR");
	create_dword	(0X4002642C);
	set_name	(0X4002642C,	"DMA2_S1NDTR");
	create_dword	(0X40026430);
	set_name	(0X40026430,	"DMA2_S1PAR");
	create_dword	(0X40026434);
	set_name	(0X40026434,	"DMA2_S1M0AR");
	create_dword	(0X40026438);
	set_name	(0X40026438,	"DMA2_S1M1AR");
	create_dword	(0X4002643C);
	set_name	(0X4002643C,	"DMA2_S1FCR");
	create_dword	(0X40026440);
	set_name	(0X40026440,	"DMA2_S2CR");
	create_dword	(0X40026444);
	set_name	(0X40026444,	"DMA2_S2NDTR");
	create_dword	(0X40026448);
	set_name	(0X40026448,	"DMA2_S2PAR");
	create_dword	(0X4002644C);
	set_name	(0X4002644C,	"DMA2_S2M0AR");
	create_dword	(0X40026450);
	set_name	(0X40026450,	"DMA2_S2M1AR");
	create_dword	(0X40026454);
	set_name	(0X40026454,	"DMA2_S2FCR");
	create_dword	(0X40026458);
	set_name	(0X40026458,	"DMA2_S3CR");
	create_dword	(0X4002645C);
	set_name	(0X4002645C,	"DMA2_S3NDTR");
	create_dword	(0X40026460);
	set_name	(0X40026460,	"DMA2_S3PAR");
	create_dword	(0X40026464);
	set_name	(0X40026464,	"DMA2_S3M0AR");
	create_dword	(0X40026468);
	set_name	(0X40026468,	"DMA2_S3M1AR");
	create_dword	(0X4002646C);
	set_name	(0X4002646C,	"DMA2_S3FCR");
	create_dword	(0X40026470);
	set_name	(0X40026470,	"DMA2_S4CR");
	create_dword	(0X40026474);
	set_name	(0X40026474,	"DMA2_S4NDTR");
	create_dword	(0X40026478);
	set_name	(0X40026478,	"DMA2_S4PAR");
	create_dword	(0X4002647C);
	set_name	(0X4002647C,	"DMA2_S4M0AR");
	create_dword	(0X40026480);
	set_name	(0X40026480,	"DMA2_S4M1AR");
	create_dword	(0X40026484);
	set_name	(0X40026484,	"DMA2_S4FCR");
	create_dword	(0X40026488);
	set_name	(0X40026488,	"DMA2_S5CR");
	create_dword	(0X4002648C);
	set_name	(0X4002648C,	"DMA2_S5NDTR");
	create_dword	(0X40026490);
	set_name	(0X40026490,	"DMA2_S5PAR");
	create_dword	(0X40026494);
	set_name	(0X40026494,	"DMA2_S5M0AR");
	create_dword	(0X40026498);
	set_name	(0X40026498,	"DMA2_S5M1AR");
	create_dword	(0X4002649C);
	set_name	(0X4002649C,	"DMA2_S5FCR");
	create_dword	(0X400264A0);
	set_name	(0X400264A0,	"DMA2_S6CR");
	create_dword	(0X400264A4);
	set_name	(0X400264A4,	"DMA2_S6NDTR");
	create_dword	(0X400264A8);
	set_name	(0X400264A8,	"DMA2_S6PAR");
	create_dword	(0X400264AC);
	set_name	(0X400264AC,	"DMA2_S6M0AR");
	create_dword	(0X400264B0);
	set_name	(0X400264B0,	"DMA2_S6M1AR");
	create_dword	(0X400264B4);
	set_name	(0X400264B4,	"DMA2_S6FCR");
	create_dword	(0X400264B8);
	set_name	(0X400264B8,	"DMA2_S7CR");
	create_dword	(0X400264BC);
	set_name	(0X400264BC,	"DMA2_S7NDTR");
	create_dword	(0X400264C0);
	set_name	(0X400264C0,	"DMA2_S7PAR");
	create_dword	(0X400264C4);
	set_name	(0X400264C4,	"DMA2_S7M0AR");
	create_dword	(0X400264C8);
	set_name	(0X400264C8,	"DMA2_S7M1AR");
	create_dword	(0X400264CC);
	set_name	(0X400264CC,	"DMA2_S7FCR");
	create_dword	(0X40028000);
	set_name	(0X40028000,	"ETH_MACCR");
	create_dword	(0X40028004);
	set_name	(0X40028004,	"ETH_MACFFR");
	create_dword	(0X40028008);
	set_name	(0X40028008,	"ETH_MACHTHR");
	create_dword	(0X4002800C);
	set_name	(0X4002800C,	"ETH_MACHTLR");
	create_dword	(0X40028010);
	set_name	(0X40028010,	"ETH_MACMIIAR");
	create_dword	(0X40028014);
	set_name	(0X40028014,	"ETH_MACMIIDR");
	create_dword	(0X40028018);
	set_name	(0X40028018,	"ETH_MACFCR");
	create_dword	(0X4002801C);
	set_name	(0X4002801C,	"ETH_MACVLANTR");
	create_dword	(0X40028028);
	set_name	(0X40028028,	"ETH_MACRWUFFR");
	create_dword	(0X4002802C);
	set_name	(0X4002802C,	"ETH_MACPMTCSR");
	create_dword	(0X40028034);
	set_name	(0X40028034,	"ETH_MACDBGR");
	create_dword	(0X40028038);
	set_name	(0X40028038,	"ETH_MACSR");
	create_dword	(0X4002803C);
	set_name	(0X4002803C,	"ETH_MACIMR");
	create_dword	(0X40028040);
	set_name	(0X40028040,	"ETH_MACA0HR");
	create_dword	(0X40028044);
	set_name	(0X40028044,	"ETH_MACA0LR");
	create_dword	(0X40028048);
	set_name	(0X40028048,	"ETH_MACA1HR");
	create_dword	(0X4002804C);
	set_name	(0X4002804C,	"ETH_MACA1LR");
	create_dword	(0X40028050);
	set_name	(0X40028050,	"ETH_MACA2HR");
	create_dword	(0X40028054);
	set_name	(0X40028054,	"ETH_MACA2LR");
	create_dword	(0X40028058);
	set_name	(0X40028058,	"ETH_MACA3HR");
	create_dword	(0X4002805C);
	set_name	(0X4002805C,	"ETH_MACA3LR");
	create_dword	(0X40028100);
	set_name	(0X40028100,	"ETH_MMCCR");
	create_dword	(0X40028104);
	set_name	(0X40028104,	"ETH_MMCRIR");
	create_dword	(0X40028108);
	set_name	(0X40028108,	"ETH_MMCTIR");
	create_dword	(0X4002810C);
	set_name	(0X4002810C,	"ETH_MMCRIMR");
	create_dword	(0X40028110);
	set_name	(0X40028110,	"ETH_MMCTIMR");
	create_dword	(0X4002814C);
	set_name	(0X4002814C,	"ETH_MMCTGFSCCR");
	create_dword	(0X40028150);
	set_name	(0X40028150,	"ETH_MMCTGFMSCCR");
	create_dword	(0X40028168);
	set_name	(0X40028168,	"ETH_MMCTGFCR");
	create_dword	(0X40028194);
	set_name	(0X40028194,	"ETH_MMCRFCECR");
	create_dword	(0X40028198);
	set_name	(0X40028198,	"ETH_MMCRFAECR");
	create_dword	(0X400281C4);
	set_name	(0X400281C4,	"ETH_MMCRGUFCR");
	create_dword	(0X40028700);
	set_name	(0X40028700,	"ETH_PTPTSCR");
	create_dword	(0X40028704);
	set_name	(0X40028704,	"ETH_PTPSSIR");
	create_dword	(0X40028708);
	set_name	(0X40028708,	"ETH_PTPTSHR");
	create_dword	(0X4002870C);
	set_name	(0X4002870C,	"ETH_PTPTSLR");
	create_dword	(0X40028710);
	set_name	(0X40028710,	"ETH_PTPTSHUR");
	create_dword	(0X40028714);
	set_name	(0X40028714,	"ETH_PTPTSLUR");
	create_dword	(0X40028718);
	set_name	(0X40028718,	"ETH_PTPTSAR");
	create_dword	(0X4002871C);
	set_name	(0X4002871C,	"ETH_PTPTTHR");
	create_dword	(0X40028720);
	set_name	(0X40028720,	"ETH_PTPTTLR");
	create_dword	(0X40028728);
	set_name	(0X40028728,	"ETH_PTPTSSR");
	create_dword	(0X4002872C);
	set_name	(0X4002872C,	"ETH_PTPPPSCR");
	create_dword	(0X40029000);
	set_name	(0X40029000,	"ETH_DMABMR");
	create_dword	(0X40029004);
	set_name	(0X40029004,	"ETH_DMATPDR");
	create_dword	(0X40029008);
	set_name	(0X40029008,	"ETH_DMARPDR");
	create_dword	(0X4002900C);
	set_name	(0X4002900C,	"ETH_DMARDLAR");
	create_dword	(0X40029010);
	set_name	(0X40029010,	"ETH_DMATDLAR");
	create_dword	(0X40029014);
	set_name	(0X40029014,	"ETH_DMATSR");
	create_dword	(0X40029018);
	set_name	(0X40029018,	"ETH_DMAOMR");
	create_dword	(0X4002901C);
	set_name	(0X4002901C,	"ETH_DMAIER");
	create_dword	(0X40029020);
	set_name	(0X40029020,	"ETH_DMAMFBOCR");
	create_dword	(0X40029024);
	set_name	(0X40029024,	"ETH_DMARSWTR");
	create_dword	(0X40029048);
	set_name	(0X40029048,	"ETH_DMACHTDR");
	create_dword	(0X4002904C);
	set_name	(0X4002904C,	"ETH_DMACHRDR");
	create_dword	(0X40029050);
	set_name	(0X40029050,	"ETH_DMACHTBAR");
	create_dword	(0X40029054);
	set_name	(0X40029054,	"ETH_DMACHRBAR");
	create_dword	(0X40040000);
	set_name	(0X40040000,	"OTG_HS_GOTGCTL");
	create_dword	(0X40040004);
	set_name	(0X40040004,	"OTG_HS_GOTGINT");
	create_dword	(0X40040008);
	set_name	(0X40040008,	"OTG_HS_GAHBCFG");
	create_dword	(0X4004000C);
	set_name	(0X4004000C,	"OTG_HS_GUSBCFG");
	create_dword	(0X40040010);
	set_name	(0X40040010,	"OTG_HS_GRSTCTL");
	create_dword	(0X40040014);
	set_name	(0X40040014,	"OTG_HS_GINTSTS");
	create_dword	(0X40040018);
	set_name	(0X40040018,	"OTG_HS_GINTMSK");
	create_dword	(0X4004001C);
	set_name	(0X4004001C,	"OTG_HS_GRXSTSR");
	create_dword	(0X40040020);
	set_name	(0X40040020,	"OTG_HS_GRXSTSP");
	create_dword	(0X40040024);
	set_name	(0X40040024,	"OTG_HS_GRXFSIZ");
	create_dword	(0X40040028);
	set_name	(0X40040028,	"OTG_HS_TX0FSIZ");
	create_dword	(0X4004002C);
	set_name	(0X4004002C,	"OTG_HS_GNPTXSTS");
	create_dword	(0X40040030);
	set_name	(0X40040030,	"OTG_HS_GI2CCTL");
	create_dword	(0X40040038);
	set_name	(0X40040038,	"OTG_HS_GCCFG");
	create_dword	(0X4004003C);
	set_name	(0X4004003C,	"OTG_HS_CID");
	create_dword	(0X40040100);
	set_name	(0X40040100,	"OTG_HS_HPTXFSIZ");
	create_dword	(0X40040104);
	set_name	(0X40040104,	"OTG_HS_DIEPTXF1");
	create_dword	(0X40040108);
	set_name	(0X40040108,	"OTG_HS_DIEPTXF2");
	create_dword	(0X4004010C);
	set_name	(0X4004010C,	"OTG_HS_DIEPTXF3");
	create_dword	(0X40040110);
	set_name	(0X40040110,	"OTG_HS_DIEPTXF4");
	create_dword	(0X40040114);
	set_name	(0X40040114,	"OTG_HS_DIEPTXF5");
	create_dword	(0X40040118);
	set_name	(0X40040118,	"OTG_HS_DIEPTXF6");
	create_dword	(0X4004011C);
	set_name	(0X4004011C,	"OTG_HS_DIEPTXF7");
	create_dword	(0X40040400);
	set_name	(0X40040400,	"OTG_HS_HCFG");
	create_dword	(0X40040404);
	set_name	(0X40040404,	"OTG_HS_HFIR");
	create_dword	(0X40040408);
	set_name	(0X40040408,	"OTG_HS_HFNUM");
	create_dword	(0X40040410);
	set_name	(0X40040410,	"OTG_HS_HPTXSTS");
	create_dword	(0X40040414);
	set_name	(0X40040414,	"OTG_HS_HAINT");
	create_dword	(0X40040418);
	set_name	(0X40040418,	"OTG_HS_HAINTMSK");
	create_dword	(0X40040440);
	set_name	(0X40040440,	"OTG_HS_HPRT");
	create_dword	(0X40040500);
	set_name	(0X40040500,	"OTG_HS_HCCHAR0");
	create_dword	(0X40040504);
	set_name	(0X40040504,	"OTG_HS_HCSPLT0");
	create_dword	(0X40040508);
	set_name	(0X40040508,	"OTG_HS_HCINT0");
	create_dword	(0X4004050C);
	set_name	(0X4004050C,	"OTG_HS_HCINTMSK0");
	create_dword	(0X40040510);
	set_name	(0X40040510,	"OTG_HS_HCTSIZ0");
	create_dword	(0X40040514);
	set_name	(0X40040514,	"OTG_HS_HCDMA0");
	create_dword	(0X40040520);
	set_name	(0X40040520,	"OTG_HS_HCCHAR1");
	create_dword	(0X40040524);
	set_name	(0X40040524,	"OTG_HS_HCSPLT1");
	create_dword	(0X40040528);
	set_name	(0X40040528,	"OTG_HS_HCINT1");
	create_dword	(0X4004052C);
	set_name	(0X4004052C,	"OTG_HS_HCINTMSK1");
	create_dword	(0X40040530);
	set_name	(0X40040530,	"OTG_HS_HCTSIZ1");
	create_dword	(0X40040534);
	set_name	(0X40040534,	"OTG_HS_HCDMA1");
	create_dword	(0X40040540);
	set_name	(0X40040540,	"OTG_HS_HCCHAR2");
	create_dword	(0X40040544);
	set_name	(0X40040544,	"OTG_HS_HCSPLT2");
	create_dword	(0X40040548);
	set_name	(0X40040548,	"OTG_HS_HCINT2");
	create_dword	(0X4004054C);
	set_name	(0X4004054C,	"OTG_HS_HCINTMSK2");
	create_dword	(0X40040550);
	set_name	(0X40040550,	"OTG_HS_HCTSIZ2");
	create_dword	(0X40040554);
	set_name	(0X40040554,	"OTG_HS_HCDMA2");
	create_dword	(0X40040560);
	set_name	(0X40040560,	"OTG_HS_HCCHAR3");
	create_dword	(0X40040564);
	set_name	(0X40040564,	"OTG_HS_HCSPLT3");
	create_dword	(0X40040568);
	set_name	(0X40040568,	"OTG_HS_HCINT3");
	create_dword	(0X4004056C);
	set_name	(0X4004056C,	"OTG_HS_HCINTMSK3");
	create_dword	(0X40040570);
	set_name	(0X40040570,	"OTG_HS_HCTSIZ3");
	create_dword	(0X40040574);
	set_name	(0X40040574,	"OTG_HS_HCDMA3");
	create_dword	(0X40040580);
	set_name	(0X40040580,	"OTG_HS_HCCHAR4");
	create_dword	(0X40040584);
	set_name	(0X40040584,	"OTG_HS_HCSPLT4");
	create_dword	(0X40040588);
	set_name	(0X40040588,	"OTG_HS_HCINT4");
	create_dword	(0X4004058C);
	set_name	(0X4004058C,	"OTG_HS_HCINTMSK4");
	create_dword	(0X40040590);
	set_name	(0X40040590,	"OTG_HS_HCTSIZ4");
	create_dword	(0X40040594);
	set_name	(0X40040594,	"OTG_HS_HCDMA4");
	create_dword	(0X400405A0);
	set_name	(0X400405A0,	"OTG_HS_HCCHAR5");
	create_dword	(0X400405A4);
	set_name	(0X400405A4,	"OTG_HS_HCSPLT5");
	create_dword	(0X400405A8);
	set_name	(0X400405A8,	"OTG_HS_HCINT5");
	create_dword	(0X400405AC);
	set_name	(0X400405AC,	"OTG_HS_HCINTMSK5");
	create_dword	(0X400405B0);
	set_name	(0X400405B0,	"OTG_HS_HCTSIZ5");
	create_dword	(0X400405B4);
	set_name	(0X400405B4,	"OTG_HS_HCDMA5");
	create_dword	(0X400405C0);
	set_name	(0X400405C0,	"OTG_HS_HCCHAR6");
	create_dword	(0X400405C4);
	set_name	(0X400405C4,	"OTG_HS_HCSPLT6");
	create_dword	(0X400405C8);
	set_name	(0X400405C8,	"OTG_HS_HCINT6");
	create_dword	(0X400405CC);
	set_name	(0X400405CC,	"OTG_HS_HCINTMSK6");
	create_dword	(0X400405D0);
	set_name	(0X400405D0,	"OTG_HS_HCTSIZ6");
	create_dword	(0X400405D4);
	set_name	(0X400405D4,	"OTG_HS_HCDMA6");
	create_dword	(0X400405E0);
	set_name	(0X400405E0,	"OTG_HS_HCCHAR7");
	create_dword	(0X400405E4);
	set_name	(0X400405E4,	"OTG_HS_HCSPLT7");
	create_dword	(0X400405E8);
	set_name	(0X400405E8,	"OTG_HS_HCINT7");
	create_dword	(0X400405EC);
	set_name	(0X400405EC,	"OTG_HS_HCINTMSK7");
	create_dword	(0X400405F0);
	set_name	(0X400405F0,	"OTG_HS_HCTSIZ7");
	create_dword	(0X400405F4);
	set_name	(0X400405F4,	"OTG_HS_HCDMA7");
	create_dword	(0X40040600);
	set_name	(0X40040600,	"OTG_HS_HCCHAR8");
	create_dword	(0X40040604);
	set_name	(0X40040604,	"OTG_HS_HCSPLT8");
	create_dword	(0X40040608);
	set_name	(0X40040608,	"OTG_HS_HCINT8");
	create_dword	(0X4004060C);
	set_name	(0X4004060C,	"OTG_HS_HCINTMSK8");
	create_dword	(0X40040610);
	set_name	(0X40040610,	"OTG_HS_HCTSIZ8");
	create_dword	(0X40040614);
	set_name	(0X40040614,	"OTG_HS_HCDMA8");
	create_dword	(0X40040620);
	set_name	(0X40040620,	"OTG_HS_HCCHAR9");
	create_dword	(0X40040624);
	set_name	(0X40040624,	"OTG_HS_HCSPLT9");
	create_dword	(0X40040628);
	set_name	(0X40040628,	"OTG_HS_HCINT9");
	create_dword	(0X4004062C);
	set_name	(0X4004062C,	"OTG_HS_HCINTMSK9");
	create_dword	(0X40040630);
	set_name	(0X40040630,	"OTG_HS_HCTSIZ9");
	create_dword	(0X40040634);
	set_name	(0X40040634,	"OTG_HS_HCDMA9");
	create_dword	(0X40040640);
	set_name	(0X40040640,	"OTG_HS_HCCHAR10");
	create_dword	(0X40040644);
	set_name	(0X40040644,	"OTG_HS_HCSPLT10");
	create_dword	(0X40040648);
	set_name	(0X40040648,	"OTG_HS_HCINT10");
	create_dword	(0X4004064C);
	set_name	(0X4004064C,	"OTG_HS_HCINTMSK10");
	create_dword	(0X40040650);
	set_name	(0X40040650,	"OTG_HS_HCTSIZ10");
	create_dword	(0X40040654);
	set_name	(0X40040654,	"OTG_HS_HCDMA10");
	create_dword	(0X40040660);
	set_name	(0X40040660,	"OTG_HS_HCCHAR11");
	create_dword	(0X40040664);
	set_name	(0X40040664,	"OTG_HS_HCSPLT11");
	create_dword	(0X40040668);
	set_name	(0X40040668,	"OTG_HS_HCINT11");
	create_dword	(0X4004066C);
	set_name	(0X4004066C,	"OTG_HS_HCINTMSK11");
	create_dword	(0X40040670);
	set_name	(0X40040670,	"OTG_HS_HCTSIZ11");
	create_dword	(0X40040674);
	set_name	(0X40040674,	"OTG_HS_HCDMA11");
	create_dword	(0X40040800);
	set_name	(0X40040800,	"OTG_HS_DCFG");
	create_dword	(0X40040804);
	set_name	(0X40040804,	"OTG_HS_DCTL");
	create_dword	(0X40040808);
	set_name	(0X40040808,	"OTG_HS_DSTS");
	create_dword	(0X40040810);
	set_name	(0X40040810,	"OTG_HS_DIEPMSK");
	create_dword	(0X40040818);
	set_name	(0X40040818,	"OTG_HS_DAINT");
	create_dword	(0X4004081C);
	set_name	(0X4004081C,	"OTG_HS_DAINTMSK");
	create_dword	(0X40040828);
	set_name	(0X40040828,	"OTG_HS_DVBUSDIS");
	create_dword	(0X4004082C);
	set_name	(0X4004082C,	"OTG_HS_DVBUSPULSE");
	create_dword	(0X40040830);
	set_name	(0X40040830,	"OTG_HS_DTHRCTL");
	create_dword	(0X40040834);
	set_name	(0X40040834,	"OTG_HS_DIEPEMPMSK");
	create_dword	(0X40040838);
	set_name	(0X40040838,	"OTG_HS_DEACHINT");
	create_dword	(0X4004083C);
	set_name	(0X4004083C,	"OTG_HS_DEACHINTMSK");
	create_dword	(0X40040840);
	set_name	(0X40040840,	"OTG_HS_DIEPEACHMSK1");
	create_dword	(0X40040880);
	set_name	(0X40040880,	"OTG_HS_DOEPEACHMSK1");
	create_dword	(0X40040900);
	set_name	(0X40040900,	"OTG_HS_DIEPCTL0");
	create_dword	(0X40040908);
	set_name	(0X40040908,	"OTG_HS_DIEPINT0");
	create_dword	(0X40040910);
	set_name	(0X40040910,	"OTG_HS_DIEPTSIZ0");
	create_dword	(0X40040918);
	set_name	(0X40040918,	"OTG_HS_DTXFSTS0");
	create_dword	(0X40040920);
	set_name	(0X40040920,	"OTG_HS_DIEPCTL1");
	create_dword	(0X40040928);
	set_name	(0X40040928,	"OTG_HS_DIEPINT1");
	create_dword	(0X40040930);
	set_name	(0X40040930,	"OTG_HS_DIEPTSIZ1");
	create_dword	(0X40040934);
	set_name	(0X40040934,	"OTG_HS_DIEPDMA1");
	create_dword	(0X40040938);
	set_name	(0X40040938,	"OTG_HS_DTXFSTS1");
	create_dword	(0X40040940);
	set_name	(0X40040940,	"OTG_HS_DIEPCTL2");
	create_dword	(0X40040948);
	set_name	(0X40040948,	"OTG_HS_DIEPINT2");
	create_dword	(0X40040950);
	set_name	(0X40040950,	"OTG_HS_DIEPTSIZ2");
	create_dword	(0X40040954);
	set_name	(0X40040954,	"OTG_HS_DIEPDMA2");
	create_dword	(0X40040958);
	set_name	(0X40040958,	"OTG_HS_DTXFSTS2");
	create_dword	(0X40040960);
	set_name	(0X40040960,	"OTG_HS_DIEPCTL3");
	create_dword	(0X40040968);
	set_name	(0X40040968,	"OTG_HS_DIEPINT3");
	create_dword	(0X40040970);
	set_name	(0X40040970,	"OTG_HS_DIEPTSIZ3");
	create_dword	(0X40040974);
	set_name	(0X40040974,	"OTG_HS_DIEPDMA3");
	create_dword	(0X40040978);
	set_name	(0X40040978,	"OTG_HS_DTXFSTS3");
	create_dword	(0X40040980);
	set_name	(0X40040980,	"OTG_HS_DIEPCTL4");
	create_dword	(0X40040988);
	set_name	(0X40040988,	"OTG_HS_DIEPINT4");
	create_dword	(0X40040990);
	set_name	(0X40040990,	"OTG_HS_DIEPTSIZ4");
	create_dword	(0X40040994);
	set_name	(0X40040994,	"OTG_HS_DIEPDMA4");
	create_dword	(0X40040998);
	set_name	(0X40040998,	"OTG_HS_DTXFSTS4");
	create_dword	(0X400409A0);
	set_name	(0X400409A0,	"OTG_HS_DIEPCTL5");
	create_dword	(0X400409A8);
	set_name	(0X400409A8,	"OTG_HS_DIEPINT5");
	create_dword	(0X400409B0);
	set_name	(0X400409B0,	"OTG_HS_DIEPTSIZ5");
	create_dword	(0X400409B4);
	set_name	(0X400409B4,	"OTG_HS_DIEPDMA5");
	create_dword	(0X40040B00);
	set_name	(0X40040B00,	"OTG_HS_DOEPCTL0");
	create_dword	(0X40040B08);
	set_name	(0X40040B08,	"OTG_HS_DOEPINT0");
	create_dword	(0X40040B10);
	set_name	(0X40040B10,	"OTG_HS_DOEPTSIZ0");
	create_dword	(0X40040B20);
	set_name	(0X40040B20,	"OTG_HS_DOEPCTL1");
	create_dword	(0X40040B28);
	set_name	(0X40040B28,	"OTG_HS_DOEPINT1");
	create_dword	(0X40040B30);
	set_name	(0X40040B30,	"OTG_HS_DOEPTSIZ1");
	create_dword	(0X40040B34);
	set_name	(0X40040B34,	"OTG_HS_DOEPDMA1");
	create_dword	(0X40040B40);
	set_name	(0X40040B40,	"OTG_HS_DOEPCTL2");
	create_dword	(0X40040B48);
	set_name	(0X40040B48,	"OTG_HS_DOEPINT2");
	create_dword	(0X40040B50);
	set_name	(0X40040B50,	"OTG_HS_DOEPTSIZ2");
	create_dword	(0X40040B54);
	set_name	(0X40040B54,	"OTG_HS_DOEPDMA2");
	create_dword	(0X40040B60);
	set_name	(0X40040B60,	"OTG_HS_DOEPCTL3");
	create_dword	(0X40040B68);
	set_name	(0X40040B68,	"OTG_HS_DOEPINT3");
	create_dword	(0X40040B70);
	set_name	(0X40040B70,	"OTG_HS_DOEPTSIZ3");
	create_dword	(0X40040B74);
	set_name	(0X40040B74,	"OTG_HS_DOEPDMA3");
	create_dword	(0X40040B80);
	set_name	(0X40040B80,	"OTG_HS_DOEPCTL4");
	create_dword	(0X40040B88);
	set_name	(0X40040B88,	"OTG_HS_DOEPINT4");
	create_dword	(0X40040B90);
	set_name	(0X40040B90,	"OTG_HS_DOEPTSIZ4");
	create_dword	(0X40040B94);
	set_name	(0X40040B94,	"OTG_HS_DOEPDMA4");
	create_dword	(0X40040BA0);
	set_name	(0X40040BA0,	"OTG_HS_DOEPCTL5");
	create_dword	(0X40040BA8);
	set_name	(0X40040BA8,	"OTG_HS_DOEPINT5");
	create_dword	(0X40040BB0);
	set_name	(0X40040BB0,	"OTG_HS_DOEPTSIZ5");
	create_dword	(0X40040BB4);
	set_name	(0X40040BB4,	"OTG_HS_DOEPDMA5");
	create_dword	(0X40040E00);
	set_name	(0X40040E00,	"OTG_HS_PCGCCTL");
	create_dword	(0X50000000);
	set_name	(0X50000000,	"OTG_FS_GOTGCTL");
	create_dword	(0X50000004);
	set_name	(0X50000004,	"OTG_FS_GOTGINT");
	create_dword	(0X50000008);
	set_name	(0X50000008,	"OTG_FS_GAHBCFG");
	create_dword	(0X5000000C);
	set_name	(0X5000000C,	"OTG_FS_GUSBCFG");
	create_dword	(0X50000010);
	set_name	(0X50000010,	"OTG_FS_GRSTCTL");
	create_dword	(0X50000014);
	set_name	(0X50000014,	"OTG_FS_GINTSTS");
	create_dword	(0X50000018);
	set_name	(0X50000018,	"OTG_FS_GINTMSK");
	create_dword	(0X5000001C);
	set_name	(0X5000001C,	"OTG_FS_GRXSTSR");
	create_dword	(0X50000020);
	set_name	(0X50000020,	"OTG_FS_GRXSTSP");
	create_dword	(0X50000024);
	set_name	(0X50000024,	"OTG_FS_GRXFSIZ");
	create_dword	(0X50000028);
	set_name	(0X50000028,	"OTG_FS_DIEPTXF0");
	create_dword	(0X5000002C);
	set_name	(0X5000002C,	"OTG_FS_HNPTXSTS");
	create_dword	(0X50000038);
	set_name	(0X50000038,	"OTG_FS_GCCFG");
	create_dword	(0X5000003C);
	set_name	(0X5000003C,	"OTG_FS_CID");
	create_dword	(0X50000100);
	set_name	(0X50000100,	"OTG_FS_HPTXFSIZ");
	create_dword	(0X50000104);
	set_name	(0X50000104,	"OTG_FS_DIEPTXF1");
	create_dword	(0X50000108);
	set_name	(0X50000108,	"OTG_FS_DIEPTXF2");
	create_dword	(0X5000010C);
	set_name	(0X5000010C,	"OTG_FS_DIEPTXF3");
	create_dword	(0X50000400);
	set_name	(0X50000400,	"OTG_FS_HCFG");
	create_dword	(0X50000408);
	set_name	(0X50000408,	"OTG_FS_HFNUM");
	create_dword	(0X50000410);
	set_name	(0X50000410,	"OTG_FS_HPTXSTS");
	create_dword	(0X50000414);
	set_name	(0X50000414,	"OTG_FS_HAINT");
	create_dword	(0X50000418);
	set_name	(0X50000418,	"OTG_FS_HAINTMSK");
	create_dword	(0X50000440);
	set_name	(0X50000440,	"OTG_FS_HPRT");
	create_dword	(0X50000500);
	set_name	(0X50000500,	"OTG_FS_HCCHAR0");
	create_dword	(0X50000508);
	set_name	(0X50000508,	"OTG_FS_HCINT0");
	create_dword	(0X5000050C);
	set_name	(0X5000050C,	"OTG_FS_HCINTMSK0");
	create_dword	(0X50000510);
	set_name	(0X50000510,	"OTG_FS_HCTSIZ0");
	create_dword	(0X50000520);
	set_name	(0X50000520,	"OTG_FS_HCCHAR1");
	create_dword	(0X50000528);
	set_name	(0X50000528,	"OTG_FS_HCINT1");
	create_dword	(0X5000052C);
	set_name	(0X5000052C,	"OTG_FS_HCINTMSK1");
	create_dword	(0X50000530);
	set_name	(0X50000530,	"OTG_FS_HCTSIZ1");
	create_dword	(0X50000540);
	set_name	(0X50000540,	"OTG_FS_HCCHAR2");
	create_dword	(0X50000548);
	set_name	(0X50000548,	"OTG_FS_HCINT2");
	create_dword	(0X5000054C);
	set_name	(0X5000054C,	"OTG_FS_HCINTMSK2");
	create_dword	(0X50000550);
	set_name	(0X50000550,	"OTG_FS_HCTSIZ2");
	create_dword	(0X50000560);
	set_name	(0X50000560,	"OTG_FS_HCCHAR3");
	create_dword	(0X50000568);
	set_name	(0X50000568,	"OTG_FS_HCINT3");
	create_dword	(0X5000056C);
	set_name	(0X5000056C,	"OTG_FS_HCINTMSK3");
	create_dword	(0X50000570);
	set_name	(0X50000570,	"OTG_FS_HCTSIZ3");
	create_dword	(0X50000580);
	set_name	(0X50000580,	"OTG_FS_HCCHAR4");
	create_dword	(0X50000588);
	set_name	(0X50000588,	"OTG_FS_HCINT4");
	create_dword	(0X5000058C);
	set_name	(0X5000058C,	"OTG_FS_HCINTMSK4");
	create_dword	(0X50000590);
	set_name	(0X50000590,	"OTG_FS_HCTSIZ4");
	create_dword	(0X500005A0);
	set_name	(0X500005A0,	"OTG_FS_HCCHAR5");
	create_dword	(0X500005A8);
	set_name	(0X500005A8,	"OTG_FS_HCINT5");
	create_dword	(0X500005AC);
	set_name	(0X500005AC,	"OTG_FS_HCINTMSK5");
	create_dword	(0X500005B0);
	set_name	(0X500005B0,	"OTG_FS_HCTSIZ5");
	create_dword	(0X500005C0);
	set_name	(0X500005C0,	"OTG_FS_HCCHAR6");
	create_dword	(0X500005C8);
	set_name	(0X500005C8,	"OTG_FS_HCINT6");
	create_dword	(0X500005CC);
	set_name	(0X500005CC,	"OTG_FS_HCINTMSK6");
	create_dword	(0X500005D0);
	set_name	(0X500005D0,	"OTG_FS_HCTSIZ6");
	create_dword	(0X500005E0);
	set_name	(0X500005E0,	"OTG_FS_HCCHAR7");
	create_dword	(0X500005E8);
	set_name	(0X500005E8,	"OTG_FS_HCINT7");
	create_dword	(0X500005EC);
	set_name	(0X500005EC,	"OTG_FS_HCINTMSK7");
	create_dword	(0X500005F0);
	set_name	(0X500005F0,	"OTG_FS_HCTSIZ7");
	create_dword	(0X50000800);
	set_name	(0X50000800,	"OTG_FS_DCFG");
	create_dword	(0X50000804);
	set_name	(0X50000804,	"OTG_FS_DCTL");
	create_dword	(0X50000808);
	set_name	(0X50000808,	"OTG_FS_DSTS");
	create_dword	(0X50000810);
	set_name	(0X50000810,	"OTG_FS_DIEPMSK");
	create_dword	(0X50000814);
	set_name	(0X50000814,	"OTG_FS_DOEPMSK");
	create_dword	(0X50000818);
	set_name	(0X50000818,	"OTG_FS_DAINT");
	create_dword	(0X5000081C);
	set_name	(0X5000081C,	"OTG_FS_DAINTMSK");
	create_dword	(0X50000828);
	set_name	(0X50000828,	"OTG_FS_DVBUSDIS");
	create_dword	(0X5000082C);
	set_name	(0X5000082C,	"OTG_FS_DVBUSPULSE");
	create_dword	(0X50000834);
	set_name	(0X50000834,	"OTG_FS_DIEPEMPMSK");
	create_dword	(0X50000900);
	set_name	(0X50000900,	"OTG_FS_DIEPCTL0");
	create_dword	(0X50000908);
	set_name	(0X50000908,	"OTG_FS_DIEPINT0");
	create_dword	(0X50000910);
	set_name	(0X50000910,	"OTG_FS_DIEPTSIZ0");
	create_dword	(0X50000918);
	set_name	(0X50000918,	"OTG_FS_DTXFSTS0");
	create_dword	(0X50000920);
	set_name	(0X50000920,	"OTG_FS_DIEPCTL1");
	create_dword	(0X50000928);
	set_name	(0X50000928,	"OTG_FS_DIEPINT1");
	create_dword	(0X50000930);
	set_name	(0X50000930,	"OTG_FS_DIEPTSIZ1");
	create_dword	(0X50000938);
	set_name	(0X50000938,	"OTG_FS_DTXFSTS1");
	create_dword	(0X50000940);
	set_name	(0X50000940,	"OTG_FS_DIEPCTL2");
	create_dword	(0X50000948);
	set_name	(0X50000948,	"OTG_FS_DIEPINT2");
	create_dword	(0X50000950);
	set_name	(0X50000950,	"OTG_FS_DIEPTSIZ2");
	create_dword	(0X50000958);
	set_name	(0X50000958,	"OTG_FS_DTXFSTS2");
	create_dword	(0X50000960);
	set_name	(0X50000960,	"OTG_FS_DIEPCTL3");
	create_dword	(0X50000968);
	set_name	(0X50000968,	"OTG_FS_DIEPINT3");
	create_dword	(0X50000970);
	set_name	(0X50000970,	"OTG_FS_DIEPTSIZ3");
	create_dword	(0X50000978);
	set_name	(0X50000978,	"OTG_FS_DTXFSTS3");
	create_dword	(0X50000B00);
	set_name	(0X50000B00,	"OTG_FS_DOEPCTL0");
	create_dword	(0X50000B08);
	set_name	(0X50000B08,	"OTG_FS_DOEPINT0");
	create_dword	(0X50000B10);
	set_name	(0X50000B10,	"OTG_FS_DOEPTSIZ0");
	create_dword	(0X50000B20);
	set_name	(0X50000B20,	"OTG_FS_DOEPCTL1");
	create_dword	(0X50000B28);
	set_name	(0X50000B28,	"OTG_FS_DOEPINT1");
	create_dword	(0X50000B30);
	set_name	(0X50000B30,	"OTG_FS_DOEPTSIZ1");
	create_dword	(0X50000B40);
	set_name	(0X50000B40,	"OTG_FS_DOEPCTL2");
	create_dword	(0X50000B48);
	set_name	(0X50000B48,	"OTG_FS_DOEPINT2");
	create_dword	(0X50000B50);
	set_name	(0X50000B50,	"OTG_FS_DOEPTSIZ2");
	create_dword	(0X50000B60);
	set_name	(0X50000B60,	"OTG_FS_DOEPCTL3");
	create_dword	(0X50000B68);
	set_name	(0X50000B68,	"OTG_FS_DOEPINT3");
	create_dword	(0X50000B70);
	set_name	(0X50000B70,	"OTG_FS_DOEPTSIZ3");
	create_dword	(0X50000E00);
	set_name	(0X50000E00,	"OTG_FS_PCGCCTL");
	create_dword	(0X50050000);
	set_name	(0X50050000,	"DCMI_CR");
	create_dword	(0X50050004);
	set_name	(0X50050004,	"DCMI_SR");
	create_dword	(0X50050008);
	set_name	(0X50050008,	"DCMI_RIS");
	create_dword	(0X5005000C);
	set_name	(0X5005000C,	"DCMI_IER");
	create_dword	(0X50050010);
	set_name	(0X50050010,	"DCMI_MIS");
	create_dword	(0X50050014);
	set_name	(0X50050014,	"DCMI_ICR");
	create_dword	(0X50050018);
	set_name	(0X50050018,	"DCMI_ESCR");
	create_dword	(0X5005001C);
	set_name	(0X5005001C,	"DCMI_ESUR");
	create_dword	(0X50050020);
	set_name	(0X50050020,	"DCMI_CWSTRT");
	create_dword	(0X50050024);
	set_name	(0X50050024,	"DCMI_CWSIZE");
	create_dword	(0X50050028);
	set_name	(0X50050028,	"DCMI_DR");
	create_dword	(0X50060000);
	set_name	(0X50060000,	"CRYP_CR");
	create_dword	(0X50060004);
	set_name	(0X50060004,	"CRYP_SR");
	create_dword	(0X50060008);
	set_name	(0X50060008,	"CRYP_DIN");
	create_dword	(0X5006000C);
	set_name	(0X5006000C,	"CRYP_DOUT");
	create_dword	(0X50060010);
	set_name	(0X50060010,	"CRYP_DMACR");
	create_dword	(0X50060014);
	set_name	(0X50060014,	"CRYP_IMSCR");
	create_dword	(0X50060018);
	set_name	(0X50060018,	"CRYP_RISR");
	create_dword	(0X5006001C);
	set_name	(0X5006001C,	"CRYP_MISR");
	create_dword	(0X50060020);
	set_name	(0X50060020,	"CRYP_K0LR");
	create_dword	(0X50060024);
	set_name	(0X50060024,	"CRYP_K0RR");
	create_dword	(0X50060028);
	set_name	(0X50060028,	"CRYP_K1LR");
	create_dword	(0X5006002C);
	set_name	(0X5006002C,	"CRYP_K1RR");
	create_dword	(0X50060030);
	set_name	(0X50060030,	"CRYP_K2LR");
	create_dword	(0X50060034);
	set_name	(0X50060034,	"CRYP_K2RR");
	create_dword	(0X50060038);
	set_name	(0X50060038,	"CRYP_K3LR");
	create_dword	(0X5006003C);
	set_name	(0X5006003C,	"CRYP_K3RR");
	create_dword	(0X50060040);
	set_name	(0X50060040,	"CRYP_IV0LR");
	create_dword	(0X50060044);
	set_name	(0X50060044,	"CRYP_IV0RR");
	create_dword	(0X50060048);
	set_name	(0X50060048,	"CRYP_IV1LR");
	create_dword	(0X5006004C);
	set_name	(0X5006004C,	"CRYP_IV1RR");
	create_dword	(0X50060400);
	set_name	(0X50060400,	"HASH_CR");
	create_dword	(0X50060404);
	set_name	(0X50060404,	"HASH_DIN");
	create_dword	(0X50060408);
	set_name	(0X50060408,	"HASH_STR");
	create_dword	(0X5006040C);
	set_name	(0X5006040C,	"HASH_HR0");
	create_dword	(0X50060410);
	set_name	(0X50060410,	"HASH_HR1");
	create_dword	(0X50060414);
	set_name	(0X50060414,	"HASH_HR2");
	create_dword	(0X50060418);
	set_name	(0X50060418,	"HASH_HR3");
	create_dword	(0X5006041C);
	set_name	(0X5006041C,	"HASH_HR4");
	create_dword	(0X50060420);
	set_name	(0X50060420,	"HASH_IMR");
	create_dword	(0X50060424);
	set_name	(0X50060424,	"HASH_SR");
	create_dword	(0X500604F8);
	set_name	(0X500604F8,	"HASH_CSR0");
	create_dword	(0X500605C0);
	set_name	(0X500605C0,	"HASH_CSR50");
	create_dword	(0X50060800);
	set_name	(0X50060800,	"RNG_CR");
	create_dword	(0X50060804);
	set_name	(0X50060804,	"RNG_SR");
	create_dword	(0X50060808);
	set_name	(0X50060808,	"RNG_DR");
	create_dword	(0XA0000000);
	set_name	(0XA0000000,	"FSMC_BCR1");
	create_dword	(0XA0000004);
	set_name	(0XA0000004,	"FSMC_BTR1");
	create_dword	(0XA0000008);
	set_name	(0XA0000008,	"FSMC_BCR2");
	create_dword	(0XA000000C);
	set_name	(0XA000000C,	"FSMC_BTR2");
	create_dword	(0XA0000010);
	set_name	(0XA0000010,	"FSMC_BCR3");
	create_dword	(0XA0000014);
	set_name	(0XA0000014,	"FSMC_BTR3");
	create_dword	(0XA0000018);
	set_name	(0XA0000018,	"FSMC_BCR4");
	create_dword	(0XA000001C);
	set_name	(0XA000001C,	"FSMC_BTR4");
	create_dword	(0XA0000060);
	set_name	(0XA0000060,	"FSMC_PCR2");
	create_dword	(0XA0000064);
	set_name	(0XA0000064,	"FSMC_SR2");
	create_dword	(0XA0000068);
	set_name	(0XA0000068,	"FSMC_PMEM2");
	create_dword	(0XA000006C);
	set_name	(0XA000006C,	"FSMC_PATT2");
	create_dword	(0XA0000074);
	set_name	(0XA0000074,	"FSMC_ECCR2");
	create_dword	(0XA0000080);
	set_name	(0XA0000080,	"FSMC_PCR3");
	create_dword	(0XA0000084);
	set_name	(0XA0000084,	"FSMC_SR3");
	create_dword	(0XA0000088);
	set_name	(0XA0000088,	"FSMC_PMEM3");
	create_dword	(0XA000008C);
	set_name	(0XA000008C,	"FSMC_PATT3");
	create_dword	(0XA0000094);
	set_name	(0XA0000094,	"FSMC_ECCR3");
	create_dword	(0XA00000A0);
	set_name	(0XA00000A0,	"FSMC_PCR4");
	create_dword	(0XA00000A4);
	set_name	(0XA00000A4,	"FSMC_SR4");
	create_dword	(0XA00000A8);
	set_name	(0XA00000A8,	"FSMC_PMEM4");
	create_dword	(0XA00000AC);
	set_name	(0XA00000AC,	"FSMC_PATT4");
	create_dword	(0XA00000B0);
	set_name	(0XA00000B0,	"FSMC_PIO4");
	create_dword	(0XA0000104);
	set_name	(0XA0000104,	"FSMC_BWTR1");
	create_dword	(0XA0000108);
	set_name	(0XA0000108,	"FSMC_BWTR2");
	create_dword	(0XA000010C);
	set_name	(0XA000010C,	"FSMC_BWTR3");
	create_dword	(0XA0000110);
	set_name	(0XA0000110,	"FSMC_BWTR4");
	create_dword	(0XE000E008);
	set_name	(0XE000E008,	"SCB_ACTLR");
	create_dword	(0XE000E010);
	set_name	(0XE000E010,	"STK_CTRL");
	create_dword	(0XE000E014);
	set_name	(0XE000E014,	"STK_LOAD");
	create_dword	(0XE000E018);
	set_name	(0XE000E018,	"STK_VAL");
	create_dword	(0XE000E01C);
	set_name	(0XE000E01C,	"STK_CALIB");
	create_dword	(0XE000E100);
	set_name	(0XE000E100,	"NVIC_ISER0");
	create_dword	(0XE000E104);
	set_name	(0XE000E104,	"NVIC_ISER1");
	create_dword	(0XE000E108);
	set_name	(0XE000E108,	"NVIC_ISER2");
	create_dword	(0XE000E180);
	set_name	(0XE000E180,	"NVIC_ICER0");
	create_dword	(0XE000E184);
	set_name	(0XE000E184,	"NVIC_ICER1");
	create_dword	(0XE000E188);
	set_name	(0XE000E188,	"NVIC_ICER2");
	create_dword	(0XE000E200);
	set_name	(0XE000E200,	"NVIC_ISPR0");
	create_dword	(0XE000E204);
	set_name	(0XE000E204,	"NVIC_ISPR1");
	create_dword	(0XE000E208);
	set_name	(0XE000E208,	"NVIC_ISPR2");
	create_dword	(0XE000E280);
	set_name	(0XE000E280,	"NVIC_ICPR0");
	create_dword	(0XE000E284);
	set_name	(0XE000E284,	"NVIC_ICPR1");
	create_dword	(0XE000E288);
	set_name	(0XE000E288,	"NVIC_ICPR2");
	create_dword	(0XE000E300);
	set_name	(0XE000E300,	"NVIC_IABR0");
	create_dword	(0XE000E304);
	set_name	(0XE000E304,	"NVIC_IABR1");
	create_dword	(0XE000E308);
	set_name	(0XE000E308,	"NVIC_IABR2");
	create_dword	(0XE000E400);
	set_name	(0XE000E400,	"NVIC_IPR0");
	create_dword	(0XE000E404);
	set_name	(0XE000E404,	"NVIC_IPR1");
	create_dword	(0XE000E408);
	set_name	(0XE000E408,	"NVIC_IPR2");
	create_dword	(0XE000E40C);
	set_name	(0XE000E40C,	"NVIC_IPR3");
	create_dword	(0XE000E410);
	set_name	(0XE000E410,	"NVIC_IPR4");
	create_dword	(0XE000E414);
	set_name	(0XE000E414,	"NVIC_IPR5");
	create_dword	(0XE000E418);
	set_name	(0XE000E418,	"NVIC_IPR6");
	create_dword	(0XE000E41C);
	set_name	(0XE000E41C,	"NVIC_IPR7");
	create_dword	(0XE000E420);
	set_name	(0XE000E420,	"NVIC_IPR8");
	create_dword	(0XE000E424);
	set_name	(0XE000E424,	"NVIC_IPR9");
	create_dword	(0XE000E428);
	set_name	(0XE000E428,	"NVIC_IPR10");
	create_dword	(0XE000E42C);
	set_name	(0XE000E42C,	"NVIC_IPR11");
	create_dword	(0XE000E430);
	set_name	(0XE000E430,	"NVIC_IPR12");
	create_dword	(0XE000E434);
	set_name	(0XE000E434,	"NVIC_IPR13");
	create_dword	(0XE000E438);
	set_name	(0XE000E438,	"NVIC_IPR14");
	create_dword	(0XE000E43C);
	set_name	(0XE000E43C,	"NVIC_IPR15");
	create_dword	(0XE000E440);
	set_name	(0XE000E440,	"NVIC_IPR16");
	create_dword	(0XE000E444);
	set_name	(0XE000E444,	"NVIC_IPR17");
	create_dword	(0XE000E448);
	set_name	(0XE000E448,	"NVIC_IPR18");
	create_dword	(0XE000E44C);
	set_name	(0XE000E44C,	"NVIC_IPR19");
	create_dword	(0XE000E450);
	set_name	(0XE000E450,	"NVIC_IPR20");
	create_dword	(0XE000ED00);
	set_name	(0XE000ED00,	"SCB_CPUID");
	create_dword	(0XE000ED04);
	set_name	(0XE000ED04,	"SCB_ICSR");
	create_dword	(0XE000ED08);
	set_name	(0XE000ED08,	"SCB_VTOR");
	create_dword	(0XE000ED0C);
	set_name	(0XE000ED0C,	"SCB_AIRCR");
	create_dword	(0XE000ED10);
	set_name	(0XE000ED10,	"SCB_SCR");
	create_dword	(0XE000ED14);
	set_name	(0XE000ED14,	"SCB_CCR");
	create_dword	(0XE000ED18);
	set_name	(0XE000ED18,	"SCB_SHPR1");
	create_dword	(0XE000ED1C);
	set_name	(0XE000ED1C,	"SCB_SHPR2");
	create_dword	(0XE000ED20);
	set_name	(0XE000ED20,	"SCB_SHPR3");
	create_dword	(0XE000ED24);
	set_name	(0XE000ED24,	"SCB_SHCSR");
	create_dword	(0XE000ED28);
	set_name	(0XE000ED28,	"SCB_CFSR");
	create_dword	(0XE000ED2C);
	set_name	(0XE000ED2C,	"SCB_HFSR");
	create_dword	(0XE000ED34);
	set_name	(0XE000ED34,	"SCB_MMFAR");
	create_dword	(0XE000ED38);
	set_name	(0XE000ED38,	"SCB_BFAR");
	create_dword	(0XE000ED3C);
	set_name	(0XE000ED3C,	"SCB_AFSR");
	create_dword	(0XE000ED88);
	set_name	(0XE000ED88,	"CPACR");
	create_dword	(0XE000ED90);
	set_name	(0XE000ED90,	"MPU_TYPER");
	create_dword	(0XE000ED94);
	set_name	(0XE000ED94,	"MPU_CIRL");
	create_dword	(0XE000ED98);
	set_name	(0XE000ED98,	"MPU_RNR");
	create_dword	(0XE000ED9C);
	set_name	(0XE000ED9C,	"MPU_RBAR");
	create_dword	(0XE000EDA0);
	set_name	(0XE000EDA0,	"MPU_RASR");
	create_dword	(0XE000EF00);
	set_name	(0XE000EF00,	"NVIC_STIR");
	create_dword	(0XE000EF34);
	set_name	(0XE000EF34,	"FPCCR");
	create_dword	(0XE000EF38);
	set_name	(0XE000EF38,	"FPCAR");
	create_dword	(0XE000EF3C);
	set_name	(0XE000EF3C,	"FPDSCR");
	create_dword	(0XE0042000);
	set_name	(0XE0042000,	"DBGMCU_IDCODE");
	create_dword	(0XE0042004);
	set_name	(0XE0042004,	"DBGMCU_CR");
	create_dword	(0XE0042008);
	set_name	(0XE0042008,	"DBGMCU_APB1_FZ");
	create_dword	(0XE004200C);
	set_name	(0XE004200C,	"DBGMCU_APB2_FZ");
	split_sreg_range(0X1FFFC000,"T",0,3);
	split_sreg_range(0X1FFFC008,"T",0,3);
	split_sreg_range(0X20000000,"T",0,3);
	split_sreg_range(0X40000000,"T",0,3);
	split_sreg_range(0X40000048,"T",0,3);
	split_sreg_range(0X40000400,"T",0,3);
	split_sreg_range(0X40000448,"T",0,3);
	split_sreg_range(0X40000800,"T",0,3);
	split_sreg_range(0X40000848,"T",0,3);
	split_sreg_range(0X40000C00,"T",0,3);
	split_sreg_range(0X40000C48,"T",0,3);
	split_sreg_range(0X40001000,"T",0,3);
	split_sreg_range(0X4000100C,"T",0,3);
	split_sreg_range(0X40001024,"T",0,3);
	split_sreg_range(0X40001400,"T",0,3);
	split_sreg_range(0X4000140C,"T",0,3);
	split_sreg_range(0X40001424,"T",0,3);
	split_sreg_range(0X40001800,"T",0,3);
	split_sreg_range(0X40001820,"T",0,3);
	split_sreg_range(0X40001834,"T",0,3);
	split_sreg_range(0X40001C00,"T",0,3);
	split_sreg_range(0X40001C0C,"T",0,3);
	split_sreg_range(0X40001C20,"T",0,3);
	split_sreg_range(0X40001C34,"T",0,3);
	split_sreg_range(0X40002000,"T",0,3);
	split_sreg_range(0X4000200C,"T",0,3);
	split_sreg_range(0X40002020,"T",0,3);
	split_sreg_range(0X40002034,"T",0,3);
	split_sreg_range(0X40002800,"T",0,3);
	split_sreg_range(0X40002850,"T",0,3);
	split_sreg_range(0X40002C00,"T",0,3);
	split_sreg_range(0X40003000,"T",0,3);
	split_sreg_range(0X40003800,"T",0,3);
	split_sreg_range(0X40003C00,"T",0,3);
	split_sreg_range(0X40004400,"T",0,3);
	split_sreg_range(0X40004800,"T",0,3);
	split_sreg_range(0X40004C00,"T",0,3);
	split_sreg_range(0X40005000,"T",0,3);
	split_sreg_range(0X40005400,"T",0,3);
	split_sreg_range(0X40005800,"T",0,3);
	split_sreg_range(0X40005C00,"T",0,3);
	split_sreg_range(0X40006400,"T",0,3);
	split_sreg_range(0X40006580,"T",0,3);
	split_sreg_range(0X40006600,"T",0,3);
	split_sreg_range(0X4000660C,"T",0,3);
	split_sreg_range(0X40006614,"T",0,3);
	split_sreg_range(0X4000661C,"T",0,3);
	split_sreg_range(0X40006640,"T",0,3);
	split_sreg_range(0X40006800,"T",0,3);
	split_sreg_range(0X40006980,"T",0,3);
	split_sreg_range(0X40007000,"T",0,3);
	split_sreg_range(0X40007400,"T",0,3);
	split_sreg_range(0X40010000,"T",0,3);
	split_sreg_range(0X40010400,"T",0,3);
	split_sreg_range(0X40011000,"T",0,3);
	split_sreg_range(0X40011400,"T",0,3);
	split_sreg_range(0X40012000,"T",0,3);
	split_sreg_range(0X40012100,"T",0,3);
	split_sreg_range(0X40012200,"T",0,3);
	split_sreg_range(0X40012300,"T",0,3);
	split_sreg_range(0X40012C00,"T",0,3);
	split_sreg_range(0X40012C48,"T",0,3);
	split_sreg_range(0X40012C80,"T",0,3);
	split_sreg_range(0X40013000,"T",0,3);
	split_sreg_range(0X40013800,"T",0,3);
	split_sreg_range(0X40013820,"T",0,3);
	split_sreg_range(0X40013C00,"T",0,3);
	split_sreg_range(0X40014000,"T",0,3);
	split_sreg_range(0X40014020,"T",0,3);
	split_sreg_range(0X40014034,"T",0,3);
	split_sreg_range(0X40014400,"T",0,3);
	split_sreg_range(0X4001440C,"T",0,3);
	split_sreg_range(0X40014420,"T",0,3);
	split_sreg_range(0X40014434,"T",0,3);
	split_sreg_range(0X40014800,"T",0,3);
	split_sreg_range(0X4001480C,"T",0,3);
	split_sreg_range(0X40014820,"T",0,3);
	split_sreg_range(0X40014834,"T",0,3);
	split_sreg_range(0X40014850,"T",0,3);
	split_sreg_range(0X40020000,"T",0,3);
	split_sreg_range(0X40020400,"T",0,3);
	split_sreg_range(0X40020800,"T",0,3);
	split_sreg_range(0X40020C00,"T",0,3);
	split_sreg_range(0X40021000,"T",0,3);
	split_sreg_range(0X40021400,"T",0,3);
	split_sreg_range(0X40021800,"T",0,3);
	split_sreg_range(0X40021C00,"T",0,3);
	split_sreg_range(0X40022000,"T",0,3);
	split_sreg_range(0X40023000,"T",0,3);
	split_sreg_range(0X40023800,"T",0,3);
	split_sreg_range(0X40023820,"T",0,3);
	split_sreg_range(0X40023830,"T",0,3);
	split_sreg_range(0X40023840,"T",0,3);
	split_sreg_range(0X40023850,"T",0,3);
	split_sreg_range(0X40023860,"T",0,3);
	split_sreg_range(0X40023870,"T",0,3);
	split_sreg_range(0X40023880,"T",0,3);
	split_sreg_range(0X40023C00,"T",0,3);
	split_sreg_range(0X40026000,"T",0,3);
	split_sreg_range(0X40026400,"T",0,3);
	split_sreg_range(0X40028000,"T",0,3);
	split_sreg_range(0X40028028,"T",0,3);
	split_sreg_range(0X40028034,"T",0,3);
	split_sreg_range(0X40028100,"T",0,3);
	split_sreg_range(0X4002814C,"T",0,3);
	split_sreg_range(0X40028168,"T",0,3);
	split_sreg_range(0X40028194,"T",0,3);
	split_sreg_range(0X400281C4,"T",0,3);
	split_sreg_range(0X40028700,"T",0,3);
	split_sreg_range(0X40028728,"T",0,3);
	split_sreg_range(0X40029000,"T",0,3);
	split_sreg_range(0X40029048,"T",0,3);
	split_sreg_range(0X40040000,"T",0,3);
	split_sreg_range(0X40040038,"T",0,3);
	split_sreg_range(0X40040100,"T",0,3);
	split_sreg_range(0X40040400,"T",0,3);
	split_sreg_range(0X40040410,"T",0,3);
	split_sreg_range(0X40040440,"T",0,3);
	split_sreg_range(0X40040500,"T",0,3);
	split_sreg_range(0X40040520,"T",0,3);
	split_sreg_range(0X40040540,"T",0,3);
	split_sreg_range(0X40040560,"T",0,3);
	split_sreg_range(0X40040580,"T",0,3);
	split_sreg_range(0X400405A0,"T",0,3);
	split_sreg_range(0X400405C0,"T",0,3);
	split_sreg_range(0X400405E0,"T",0,3);
	split_sreg_range(0X40040600,"T",0,3);
	split_sreg_range(0X40040620,"T",0,3);
	split_sreg_range(0X40040640,"T",0,3);
	split_sreg_range(0X40040660,"T",0,3);
	split_sreg_range(0X40040800,"T",0,3);
	split_sreg_range(0X40040810,"T",0,3);
	split_sreg_range(0X40040818,"T",0,3);
	split_sreg_range(0X40040828,"T",0,3);
	split_sreg_range(0X40040880,"T",0,3);
	split_sreg_range(0X40040900,"T",0,3);
	split_sreg_range(0X40040908,"T",0,3);
	split_sreg_range(0X40040910,"T",0,3);
	split_sreg_range(0X40040918,"T",0,3);
	split_sreg_range(0X40040920,"T",0,3);
	split_sreg_range(0X40040928,"T",0,3);
	split_sreg_range(0X40040930,"T",0,3);
	split_sreg_range(0X40040940,"T",0,3);
	split_sreg_range(0X40040948,"T",0,3);
	split_sreg_range(0X40040950,"T",0,3);
	split_sreg_range(0X40040960,"T",0,3);
	split_sreg_range(0X40040968,"T",0,3);
	split_sreg_range(0X40040970,"T",0,3);
	split_sreg_range(0X40040980,"T",0,3);
	split_sreg_range(0X40040988,"T",0,3);
	split_sreg_range(0X40040990,"T",0,3);
	split_sreg_range(0X400409A0,"T",0,3);
	split_sreg_range(0X400409A8,"T",0,3);
	split_sreg_range(0X400409B0,"T",0,3);
	split_sreg_range(0X40040B00,"T",0,3);
	split_sreg_range(0X40040B08,"T",0,3);
	split_sreg_range(0X40040B10,"T",0,3);
	split_sreg_range(0X40040B20,"T",0,3);
	split_sreg_range(0X40040B28,"T",0,3);
	split_sreg_range(0X40040B30,"T",0,3);
	split_sreg_range(0X40040B40,"T",0,3);
	split_sreg_range(0X40040B48,"T",0,3);
	split_sreg_range(0X40040B50,"T",0,3);
	split_sreg_range(0X40040B60,"T",0,3);
	split_sreg_range(0X40040B68,"T",0,3);
	split_sreg_range(0X40040B70,"T",0,3);
	split_sreg_range(0X40040B80,"T",0,3);
	split_sreg_range(0X40040B88,"T",0,3);
	split_sreg_range(0X40040B90,"T",0,3);
	split_sreg_range(0X40040BA0,"T",0,3);
	split_sreg_range(0X40040BA8,"T",0,3);
	split_sreg_range(0X40040BB0,"T",0,3);
	split_sreg_range(0X40040E00,"T",0,3);
	split_sreg_range(0X50000000,"T",0,3);
	split_sreg_range(0X50000038,"T",0,3);
	split_sreg_range(0X50000100,"T",0,3);
	split_sreg_range(0X50000400,"T",0,3);
	split_sreg_range(0X50000408,"T",0,3);
	split_sreg_range(0X50000410,"T",0,3);
	split_sreg_range(0X50000440,"T",0,3);
	split_sreg_range(0X50000500,"T",0,3);
	split_sreg_range(0X50000508,"T",0,3);
	split_sreg_range(0X50000520,"T",0,3);
	split_sreg_range(0X50000528,"T",0,3);
	split_sreg_range(0X50000540,"T",0,3);
	split_sreg_range(0X50000548,"T",0,3);
	split_sreg_range(0X50000560,"T",0,3);
	split_sreg_range(0X50000568,"T",0,3);
	split_sreg_range(0X50000580,"T",0,3);
	split_sreg_range(0X50000588,"T",0,3);
	split_sreg_range(0X500005A0,"T",0,3);
	split_sreg_range(0X500005A8,"T",0,3);
	split_sreg_range(0X500005C0,"T",0,3);
	split_sreg_range(0X500005C8,"T",0,3);
	split_sreg_range(0X500005E0,"T",0,3);
	split_sreg_range(0X500005E8,"T",0,3);
	split_sreg_range(0X50000800,"T",0,3);
	split_sreg_range(0X50000810,"T",0,3);
	split_sreg_range(0X50000828,"T",0,3);
	split_sreg_range(0X50000834,"T",0,3);
	split_sreg_range(0X50000900,"T",0,3);
	split_sreg_range(0X50000908,"T",0,3);
	split_sreg_range(0X50000910,"T",0,3);
	split_sreg_range(0X50000918,"T",0,3);
	split_sreg_range(0X50000920,"T",0,3);
	split_sreg_range(0X50000928,"T",0,3);
	split_sreg_range(0X50000930,"T",0,3);
	split_sreg_range(0X50000938,"T",0,3);
	split_sreg_range(0X50000940,"T",0,3);
	split_sreg_range(0X50000948,"T",0,3);
	split_sreg_range(0X50000950,"T",0,3);
	split_sreg_range(0X50000958,"T",0,3);
	split_sreg_range(0X50000960,"T",0,3);
	split_sreg_range(0X50000968,"T",0,3);
	split_sreg_range(0X50000970,"T",0,3);
	split_sreg_range(0X50000978,"T",0,3);
	split_sreg_range(0X50000B00,"T",0,3);
	split_sreg_range(0X50000B08,"T",0,3);
	split_sreg_range(0X50000B10,"T",0,3);
	split_sreg_range(0X50000B20,"T",0,3);
	split_sreg_range(0X50000B28,"T",0,3);
	split_sreg_range(0X50000B30,"T",0,3);
	split_sreg_range(0X50000B40,"T",0,3);
	split_sreg_range(0X50000B48,"T",0,3);
	split_sreg_range(0X50000B50,"T",0,3);
	split_sreg_range(0X50000B60,"T",0,3);
	split_sreg_range(0X50000B68,"T",0,3);
	split_sreg_range(0X50000B70,"T",0,3);
	split_sreg_range(0X50000E00,"T",0,3);
	split_sreg_range(0X50050000,"T",0,3);
	split_sreg_range(0X50060000,"T",0,3);
	split_sreg_range(0X50060400,"T",0,3);
	split_sreg_range(0X500604F8,"T",0,3);
	split_sreg_range(0X500605C0,"T",0,3);
	split_sreg_range(0X50060800,"T",0,3);
	split_sreg_range(0XA0000000,"T",0,3);
	split_sreg_range(0XA0000060,"T",0,3);
	split_sreg_range(0XA0000074,"T",0,3);
	split_sreg_range(0XA0000080,"T",0,3);
	split_sreg_range(0XA0000094,"T",0,3);
	split_sreg_range(0XA00000A0,"T",0,3);
	split_sreg_range(0XA0000104,"T",0,3);
	split_sreg_range(0XE000E008,"T",0,3);
	split_sreg_range(0XE000E010,"T",0,3);
	split_sreg_range(0XE000E100,"T",0,3);
	split_sreg_range(0XE000E180,"T",0,3);
	split_sreg_range(0XE000E200,"T",0,3);
	split_sreg_range(0XE000E280,"T",0,3);
	split_sreg_range(0XE000E300,"T",0,3);
	split_sreg_range(0XE000E400,"T",0,3);
	split_sreg_range(0XE000ED00,"T",0,3);
	split_sreg_range(0XE000ED34,"T",0,3);
	split_sreg_range(0XE000ED88,"T",0,3);
	split_sreg_range(0XE000ED90,"T",0,3);
	split_sreg_range(0XE000EF00,"T",0,3);
	split_sreg_range(0XE000EF34,"T",0,3);
	split_sreg_range(0XE0042000,"T",0,3);
	split_sreg_range(0X800C000,"DS",0,3);
	split_sreg_range(0X1FFFC000,"DS",0X1,3);
	split_sreg_range(0X1FFFC008,"DS",0X1,3);
	split_sreg_range(0X20000000,"DS",0,3);
	split_sreg_range(0X40000000,"DS",0X1,3);
	split_sreg_range(0X40000048,"DS",0X1,3);
	split_sreg_range(0X40000400,"DS",0X1,3);
	split_sreg_range(0X40000448,"DS",0X1,3);
	split_sreg_range(0X40000800,"DS",0X1,3);
	split_sreg_range(0X40000848,"DS",0X1,3);
	split_sreg_range(0X40000C00,"DS",0X1,3);
	split_sreg_range(0X40000C48,"DS",0X1,3);
	split_sreg_range(0X40001000,"DS",0X1,3);
	split_sreg_range(0X4000100C,"DS",0X1,3);
	split_sreg_range(0X40001024,"DS",0X1,3);
	split_sreg_range(0X40001400,"DS",0X1,3);
	split_sreg_range(0X4000140C,"DS",0X1,3);
	split_sreg_range(0X40001424,"DS",0X1,3);
	split_sreg_range(0X40001800,"DS",0X1,3);
	split_sreg_range(0X40001820,"DS",0X1,3);
	split_sreg_range(0X40001834,"DS",0X1,3);
	split_sreg_range(0X40001C00,"DS",0X1,3);
	split_sreg_range(0X40001C0C,"DS",0X1,3);
	split_sreg_range(0X40001C20,"DS",0X1,3);
	split_sreg_range(0X40001C34,"DS",0X1,3);
	split_sreg_range(0X40002000,"DS",0X1,3);
	split_sreg_range(0X4000200C,"DS",0X1,3);
	split_sreg_range(0X40002020,"DS",0X1,3);
	split_sreg_range(0X40002034,"DS",0X1,3);
	split_sreg_range(0X40002800,"DS",0X1,3);
	split_sreg_range(0X40002850,"DS",0X1,3);
	split_sreg_range(0X40002C00,"DS",0X1,3);
	split_sreg_range(0X40003000,"DS",0X1,3);
	split_sreg_range(0X40003800,"DS",0X1,3);
	split_sreg_range(0X40003C00,"DS",0X1,3);
	split_sreg_range(0X40004400,"DS",0X1,3);
	split_sreg_range(0X40004800,"DS",0X1,3);
	split_sreg_range(0X40004C00,"DS",0X1,3);
	split_sreg_range(0X40005000,"DS",0X1,3);
	split_sreg_range(0X40005400,"DS",0X1,3);
	split_sreg_range(0X40005800,"DS",0X1,3);
	split_sreg_range(0X40005C00,"DS",0X1,3);
	split_sreg_range(0X40006400,"DS",0X1,3);
	split_sreg_range(0X40006580,"DS",0X1,3);
	split_sreg_range(0X40006600,"DS",0X1,3);
	split_sreg_range(0X4000660C,"DS",0X1,3);
	split_sreg_range(0X40006614,"DS",0X1,3);
	split_sreg_range(0X4000661C,"DS",0X1,3);
	split_sreg_range(0X40006640,"DS",0X1,3);
	split_sreg_range(0X40006800,"DS",0X1,3);
	split_sreg_range(0X40006980,"DS",0X1,3);
	split_sreg_range(0X40007000,"DS",0X1,3);
	split_sreg_range(0X40007400,"DS",0X1,3);
	split_sreg_range(0X40010000,"DS",0X1,3);
	split_sreg_range(0X40010400,"DS",0X1,3);
	split_sreg_range(0X40011000,"DS",0X1,3);
	split_sreg_range(0X40011400,"DS",0X1,3);
	split_sreg_range(0X40012000,"DS",0X1,3);
	split_sreg_range(0X40012100,"DS",0X1,3);
	split_sreg_range(0X40012200,"DS",0X1,3);
	split_sreg_range(0X40012300,"DS",0X1,3);
	split_sreg_range(0X40012C00,"DS",0X1,3);
	split_sreg_range(0X40012C48,"DS",0X1,3);
	split_sreg_range(0X40012C80,"DS",0X1,3);
	split_sreg_range(0X40013000,"DS",0X1,3);
	split_sreg_range(0X40013800,"DS",0X1,3);
	split_sreg_range(0X40013820,"DS",0X1,3);
	split_sreg_range(0X40013C00,"DS",0X1,3);
	split_sreg_range(0X40014000,"DS",0X1,3);
	split_sreg_range(0X40014020,"DS",0X1,3);
	split_sreg_range(0X40014034,"DS",0X1,3);
	split_sreg_range(0X40014400,"DS",0X1,3);
	split_sreg_range(0X4001440C,"DS",0X1,3);
	split_sreg_range(0X40014420,"DS",0X1,3);
	split_sreg_range(0X40014434,"DS",0X1,3);
	split_sreg_range(0X40014800,"DS",0X1,3);
	split_sreg_range(0X4001480C,"DS",0X1,3);
	split_sreg_range(0X40014820,"DS",0X1,3);
	split_sreg_range(0X40014834,"DS",0X1,3);
	split_sreg_range(0X40014850,"DS",0X1,3);
	split_sreg_range(0X40020000,"DS",0X1,3);
	split_sreg_range(0X40020400,"DS",0X1,3);
	split_sreg_range(0X40020800,"DS",0X1,3);
	split_sreg_range(0X40020C00,"DS",0X1,3);
	split_sreg_range(0X40021000,"DS",0X1,3);
	split_sreg_range(0X40021400,"DS",0X1,3);
	split_sreg_range(0X40021800,"DS",0X1,3);
	split_sreg_range(0X40021C00,"DS",0X1,3);
	split_sreg_range(0X40022000,"DS",0X1,3);
	split_sreg_range(0X40023000,"DS",0X1,3);
	split_sreg_range(0X40023800,"DS",0X1,3);
	split_sreg_range(0X40023820,"DS",0X1,3);
	split_sreg_range(0X40023830,"DS",0X1,3);
	split_sreg_range(0X40023840,"DS",0X1,3);
	split_sreg_range(0X40023850,"DS",0X1,3);
	split_sreg_range(0X40023860,"DS",0X1,3);
	split_sreg_range(0X40023870,"DS",0X1,3);
	split_sreg_range(0X40023880,"DS",0X1,3);
	split_sreg_range(0X40023C00,"DS",0X1,3);
	split_sreg_range(0X40026000,"DS",0X1,3);
	split_sreg_range(0X40026400,"DS",0X1,3);
	split_sreg_range(0X40028000,"DS",0X1,3);
	split_sreg_range(0X40028028,"DS",0X1,3);
	split_sreg_range(0X40028034,"DS",0X1,3);
	split_sreg_range(0X40028100,"DS",0X1,3);
	split_sreg_range(0X4002814C,"DS",0X1,3);
	split_sreg_range(0X40028168,"DS",0X1,3);
	split_sreg_range(0X40028194,"DS",0X1,3);
	split_sreg_range(0X400281C4,"DS",0X1,3);
	split_sreg_range(0X40028700,"DS",0X1,3);
	split_sreg_range(0X40028728,"DS",0X1,3);
	split_sreg_range(0X40029000,"DS",0X1,3);
	split_sreg_range(0X40029048,"DS",0X1,3);
	split_sreg_range(0X40040000,"DS",0X1,3);
	split_sreg_range(0X40040038,"DS",0X1,3);
	split_sreg_range(0X40040100,"DS",0X1,3);
	split_sreg_range(0X40040400,"DS",0X1,3);
	split_sreg_range(0X40040410,"DS",0X1,3);
	split_sreg_range(0X40040440,"DS",0X1,3);
	split_sreg_range(0X40040500,"DS",0X1,3);
	split_sreg_range(0X40040520,"DS",0X1,3);
	split_sreg_range(0X40040540,"DS",0X1,3);
	split_sreg_range(0X40040560,"DS",0X1,3);
	split_sreg_range(0X40040580,"DS",0X1,3);
	split_sreg_range(0X400405A0,"DS",0X1,3);
	split_sreg_range(0X400405C0,"DS",0X1,3);
	split_sreg_range(0X400405E0,"DS",0X1,3);
	split_sreg_range(0X40040600,"DS",0X1,3);
	split_sreg_range(0X40040620,"DS",0X1,3);
	split_sreg_range(0X40040640,"DS",0X1,3);
	split_sreg_range(0X40040660,"DS",0X1,3);
	split_sreg_range(0X40040800,"DS",0X1,3);
	split_sreg_range(0X40040810,"DS",0X1,3);
	split_sreg_range(0X40040818,"DS",0X1,3);
	split_sreg_range(0X40040828,"DS",0X1,3);
	split_sreg_range(0X40040880,"DS",0X1,3);
	split_sreg_range(0X40040900,"DS",0X1,3);
	split_sreg_range(0X40040908,"DS",0X1,3);
	split_sreg_range(0X40040910,"DS",0X1,3);
	split_sreg_range(0X40040918,"DS",0X1,3);
	split_sreg_range(0X40040920,"DS",0X1,3);
	split_sreg_range(0X40040928,"DS",0X1,3);
	split_sreg_range(0X40040930,"DS",0X1,3);
	split_sreg_range(0X40040940,"DS",0X1,3);
	split_sreg_range(0X40040948,"DS",0X1,3);
	split_sreg_range(0X40040950,"DS",0X1,3);
	split_sreg_range(0X40040960,"DS",0X1,3);
	split_sreg_range(0X40040968,"DS",0X1,3);
	split_sreg_range(0X40040970,"DS",0X1,3);
	split_sreg_range(0X40040980,"DS",0X1,3);
	split_sreg_range(0X40040988,"DS",0X1,3);
	split_sreg_range(0X40040990,"DS",0X1,3);
	split_sreg_range(0X400409A0,"DS",0X1,3);
	split_sreg_range(0X400409A8,"DS",0X1,3);
	split_sreg_range(0X400409B0,"DS",0X1,3);
	split_sreg_range(0X40040B00,"DS",0X1,3);
	split_sreg_range(0X40040B08,"DS",0X1,3);
	split_sreg_range(0X40040B10,"DS",0X1,3);
	split_sreg_range(0X40040B20,"DS",0X1,3);
	split_sreg_range(0X40040B28,"DS",0X1,3);
	split_sreg_range(0X40040B30,"DS",0X1,3);
	split_sreg_range(0X40040B40,"DS",0X1,3);
	split_sreg_range(0X40040B48,"DS",0X1,3);
	split_sreg_range(0X40040B50,"DS",0X1,3);
	split_sreg_range(0X40040B60,"DS",0X1,3);
	split_sreg_range(0X40040B68,"DS",0X1,3);
	split_sreg_range(0X40040B70,"DS",0X1,3);
	split_sreg_range(0X40040B80,"DS",0X1,3);
	split_sreg_range(0X40040B88,"DS",0X1,3);
	split_sreg_range(0X40040B90,"DS",0X1,3);
	split_sreg_range(0X40040BA0,"DS",0X1,3);
	split_sreg_range(0X40040BA8,"DS",0X1,3);
	split_sreg_range(0X40040BB0,"DS",0X1,3);
	split_sreg_range(0X40040E00,"DS",0X1,3);
	split_sreg_range(0X50000000,"DS",0X1,3);
	split_sreg_range(0X50000038,"DS",0X1,3);
	split_sreg_range(0X50000100,"DS",0X1,3);
	split_sreg_range(0X50000400,"DS",0X1,3);
	split_sreg_range(0X50000408,"DS",0X1,3);
	split_sreg_range(0X50000410,"DS",0X1,3);
	split_sreg_range(0X50000440,"DS",0X1,3);
	split_sreg_range(0X50000500,"DS",0X1,3);
	split_sreg_range(0X50000508,"DS",0X1,3);
	split_sreg_range(0X50000520,"DS",0X1,3);
	split_sreg_range(0X50000528,"DS",0X1,3);
	split_sreg_range(0X50000540,"DS",0X1,3);
	split_sreg_range(0X50000548,"DS",0X1,3);
	split_sreg_range(0X50000560,"DS",0X1,3);
	split_sreg_range(0X50000568,"DS",0X1,3);
	split_sreg_range(0X50000580,"DS",0X1,3);
	split_sreg_range(0X50000588,"DS",0X1,3);
	split_sreg_range(0X500005A0,"DS",0X1,3);
	split_sreg_range(0X500005A8,"DS",0X1,3);
	split_sreg_range(0X500005C0,"DS",0X1,3);
	split_sreg_range(0X500005C8,"DS",0X1,3);
	split_sreg_range(0X500005E0,"DS",0X1,3);
	split_sreg_range(0X500005E8,"DS",0X1,3);
	split_sreg_range(0X50000800,"DS",0X1,3);
	split_sreg_range(0X50000810,"DS",0X1,3);
	split_sreg_range(0X50000828,"DS",0X1,3);
	split_sreg_range(0X50000834,"DS",0X1,3);
	split_sreg_range(0X50000900,"DS",0X1,3);
	split_sreg_range(0X50000908,"DS",0X1,3);
	split_sreg_range(0X50000910,"DS",0X1,3);
	split_sreg_range(0X50000918,"DS",0X1,3);
	split_sreg_range(0X50000920,"DS",0X1,3);
	split_sreg_range(0X50000928,"DS",0X1,3);
	split_sreg_range(0X50000930,"DS",0X1,3);
	split_sreg_range(0X50000938,"DS",0X1,3);
	split_sreg_range(0X50000940,"DS",0X1,3);
	split_sreg_range(0X50000948,"DS",0X1,3);
	split_sreg_range(0X50000950,"DS",0X1,3);
	split_sreg_range(0X50000958,"DS",0X1,3);
	split_sreg_range(0X50000960,"DS",0X1,3);
	split_sreg_range(0X50000968,"DS",0X1,3);
	split_sreg_range(0X50000970,"DS",0X1,3);
	split_sreg_range(0X50000978,"DS",0X1,3);
	split_sreg_range(0X50000B00,"DS",0X1,3);
	split_sreg_range(0X50000B08,"DS",0X1,3);
	split_sreg_range(0X50000B10,"DS",0X1,3);
	split_sreg_range(0X50000B20,"DS",0X1,3);
	split_sreg_range(0X50000B28,"DS",0X1,3);
	split_sreg_range(0X50000B30,"DS",0X1,3);
	split_sreg_range(0X50000B40,"DS",0X1,3);
	split_sreg_range(0X50000B48,"DS",0X1,3);
	split_sreg_range(0X50000B50,"DS",0X1,3);
	split_sreg_range(0X50000B60,"DS",0X1,3);
	split_sreg_range(0X50000B68,"DS",0X1,3);
	split_sreg_range(0X50000B70,"DS",0X1,3);
	split_sreg_range(0X50000E00,"DS",0X1,3);
	split_sreg_range(0X50050000,"DS",0X1,3);
	split_sreg_range(0X50060000,"DS",0X1,3);
	split_sreg_range(0X50060400,"DS",0X1,3);
	split_sreg_range(0X500604F8,"DS",0X1,3);
	split_sreg_range(0X500605C0,"DS",0X1,3);
	split_sreg_range(0X50060800,"DS",0X1,3);
	split_sreg_range(0XA0000000,"DS",0X1,3);
	split_sreg_range(0XA0000060,"DS",0X1,3);
	split_sreg_range(0XA0000074,"DS",0X1,3);
	split_sreg_range(0XA0000080,"DS",0X1,3);
	split_sreg_range(0XA0000094,"DS",0X1,3);
	split_sreg_range(0XA00000A0,"DS",0X1,3);
	split_sreg_range(0XA0000104,"DS",0X1,3);
	split_sreg_range(0XE000E008,"DS",0X1,3);
	split_sreg_range(0XE000E010,"DS",0X1,3);
	split_sreg_range(0XE000E100,"DS",0X1,3);
	split_sreg_range(0XE000E180,"DS",0X1,3);
	split_sreg_range(0XE000E200,"DS",0X1,3);
	split_sreg_range(0XE000E280,"DS",0X1,3);
	split_sreg_range(0XE000E300,"DS",0X1,3);
	split_sreg_range(0XE000E400,"DS",0X1,3);
	split_sreg_range(0XE000ED00,"DS",0X1,3);
	split_sreg_range(0XE000ED34,"DS",0X1,3);
	split_sreg_range(0XE000ED88,"DS",0X1,3);
	split_sreg_range(0XE000ED90,"DS",0X1,3);
	split_sreg_range(0XE000EF00,"DS",0X1,3);
	split_sreg_range(0XE000EF34,"DS",0X1,3);
	split_sreg_range(0XE0042000,"DS",0X1,3);
}


static setupGeneric()
{
	auto currAddr, str;


}

static getVectorName(number) {
    auto funcName;
    if(number>15)
        funcName = form("IRQ_%i", number-16);
   
    // haha x360_imports.numberc has good numbereas
    if(number == 0) funcName = "idk";
    else if(number == 1) funcName = "RESET";
    else if(number == 2) funcName = "NMI";
    else if(number == 3) funcName = "HARD_FAULT";
    else if(number == 4) funcName = "MEM_MGMT_FAULT";
    else if(number == 5) funcName = "BUS_FAULT";
    else if(number == 6) funcName = "USAGE_FAULT";
    else if(number == 7) funcName = "reserved1";
    else if(number == 8) funcName = "reserved2";
    else if(number == 9) funcName = "reserved3";
    else if(number == 10) funcName = "reserved4";
    else if(number == 11) funcName = "SV_CALL";
    else if(number == 12) funcName = "DEBUG";
    else if(number == 13) funcName = "reserved5";
    else if(number == 14) funcName = "PendSV_Handler";
    else if(number == 15) funcName = "SysTickHandler";
    else if(number == 19) funcName = "RTC_WKUP_IRQHandler";
    else if(number == 22) funcName = "EXTI0_IRQHandler";
    else if(number == 23) funcName = "EXTI1_IRQHandler";
    else if(number == 24) funcName = "EXTI2_IRQHandler";
    else if(number == 41) funcName = "TIM1_UP_TIM10_IRQHandler";
    else if(number == 44) funcName = "TIM2_IRQHandler";
    else if(number == 45) funcName = "TIM3_IRQHandler";
    else if(number == 46) funcName = "TIM4_IRQHandler";
    else if(number == 58) funcName = "OTG_FS_WKUP_IRQHandler";
    else if(number == 59) funcName = "TIM8_BRK_TIM12_IRQHandler";
    else if(number == 60) funcName = "TIM8_UP_TIM13_IRQHandler";
    else if(number == 66) funcName = "md380_spiflash_handler";
    else if(number == 70) funcName = "TIM6_DAC_IRQHandler";
    else if(number == 71) funcName = "TIM7_IRQHandler";
    else if(number == 72) funcName = "DMA2_Stream0_IRQHandler";
   
    return funcName;   
}

static CreateVector(address, name)
{
	auto a, b;
	auto func_addr;
	
	func_addr = Dword(address);
    MakeName(func_addr-1, "_V_"+name);
	MakeCode(func_addr-1);
	MakeFunction(func_addr-1, BADADDR);
	
	MakeName(address, name);
    MakeDword(address);
	op_plain_offset(address, 0, 0);
}


static SetupVectors()
{
    auto i = 1;
    auto func_addr;
	auto b,c;
    auto baseaddr = 0x800C000;
    
    nameDword(baseaddr, "stack_pointer");
	op_plain_offset(baseaddr, 0, 0);
    
    while( i <= 96){
        if(i<16)
			CreateVector(baseaddr+(i*4), getVectorName(i));
		else{
			
			
			func_addr = Dword(baseaddr+(i*4));
			b = Word(func_addr+1);
			c = Word(func_addr+1);
			MakeCode(func_addr-1);
			MakeFunction(func_addr-1, BADADDR);
			if(b == 0xF7FF && c != 0xF7FF ){
				
					MakeName(func_addr-1, "j_V_"+getVectorName(i));
				    
					b = Rfirst0(func_addr+1);
					MakeName(b, "V_"+getVectorName(i));
					MakeCode(b);
					MakeFunction(b, BADADDR);
			}else{
				
				MakeName(func_addr-1, "V_"+getVectorName(i));
				MakeName(baseaddr+(i*4), getVectorName(i));
				MakeDword(baseaddr+(i*4));
				op_plain_offset(baseaddr+(i*4), 0, 0);
			}
			
		}
        i=i+1;
    }
    
}

static main() {	
	// 4.55 sys_nosys offset 0x264D0
	// 5.05 sysent offset 0x107C610
	// 6.00b1 sysent offset 
	
	// calculate sys_nosys
	/*auto sys_nosys = SegStart(FirstSeg()) + 0x264D0;
	
	// make pattern
	auto b = form("00 00 00 00 00 00 00 00 %X %X %X %X %X %X %X %X 00 00 00 00 00 00 00 00", (sys_nosys >> 0) & 0xFF, (sys_nosys >> 8) & 0xFF, (sys_nosys >> 16) & 0xFF, (sys_nosys >> 24) & 0xFF, (sys_nosys >> 32) & 0xFF, (sys_nosys >> 40) & 0xFF, (sys_nosys >> 48) & 0xFF, (sys_nosys >> 56) & 0xFF);
	*/
	// search for sysent table
	
	SetupVectors();
	STM32();
	Segments();
}
















